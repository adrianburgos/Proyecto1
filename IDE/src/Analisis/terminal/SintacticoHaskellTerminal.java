
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.terminal;

import java_cup.runtime.Symbol;
import Reportes.*;
import fabrica.*;
import ide.Const;
import semanticos.haskell.Haskell;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoHaskellTerminal extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symsHT.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoHaskellTerminal() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoHaskellTerminal(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoHaskellTerminal(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\034\002\000\002\002" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\006\000\002\004\003\000\002\033\004\000\002" +
    "\033\006\000\002\003\010\000\002\016\003\000\002\016" +
    "\005\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\023\005\000\002\023\003\000\002" +
    "\020\007\000\002\020\005\000\002\021\003\000\002\021" +
    "\003\000\002\022\005\000\002\022\003\000\002\024\005" +
    "\000\002\024\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\005\006\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\006\006\000\002\007\006" +
    "\000\002\010\006\000\002\011\006\000\002\013\003\000" +
    "\002\013\003\000\002\026\006\000\002\026\006\000\002" +
    "\026\006\000\002\026\006\000\002\026\006\000\002\030" +
    "\006\000\002\030\006\000\002\030\006\000\002\015\010" +
    "\000\002\032\005\000\002\032\003\000\002\032\002\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\005" +
    "\000\002\031\005\000\002\012\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\004\000\002\014\005\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\006\000\002\014\003\000" +
    "\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\014\033\000\034\000\037\000\046\000\047" +
    "\000\001\002\000\014\033\021\034\017\037\014\046\031" +
    "\047\010\001\002\000\004\002\006\001\002\000\004\002" +
    "\001\001\002\000\004\002\ufffa\001\002\000\016\002\ufff1" +
    "\022\ufff1\033\ufff1\036\ufff1\043\ufff1\044\ufff1\001\002\000" +
    "\004\002\uffd2\001\002\000\004\002\ufffc\001\002\000\004" +
    "\002\ufffe\001\002\000\014\033\204\037\176\046\211\047" +
    "\173\050\203\001\002\000\004\002\uffff\001\002\000\006" +
    "\002\ufffb\022\ufff3\001\002\000\004\002\ufff7\001\002\000" +
    "\006\002\uffd1\022\ufff0\001\002\000\046\004\100\005\235" +
    "\006\143\007\135\010\140\011\144\012\142\013\145\014" +
    "\040\015\044\016\042\017\043\020\045\021\136\033\033" +
    "\037\014\046\141\047\010\001\002\000\034\002\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\033\uffd9\036\uffd9\040\uffd9\042\uffd9\043\uffd9\001\002\000" +
    "\006\002\ufff9\022\uffee\001\002\000\034\002\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\033" +
    "\uffda\036\uffda\040\uffda\042\uffda\043\uffda\001\002\000\034" +
    "\002\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\033\uffd8\036\uffd8\040\uffd8\042\uffd8\043\uffd8" +
    "\001\002\000\004\002\ufffd\001\002\000\034\002\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\033\uffd7\036\uffd7\040\uffd7\042\uffd7\043\uffd7\001\002\000" +
    "\004\022\032\001\002\000\016\002\uffef\022\uffef\033\uffef" +
    "\036\uffef\043\uffef\044\uffef\001\002\000\012\033\033\037" +
    "\014\046\031\047\010\001\002\000\016\014\040\015\044" +
    "\016\042\017\043\020\045\046\041\001\002\000\016\002" +
    "\uffb9\022\uffb9\033\uffb9\036\uffb9\043\uffb9\044\uffb9\001\002" +
    "\000\016\002\uffee\022\uffee\033\uffee\036\uffee\043\uffee\044" +
    "\uffee\001\002\000\016\002\ufff0\022\ufff0\033\ufff0\036\ufff0" +
    "\043\ufff0\044\ufff0\001\002\000\016\002\ufff3\022\ufff3\033" +
    "\ufff3\036\ufff3\043\ufff3\044\ufff3\001\002\000\012\033\033" +
    "\037\014\046\031\047\010\001\002\000\004\035\056\001" +
    "\002\000\012\033\033\037\014\046\031\047\010\001\002" +
    "\000\012\033\033\037\014\046\031\047\010\001\002\000" +
    "\012\033\033\037\014\046\031\047\010\001\002\000\012" +
    "\033\033\037\014\046\031\047\010\001\002\000\006\022" +
    "\032\033\047\001\002\000\016\002\uffcc\022\uffcc\033\uffcc" +
    "\036\uffcc\043\uffcc\044\uffcc\001\002\000\006\022\032\033" +
    "\051\001\002\000\016\002\uffcf\022\uffcf\033\uffcf\036\uffcf" +
    "\043\uffcf\044\uffcf\001\002\000\006\022\032\033\053\001" +
    "\002\000\016\002\uffcd\022\uffcd\033\uffcd\036\uffcd\043\uffcd" +
    "\044\uffcd\001\002\000\006\022\032\033\055\001\002\000" +
    "\016\002\uffce\022\uffce\033\uffce\036\uffce\043\uffce\044\uffce" +
    "\001\002\000\020\033\067\036\uffc5\037\063\043\uffc5\046" +
    "\074\047\060\050\065\001\002\000\006\036\227\043\230" +
    "\001\002\000\014\022\ufff1\033\uffbc\036\uffbc\043\uffbc\044" +
    "\ufff1\001\002\000\010\033\uffbf\036\uffbf\043\uffbf\001\002" +
    "\000\010\033\uffc2\036\uffc2\043\uffc2\001\002\000\014\033" +
    "\204\037\176\046\211\047\173\050\203\001\002\000\014" +
    "\022\ufff3\033\uffc1\036\uffc1\043\uffc1\044\ufff3\001\002\000" +
    "\010\033\uffbd\036\uffbd\043\uffbd\001\002\000\014\022\ufff0" +
    "\033\uffc0\036\uffc0\043\uffc0\044\ufff0\001\002\000\036\004" +
    "\100\006\143\007\135\010\140\011\144\012\142\013\145" +
    "\014\040\015\044\016\042\017\043\020\045\021\136\046" +
    "\041\001\002\000\014\022\uffee\033\uffc3\036\uffc3\043\uffc3" +
    "\044\uffee\001\002\000\010\033\uffc4\036\uffc4\043\uffc4\001" +
    "\002\000\006\022\032\044\075\001\002\000\006\036\uffc6" +
    "\043\uffc6\001\002\000\014\022\uffef\033\uffbe\036\uffbe\043" +
    "\uffbe\044\uffef\001\002\000\004\033\076\001\002\000\004" +
    "\004\100\001\002\000\010\033\uffba\036\uffba\043\uffba\001" +
    "\002\000\016\024\106\033\102\034\104\041\110\045\107" +
    "\046\105\001\002\000\024\023\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\042\uffaf\001\002" +
    "\000\030\006\143\007\135\010\140\011\144\012\142\013" +
    "\145\021\136\033\033\037\014\046\141\047\010\001\002" +
    "\000\024\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\031\uffab\033\uffab\042\uffab\001\002\000\024\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\033" +
    "\uffa9\042\uffa9\001\002\000\024\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\033\uffad\042\uffad\001" +
    "\002\000\016\024\106\033\102\034\104\041\110\045\107" +
    "\046\105\001\002\000\024\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\033\uffae\042\uffae\001\002" +
    "\000\016\024\106\033\102\034\104\041\110\045\107\046" +
    "\105\001\002\000\024\023\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\033\uffaa\042\uffaa\001\002\000" +
    "\022\023\116\024\117\025\113\026\122\027\115\030\120" +
    "\031\121\033\114\001\002\000\016\024\106\033\102\034" +
    "\104\041\110\045\107\046\105\001\002\000\016\002\uffdb" +
    "\033\uffdb\036\uffdb\040\uffdb\043\uffdb\044\uffdb\001\002\000" +
    "\016\024\106\033\102\034\104\041\110\045\107\046\105" +
    "\001\002\000\016\024\106\033\102\034\104\041\110\045" +
    "\107\046\105\001\002\000\016\024\106\033\102\034\104" +
    "\041\110\045\107\046\105\001\002\000\016\024\106\033" +
    "\102\034\104\041\110\045\107\046\105\001\002\000\016" +
    "\024\106\033\102\034\104\041\110\045\107\046\105\001" +
    "\002\000\016\024\106\033\102\034\104\041\110\045\107" +
    "\046\105\001\002\000\024\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\120\031\121\033\uffb5\042\uffb5\001\002" +
    "\000\024\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\033\uffb3\042\uffb3\001\002\000\024\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\033" +
    "\uffb2\042\uffb2\001\002\000\024\023\uffb7\024\uffb7\025\113" +
    "\026\122\027\115\030\120\031\121\033\uffb7\042\uffb7\001" +
    "\002\000\024\023\uffb8\024\uffb8\025\113\026\122\027\115" +
    "\030\120\031\121\033\uffb8\042\uffb8\001\002\000\024\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\120\031\121" +
    "\033\uffb4\042\uffb4\001\002\000\024\023\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\120\031\121\033\uffb6\042\uffb6" +
    "\001\002\000\022\023\116\024\117\025\113\026\122\027" +
    "\115\030\120\031\121\042\133\001\002\000\024\023\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\033" +
    "\uffb0\042\uffb0\001\002\000\024\023\uffb1\024\uffb1\025\113" +
    "\026\122\027\115\030\120\031\121\033\uffb1\042\uffb1\001" +
    "\002\000\014\033\067\037\063\046\074\047\060\050\065" +
    "\001\002\000\012\033\033\037\014\046\031\047\010\001" +
    "\002\000\006\022\032\044\160\001\002\000\012\033\033" +
    "\037\014\046\031\047\010\001\002\000\010\022\uffef\035" +
    "\056\044\uffef\001\002\000\012\033\033\037\014\046\031" +
    "\047\010\001\002\000\014\033\067\037\063\046\074\047" +
    "\060\050\065\001\002\000\012\033\033\037\014\046\031" +
    "\047\010\001\002\000\012\033\033\037\014\046\031\047" +
    "\010\001\002\000\006\022\032\033\147\001\002\000\034" +
    "\002\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\033\uffca\036\uffca\040\uffca\042\uffca\043\uffca" +
    "\001\002\000\006\022\032\033\151\001\002\000\034\002" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\033\uffd3\036\uffd3\040\uffd3\042\uffd3\043\uffd3\001" +
    "\002\000\004\033\153\001\002\000\034\002\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033" +
    "\uffd6\036\uffd6\040\uffd6\042\uffd6\043\uffd6\001\002\000\006" +
    "\022\032\033\155\001\002\000\034\002\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb" +
    "\036\uffcb\040\uffcb\042\uffcb\043\uffcb\001\002\000\006\022" +
    "\032\033\157\001\002\000\034\002\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\033\uffd4\036" +
    "\uffd4\040\uffd4\042\uffd4\043\uffd4\001\002\000\004\033\076" +
    "\001\002\000\004\033\162\001\002\000\024\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\033\uffac" +
    "\042\uffac\001\002\000\006\033\ufff6\044\164\001\002\000" +
    "\004\033\076\001\002\000\004\033\ufff5\001\002\000\006" +
    "\022\032\033\167\001\002\000\034\002\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9" +
    "\036\uffc9\040\uffc9\042\uffc9\043\uffc9\001\002\000\004\033" +
    "\171\001\002\000\034\002\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\033\uffd5\036\uffd5\040" +
    "\uffd5\042\uffd5\043\uffd5\001\002\000\006\040\uffeb\043\225" +
    "\001\002\000\006\040\uffe9\043\uffe9\001\002\000\006\040" +
    "\uffdd\043\uffdd\001\002\000\006\040\uffdc\043\uffdc\001\002" +
    "\000\010\033\204\046\211\050\203\001\002\000\004\040" +
    "\222\001\002\000\004\040\uffec\001\002\000\006\040\uffed" +
    "\043\216\001\002\000\006\040\uffe1\043\uffe1\001\002\000" +
    "\006\040\uffe3\043\uffe3\001\002\000\024\004\100\006\143" +
    "\007\135\010\140\011\144\012\142\013\145\021\136\046" +
    "\041\001\002\000\006\040\uffe5\043\214\001\002\000\006" +
    "\040\uffdf\043\uffdf\001\002\000\006\040\uffe6\043\212\001" +
    "\002\000\006\040\uffe0\043\uffe0\001\002\000\006\040\uffde" +
    "\043\uffde\001\002\000\004\050\213\001\002\000\006\040" +
    "\uffe4\043\uffe4\001\002\000\006\033\204\046\211\001\002" +
    "\000\006\040\uffe2\043\uffe2\001\002\000\004\037\217\001" +
    "\002\000\010\033\204\046\211\050\203\001\002\000\004" +
    "\040\221\001\002\000\006\040\uffe8\043\uffe8\001\002\000" +
    "\014\022\ufff2\033\uffbb\036\uffbb\043\uffbb\044\ufff2\001\002" +
    "\000\004\040\224\001\002\000\006\040\uffe7\043\uffe7\001" +
    "\002\000\004\047\226\001\002\000\006\040\uffea\043\uffea" +
    "\001\002\000\004\033\232\001\002\000\014\033\067\037" +
    "\063\046\074\047\060\050\065\001\002\000\006\036\uffc7" +
    "\043\uffc7\001\002\000\040\002\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\033\uffc8" +
    "\036\uffc8\040\uffc8\042\uffc8\043\uffc8\044\uffc8\001\002\000" +
    "\006\022\032\033\234\001\002\000\016\002\uffd0\022\uffd0" +
    "\033\uffd0\036\uffd0\043\uffd0\044\uffd0\001\002\000\004\046" +
    "\241\001\002\000\006\022\032\044\160\001\002\000\004" +
    "\033\240\001\002\000\004\002\ufff8\001\002\000\004\032" +
    "\242\001\002\000\012\033\033\037\014\046\031\047\010" +
    "\001\002\000\006\022\032\033\244\001\002\000\004\002" +
    "\ufff4\001\002\000\004\040\246\001\002\000\016\002\ufff2" +
    "\022\ufff2\033\ufff2\036\ufff2\043\ufff2\044\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\002\004\034\003\001\001\000\036\003" +
    "\012\004\014\005\025\006\023\007\021\010\024\011\026" +
    "\012\015\013\006\015\022\016\027\025\011\026\017\030" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\005\207\006\023\007\021" +
    "\010\024\011\026\015\205\017\244\020\200\021\177\022" +
    "\206\023\171\024\204\025\174\027\201\030\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\036\015\034\016\235\026\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\036\015" +
    "\034\016\033\026\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\036\015\034\016\232\026\035\001\001" +
    "\000\002\001\001\000\012\012\036\015\034\016\053\026" +
    "\035\001\001\000\012\012\036\015\034\016\051\026\035" +
    "\001\001\000\012\012\036\015\034\016\047\026\035\001" +
    "\001\000\012\012\036\015\034\016\045\026\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\070\006\023\007" +
    "\021\010\024\011\026\012\063\015\067\016\071\025\061" +
    "\026\065\030\060\031\072\032\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\005\207\006\023\007\021\010\024\011\026\015" +
    "\205\017\176\020\200\021\177\022\206\023\171\024\204" +
    "\025\174\027\201\030\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\023\007\021\010" +
    "\024\011\026\014\111\015\110\025\100\030\102\001\001" +
    "\000\002\001\001\000\012\012\036\015\034\016\136\026" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\023\007\021\010\024\011\026\014" +
    "\133\015\110\025\100\030\102\001\001\000\002\001\001" +
    "\000\022\006\023\007\021\010\024\011\026\014\131\015" +
    "\110\025\100\030\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\023\007\021\010\024\011\026\014" +
    "\130\015\110\025\100\030\102\001\001\000\002\001\001" +
    "\000\022\006\023\007\021\010\024\011\026\014\127\015" +
    "\110\025\100\030\102\001\001\000\022\006\023\007\021" +
    "\010\024\011\026\014\126\015\110\025\100\030\102\001" +
    "\001\000\022\006\023\007\021\010\024\011\026\014\125" +
    "\015\110\025\100\030\102\001\001\000\022\006\023\007" +
    "\021\010\024\011\026\014\124\015\110\025\100\030\102" +
    "\001\001\000\022\006\023\007\021\010\024\011\026\014" +
    "\123\015\110\025\100\030\102\001\001\000\022\006\023" +
    "\007\021\010\024\011\026\014\122\015\110\025\100\030" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\070\006\023\007\021\010" +
    "\024\011\026\012\063\015\067\016\071\025\061\026\065" +
    "\030\060\031\167\001\001\000\012\012\036\015\034\016" +
    "\165\026\035\001\001\000\004\033\160\001\001\000\012" +
    "\012\036\015\034\016\155\026\035\001\001\000\002\001" +
    "\001\000\012\012\036\015\034\016\153\026\035\001\001" +
    "\000\032\005\070\006\023\007\021\010\024\011\026\012" +
    "\063\015\067\016\071\025\061\026\065\030\060\031\151" +
    "\001\001\000\012\012\036\015\034\016\147\026\035\001" +
    "\001\000\012\012\036\015\034\016\145\026\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\207" +
    "\006\023\007\021\010\024\011\026\015\205\021\222\022" +
    "\206\024\204\025\174\027\201\030\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\207\006\023\007\021\010\024\011\026\015\205\025" +
    "\174\027\214\030\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\207\006\023\007\021\010\024\011" +
    "\026\015\205\021\217\022\206\024\204\025\174\027\201" +
    "\030\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\070\006\023\007\021\010\024\011\026\012\063\015\067" +
    "\016\071\025\061\026\065\030\060\031\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\036\015\034\016\242\026\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoHaskellTerminal$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoHaskellTerminal$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoHaskellTerminal$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz = new Nodo(); 
    public void syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", s.value.toString() + " no debe de ir en esa posicion", s.right, s.left);
    }

    public void unrecovered_syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", "No se pudo recuperar de: " + s.value.toString(), s.right, s.left);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoHaskellTerminal$actions {




  private final SintacticoHaskellTerminal parser;

  /** Constructor */
  CUP$SintacticoHaskellTerminal$actions(SintacticoHaskellTerminal parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoHaskellTerminal$do_action_part00000000(
    int                        CUP$SintacticoHaskellTerminal$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHaskellTerminal$parser,
    java.util.Stack            CUP$SintacticoHaskellTerminal$stack,
    int                        CUP$SintacticoHaskellTerminal$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoHaskellTerminal$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoHaskellTerminal$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoHaskellTerminal$parser.done_parsing();
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
System.out.println("inicio");
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 CUERPO 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 raiz = CUERPO; System.out.println("FINALIZO"); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= LIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= CALCULAR 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= OPSIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= CONCATLISTAS 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= OPLIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= LLAMADO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= dolar LISTA POS dolar 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int POSleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int POSright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo POS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearPosLista(t1, POS); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= porcentaje 
            {
              Nodo RESULT =null;
		 RESULT = NodoGeneral.crearHoja(Const.porcentaje, Const.porcentaje); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // POS ::= poslista CALCULAR 
            {
              Nodo RESULT =null;
		int CALCULARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int CALCULARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo CALCULAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearPos(CALCULAR); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("POS",25, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // POS ::= poslista CALCULAR poslista CALCULAR 
            {
              Nodo RESULT =null;
		int CALCULARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int CALCULARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo CALCULAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int CALCULAR2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int CALCULAR2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo CALCULAR2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearPos(CALCULAR, CALCULAR2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("POS",25, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LIST ::= dolar let iden igual LISTA dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)).value;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearLista(id, LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LIST",1, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA ::= CONCATLISTAS 
            {
              Nodo RESULT =null;
		int CONCATleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int CONCATright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo CONCAT = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = CONCAT; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LISTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA ::= acorchete L ccorchete 
            {
              Nodo RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = L; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LISTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA ::= cadena 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = Haskell.convertirCadena(t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LISTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA ::= OPLISTA 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LISTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LISTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LISTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // L ::= LCORCHETES 
            {
              Nodo RESULT =null;
		int LCORCHETESleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int LCORCHETESright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo LCORCHETES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = LCORCHETES; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("L",13, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // L ::= LVAL 
            {
              Nodo RESULT =null;
		int LVALleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int LVALright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo LVAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = LVAL; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("L",13, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // L ::= LCAD 
            {
              Nodo RESULT =null;
		int LCADleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int LCADright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo LCAD = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		
                    Nodo cor = new Nodo(Const.lcorchetes);
                    cor.hijos.addAll(LCAD.hijos);
                    RESULT = (Nodo) cor;
                
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("L",13, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LCAD ::= LCAD coma cadena 
            {
              Nodo RESULT =null;
		int LCADleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int LCADright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo LCAD = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		
                    LCAD.hijos.add(Haskell.convertirCadena(t1));
                    RESULT = LCAD;
                
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LCAD",17, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LCAD ::= cadena 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		
                    Nodo lcad = new Nodo("LCAD");
                    lcad.hijos.add(Haskell.convertirCadena(t1));
                    RESULT = (Nodo) lcad;
                
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LCAD",17, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LCORCHETES ::= LCORCHETES coma acorchete LVAL ccorchete 
            {
              Nodo RESULT =null;
		int LCORCHETESleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)).left;
		int LCORCHETESright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)).right;
		Nodo LCORCHETES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)).value;
		int LVALleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LVALright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LVAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		
                        LCORCHETES.hijos.add(LVAL);
                        RESULT = (Nodo) LCORCHETES;
                    
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LCORCHETES",14, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LCORCHETES ::= acorchete LVAL ccorchete 
            {
              Nodo RESULT =null;
		int LVALleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LVALright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LVAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearLcorchetes(LVAL); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LCORCHETES",14, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LVAL ::= LCAR 
            {
              Nodo RESULT =null;
		int LCARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int LCARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo LCAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = LCAR; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LVAL",15, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LVAL ::= LEXP 
            {
              Nodo RESULT =null;
		int LEXPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int LEXPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo LEXP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = LEXP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LVAL",15, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LCAR ::= LCAR coma caracter 
            {
              Nodo RESULT =null;
		int LCARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int LCARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo LCAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		
                        LCAR.hijos.add(NodoGeneral.crearHoja(Const.caracter, t1, Const.tcaracter));
                        RESULT = (Nodo) LCAR;
                    
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LCAR",16, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LCAR ::= caracter 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearLista(NodoGeneral.crearHoja(Const.caracter, t1, Const.tcaracter)); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LCAR",16, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LEXP ::= LEXP coma EXP 
            {
              Nodo RESULT =null;
		int LEXPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int LEXPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo LEXP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		
                        LEXP.hijos.add(t1);
                        RESULT = (Nodo) LEXP;
                    
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LEXP",18, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LEXP ::= EXP 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearLista(t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LEXP",18, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= OPSIST 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CALCULAR ::= dolar calcular E dolar 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CALCULAR",3, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPSIST ::= SUCC 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPSIST",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPSIST ::= DECC 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPSIST",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPSIST ::= MIN 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPSIST",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPSIST ::= MAX 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPSIST",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SUCC ::= dolar succ VALOR dolar 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearSucc(VALOR); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("SUCC",4, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECC ::= dolar decc VALOR dolar 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearDecc(VALOR); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("DECC",5, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MIN ::= dolar min LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearMin(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("MIN",6, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MAX ::= dolar max LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearMax(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("MAX",7, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPLIST ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLIST",9, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPLIST ::= OPLISTA 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLIST",9, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPLISTA ::= dolar revers LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearRevers(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLISTA",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPLISTA ::= dolar impr LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearImpr(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLISTA",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPLISTA ::= dolar par LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearPar(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLISTA",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPLISTA ::= dolar asc LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearAsc(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLISTA",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPLISTA ::= dolar desc LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearDesc(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLISTA",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPEXP ::= dolar sum LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearSum(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPEXP",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPEXP ::= dolar product LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearProduct(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPEXP",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPEXP ::= dolar length LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearLength(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPEXP",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LLAMADO ::= dolar iden allave LVALOR cllave dolar 
            {
              Nodo RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)).value;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		 RESULT = NodoGeneral.crearLlamado(iden, LVALOR); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LLAMADO",11, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LVALOR ::= LVALOR coma VALOR 
            {
              Nodo RESULT =null;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		
                        LVALOR.hijos.add(VALOR);
                        RESULT = (Nodo) LVALOR;
                    
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LVALOR",24, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LVALOR ::= VALOR 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearLvalor(VALOR); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LVALOR",24, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LVALOR ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.lvalor); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LVALOR",24, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALOR ::= CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALOR ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALOR ::= OPSIST 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALOR ::= CONCATLISTAS 
            {
              Nodo RESULT =null;
		int CONCATleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int CONCATright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo CONCAT = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = CONCAT; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALOR ::= OPLISTA 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALOR ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALOR ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALOR ::= caracter 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.caracter, t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALOR ::= cadena 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = Haskell.convertirCadena(t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALOR ::= acorchete L ccorchete 
            {
              Nodo RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = L; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALOR ::= LISTA poslista CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int CALCULARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int CALCULARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo CALCULAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearPosLista(t1, CALCULAR); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONCATLISTAS ::= LISTA masmas LISTA 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.masmas, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CONCATLISTAS",8, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E mas E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mas, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E menos E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.menos, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E por E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.por, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E dividido E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.dividido, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E mod E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mod, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E pot E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.pot, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E sqrt E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.sqrt, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= menos E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.menos, t1, null); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= aparentesis E cparentesis 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= OPSIST 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= numero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.numero, t1, Const.tdecimal); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1, Const.tals); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= dolar LISTA POS dolar 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int POSleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int POSright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo POS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearPosLista(t1, POS); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= OPEXP 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= porcentaje 
            {
              Nodo RESULT =null;
		 RESULT = NodoGeneral.crearHoja(Const.porcentaje, Const.porcentaje); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoHaskellTerminal$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoHaskellTerminal$do_action(
    int                        CUP$SintacticoHaskellTerminal$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHaskellTerminal$parser,
    java.util.Stack            CUP$SintacticoHaskellTerminal$stack,
    int                        CUP$SintacticoHaskellTerminal$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoHaskellTerminal$do_action_part00000000(
                               CUP$SintacticoHaskellTerminal$act_num,
                               CUP$SintacticoHaskellTerminal$parser,
                               CUP$SintacticoHaskellTerminal$stack,
                               CUP$SintacticoHaskellTerminal$top);
    }
}

}
