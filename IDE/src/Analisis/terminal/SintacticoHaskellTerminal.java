
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.terminal;

import java_cup.runtime.Symbol;
import Reportes.*;
import fabrica.*;
import ide.Const;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoHaskellTerminal extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symsHT.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoHaskellTerminal() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoHaskellTerminal(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoHaskellTerminal(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\032\002\000\002\002" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\003\010\000\002\016\003\000\002" +
    "\016\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\007\000\002\020\005\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\022\005\000\002" +
    "\022\003\000\002\023\005\000\002\023\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\005\006\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\006\006\000\002\007\006\000\002\010\006\000\002\011" +
    "\006\000\002\013\003\000\002\013\003\000\002\025\006" +
    "\000\002\025\006\000\002\025\006\000\002\025\006\000" +
    "\002\025\006\000\002\027\006\000\002\027\006\000\002" +
    "\027\006\000\002\015\010\000\002\031\005\000\002\031" +
    "\003\000\002\031\002\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\005\000\002\030\005\000\002\012" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\004\000\002\014\005\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\005\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\014\033\000\034\000\037\000\046\000\047" +
    "\000\001\002\000\014\033\021\034\017\037\014\046\031" +
    "\047\010\001\002\000\004\002\006\001\002\000\004\002" +
    "\001\001\002\000\004\002\ufffa\001\002\000\016\002\ufff4" +
    "\022\ufff4\033\ufff4\036\ufff4\043\ufff4\044\ufff4\001\002\000" +
    "\004\002\uffd7\001\002\000\004\002\ufffc\001\002\000\004" +
    "\002\ufffe\001\002\000\014\033\175\037\167\046\202\047" +
    "\164\050\174\001\002\000\004\002\uffff\001\002\000\006" +
    "\002\ufffb\022\ufff6\001\002\000\004\002\ufff8\001\002\000" +
    "\006\002\uffd6\022\ufff3\001\002\000\040\004\100\005\224" +
    "\006\121\007\115\010\117\011\122\012\120\013\123\014" +
    "\040\015\044\016\042\017\043\020\045\021\116\046\041" +
    "\001\002\000\034\002\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\033\uffde\036\uffde\040\uffde" +
    "\042\uffde\043\uffde\001\002\000\006\002\ufff9\022\ufff1\001" +
    "\002\000\034\002\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\033\uffdf\036\uffdf\040\uffdf\042" +
    "\uffdf\043\uffdf\001\002\000\034\002\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\036" +
    "\uffdd\040\uffdd\042\uffdd\043\uffdd\001\002\000\004\002\ufffd" +
    "\001\002\000\034\002\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\036\uffdc\040\uffdc" +
    "\042\uffdc\043\uffdc\001\002\000\004\022\032\001\002\000" +
    "\016\002\ufff2\022\ufff2\033\ufff2\036\ufff2\043\ufff2\044\ufff2" +
    "\001\002\000\012\033\033\037\014\046\031\047\010\001" +
    "\002\000\016\014\040\015\044\016\042\017\043\020\045" +
    "\046\041\001\002\000\016\002\uffbe\022\uffbe\033\uffbe\036" +
    "\uffbe\043\uffbe\044\uffbe\001\002\000\016\002\ufff1\022\ufff1" +
    "\033\ufff1\036\ufff1\043\ufff1\044\ufff1\001\002\000\016\002" +
    "\ufff3\022\ufff3\033\ufff3\036\ufff3\043\ufff3\044\ufff3\001\002" +
    "\000\016\002\ufff6\022\ufff6\033\ufff6\036\ufff6\043\ufff6\044" +
    "\ufff6\001\002\000\012\033\033\037\014\046\031\047\010" +
    "\001\002\000\004\035\056\001\002\000\012\033\033\037" +
    "\014\046\031\047\010\001\002\000\012\033\033\037\014" +
    "\046\031\047\010\001\002\000\012\033\033\037\014\046" +
    "\031\047\010\001\002\000\012\033\033\037\014\046\031" +
    "\047\010\001\002\000\006\022\032\033\047\001\002\000" +
    "\016\002\uffd1\022\uffd1\033\uffd1\036\uffd1\043\uffd1\044\uffd1" +
    "\001\002\000\006\022\032\033\051\001\002\000\016\002" +
    "\uffd4\022\uffd4\033\uffd4\036\uffd4\043\uffd4\044\uffd4\001\002" +
    "\000\006\022\032\033\053\001\002\000\016\002\uffd2\022" +
    "\uffd2\033\uffd2\036\uffd2\043\uffd2\044\uffd2\001\002\000\006" +
    "\022\032\033\055\001\002\000\016\002\uffd3\022\uffd3\033" +
    "\uffd3\036\uffd3\043\uffd3\044\uffd3\001\002\000\020\033\067" +
    "\036\uffca\037\063\043\uffca\046\074\047\060\050\065\001" +
    "\002\000\006\036\216\043\217\001\002\000\014\022\ufff4" +
    "\033\uffc1\036\uffc1\043\uffc1\044\ufff4\001\002\000\010\033" +
    "\uffc4\036\uffc4\043\uffc4\001\002\000\010\033\uffc7\036\uffc7" +
    "\043\uffc7\001\002\000\014\033\175\037\167\046\202\047" +
    "\164\050\174\001\002\000\014\022\ufff6\033\uffc6\036\uffc6" +
    "\043\uffc6\044\ufff6\001\002\000\010\033\uffc2\036\uffc2\043" +
    "\uffc2\001\002\000\014\022\ufff3\033\uffc5\036\uffc5\043\uffc5" +
    "\044\ufff3\001\002\000\036\004\100\006\121\007\115\010" +
    "\117\011\122\012\120\013\123\014\040\015\044\016\042" +
    "\017\043\020\045\021\116\046\041\001\002\000\014\022" +
    "\ufff1\033\uffc8\036\uffc8\043\uffc8\044\ufff1\001\002\000\010" +
    "\033\uffc9\036\uffc9\043\uffc9\001\002\000\006\022\032\044" +
    "\075\001\002\000\006\036\uffcb\043\uffcb\001\002\000\014" +
    "\022\ufff2\033\uffc3\036\uffc3\043\uffc3\044\ufff2\001\002\000" +
    "\004\033\076\001\002\000\004\004\100\001\002\000\010" +
    "\033\uffbf\036\uffbf\043\uffbf\001\002\000\022\024\106\033" +
    "\110\034\105\037\014\041\103\045\104\046\112\047\010" +
    "\001\002\000\024\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\033\uffb0\042\uffb0\001\002\000\024" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\033\uffb4\042\uffb4\001\002\000\022\024\106\033\110" +
    "\034\105\037\014\041\103\045\104\046\112\047\010\001" +
    "\002\000\024\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\033\uffb3\042\uffb3\001\002\000\024\023" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\033\uffaf\042\uffaf\001\002\000\022\024\106\033\110\034" +
    "\105\037\014\041\103\045\104\046\112\047\010\001\002" +
    "\000\022\023\145\024\146\025\142\026\151\027\144\030" +
    "\147\031\150\033\143\001\002\000\034\006\121\007\115" +
    "\010\117\011\122\012\120\013\123\014\040\015\044\016" +
    "\042\017\043\020\045\021\116\046\041\001\002\000\006" +
    "\022\032\044\113\001\002\000\030\022\ufff2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\033\uffb2" +
    "\042\uffb2\044\ufff2\001\002\000\004\033\076\001\002\000" +
    "\024\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\033\uffb1\042\uffb1\001\002\000\014\033\067\037" +
    "\063\046\074\047\060\050\065\001\002\000\012\033\033" +
    "\037\014\046\031\047\010\001\002\000\012\033\033\037" +
    "\014\046\031\047\010\001\002\000\012\033\033\037\014" +
    "\046\031\047\010\001\002\000\014\033\067\037\063\046" +
    "\074\047\060\050\065\001\002\000\012\033\033\037\014" +
    "\046\031\047\010\001\002\000\012\033\033\037\014\046" +
    "\031\047\010\001\002\000\006\022\032\033\125\001\002" +
    "\000\034\002\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\033\uffcf\036\uffcf\040\uffcf\042\uffcf" +
    "\043\uffcf\001\002\000\006\022\032\033\127\001\002\000" +
    "\034\002\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\033\uffd8\036\uffd8\040\uffd8\042\uffd8\043" +
    "\uffd8\001\002\000\004\033\131\001\002\000\034\002\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\033\uffdb\036\uffdb\040\uffdb\042\uffdb\043\uffdb\001\002" +
    "\000\006\022\032\033\133\001\002\000\034\002\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\033\uffd0\036\uffd0\040\uffd0\042\uffd0\043\uffd0\001\002\000" +
    "\006\022\032\033\135\001\002\000\034\002\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033" +
    "\uffd9\036\uffd9\040\uffd9\042\uffd9\043\uffd9\001\002\000\006" +
    "\022\032\033\137\001\002\000\034\002\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\033\uffce" +
    "\036\uffce\040\uffce\042\uffce\043\uffce\001\002\000\004\033" +
    "\141\001\002\000\034\002\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\033\uffda\036\uffda\040" +
    "\uffda\042\uffda\043\uffda\001\002\000\022\024\106\033\110" +
    "\034\105\037\014\041\103\045\104\046\112\047\010\001" +
    "\002\000\034\002\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\033\uffe0\036\uffe0\040\uffe0\042" +
    "\uffe0\043\uffe0\001\002\000\022\024\106\033\110\034\105" +
    "\037\014\041\103\045\104\046\112\047\010\001\002\000" +
    "\022\024\106\033\110\034\105\037\014\041\103\045\104" +
    "\046\112\047\010\001\002\000\022\024\106\033\110\034" +
    "\105\037\014\041\103\045\104\046\112\047\010\001\002" +
    "\000\022\024\106\033\110\034\105\037\014\041\103\045" +
    "\104\046\112\047\010\001\002\000\022\024\106\033\110" +
    "\034\105\037\014\041\103\045\104\046\112\047\010\001" +
    "\002\000\022\024\106\033\110\034\105\037\014\041\103" +
    "\045\104\046\112\047\010\001\002\000\024\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\030\147\031\150\033\uffba" +
    "\042\uffba\001\002\000\024\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\033\uffb8\042\uffb8\001\002" +
    "\000\024\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\033\uffb7\042\uffb7\001\002\000\024\023\uffbc" +
    "\024\uffbc\025\142\026\151\027\144\030\147\031\150\033" +
    "\uffbc\042\uffbc\001\002\000\024\023\uffbd\024\uffbd\025\142" +
    "\026\151\027\144\030\147\031\150\033\uffbd\042\uffbd\001" +
    "\002\000\024\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\147\031\150\033\uffb9\042\uffb9\001\002\000\024\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\147\031\150" +
    "\033\uffbb\042\uffbb\001\002\000\024\023\uffb6\024\uffb6\025" +
    "\142\026\151\027\144\030\147\031\150\033\uffb6\042\uffb6" +
    "\001\002\000\022\023\145\024\146\025\142\026\151\027" +
    "\144\030\147\031\150\042\163\001\002\000\024\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\033" +
    "\uffb5\042\uffb5\001\002\000\004\040\uffea\001\002\000\006" +
    "\040\uffe2\043\uffe2\001\002\000\006\040\uffe1\043\uffe1\001" +
    "\002\000\012\033\175\046\202\047\164\050\174\001\002" +
    "\000\004\040\213\001\002\000\004\040\uffef\001\002\000" +
    "\006\040\ufff0\043\207\001\002\000\006\040\uffe6\043\uffe6" +
    "\001\002\000\006\040\uffe8\043\uffe8\001\002\000\024\004" +
    "\100\006\121\007\115\010\117\011\122\012\120\013\123" +
    "\021\116\046\041\001\002\000\006\040\uffeb\043\205\001" +
    "\002\000\006\040\uffe4\043\uffe4\001\002\000\006\040\uffec" +
    "\043\203\001\002\000\006\040\uffe5\043\uffe5\001\002\000" +
    "\006\040\uffe3\043\uffe3\001\002\000\004\050\204\001\002" +
    "\000\006\040\uffe9\043\uffe9\001\002\000\006\033\175\046" +
    "\202\001\002\000\006\040\uffe7\043\uffe7\001\002\000\004" +
    "\037\210\001\002\000\012\033\175\046\202\047\164\050" +
    "\174\001\002\000\004\040\212\001\002\000\006\040\uffee" +
    "\043\uffee\001\002\000\014\022\ufff5\033\uffc0\036\uffc0\043" +
    "\uffc0\044\ufff5\001\002\000\004\040\215\001\002\000\006" +
    "\040\uffed\043\uffed\001\002\000\004\033\221\001\002\000" +
    "\014\033\067\037\063\046\074\047\060\050\065\001\002" +
    "\000\006\036\uffcc\043\uffcc\001\002\000\020\002\uffcd\022" +
    "\uffcd\033\uffcd\036\uffcd\040\uffcd\043\uffcd\044\uffcd\001\002" +
    "\000\006\022\032\033\223\001\002\000\016\002\uffd5\022" +
    "\uffd5\033\uffd5\036\uffd5\043\uffd5\044\uffd5\001\002\000\004" +
    "\046\225\001\002\000\004\032\226\001\002\000\012\033" +
    "\033\037\014\046\031\047\010\001\002\000\006\022\032" +
    "\033\230\001\002\000\004\002\ufff7\001\002\000\004\040" +
    "\232\001\002\000\016\002\ufff5\022\ufff5\033\ufff5\036\ufff5" +
    "\043\ufff5\044\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\006\002\004\032\003\001\001\000\036\003" +
    "\012\004\014\005\025\006\023\007\021\010\024\011\026" +
    "\012\015\013\006\015\022\016\027\024\011\025\017\027" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\005\200\006\023\007\021" +
    "\010\024\011\026\015\176\017\230\020\171\021\170\022" +
    "\177\023\175\024\165\026\172\027\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\036\015\034\016\033\025\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\036\015\034\016\221\025" +
    "\035\001\001\000\002\001\001\000\012\012\036\015\034" +
    "\016\053\025\035\001\001\000\012\012\036\015\034\016" +
    "\051\025\035\001\001\000\012\012\036\015\034\016\047" +
    "\025\035\001\001\000\012\012\036\015\034\016\045\025" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\070" +
    "\006\023\007\021\010\024\011\026\012\063\015\067\016" +
    "\071\024\061\025\065\027\060\030\072\031\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\200\006\023\007\021\010\024" +
    "\011\026\015\176\017\167\020\171\021\170\022\177\023" +
    "\175\024\165\026\172\027\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\023\007\021" +
    "\010\024\011\026\012\036\014\106\015\034\016\110\024" +
    "\101\025\035\027\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\023\007\021\010\024\011\026\012" +
    "\036\014\161\015\034\016\110\024\101\025\035\027\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\023\007\021\010\024\011\026\012\036\014\160\015\034" +
    "\016\110\024\101\025\035\027\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\113\001\001\000\002\001\001\000\032\005" +
    "\070\006\023\007\021\010\024\011\026\012\063\015\067" +
    "\016\071\024\061\025\065\027\060\030\137\001\001\000" +
    "\012\012\036\015\034\016\135\025\035\001\001\000\012" +
    "\012\036\015\034\016\133\025\035\001\001\000\012\012" +
    "\036\015\034\016\131\025\035\001\001\000\032\005\070" +
    "\006\023\007\021\010\024\011\026\012\063\015\067\016" +
    "\071\024\061\025\065\027\060\030\127\001\001\000\012" +
    "\012\036\015\034\016\125\025\035\001\001\000\012\012" +
    "\036\015\034\016\123\025\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\023\007\021\010\024\011\026\012\036\014" +
    "\157\015\034\016\110\024\101\025\035\027\100\001\001" +
    "\000\002\001\001\000\030\006\023\007\021\010\024\011" +
    "\026\012\036\014\156\015\034\016\110\024\101\025\035" +
    "\027\100\001\001\000\030\006\023\007\021\010\024\011" +
    "\026\012\036\014\155\015\034\016\110\024\101\025\035" +
    "\027\100\001\001\000\030\006\023\007\021\010\024\011" +
    "\026\012\036\014\154\015\034\016\110\024\101\025\035" +
    "\027\100\001\001\000\030\006\023\007\021\010\024\011" +
    "\026\012\036\014\153\015\034\016\110\024\101\025\035" +
    "\027\100\001\001\000\030\006\023\007\021\010\024\011" +
    "\026\012\036\014\152\015\034\016\110\024\101\025\035" +
    "\027\100\001\001\000\030\006\023\007\021\010\024\011" +
    "\026\012\036\014\151\015\034\016\110\024\101\025\035" +
    "\027\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\200\006\023\007\021\010" +
    "\024\011\026\015\176\021\213\022\177\023\175\024\165" +
    "\026\172\027\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\200\006\023\007" +
    "\021\010\024\011\026\015\176\024\165\026\205\027\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\200\006\023\007\021\010\024\011\026\015\176\021\210" +
    "\022\177\023\175\024\165\026\172\027\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\070\006\023\007\021\010\024\011\026\012\063\015\067" +
    "\016\071\024\061\025\065\027\060\030\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\036\015\034\016\226\025\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoHaskellTerminal$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoHaskellTerminal$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoHaskellTerminal$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz = new Nodo(); 
    public void syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", s.value.toString() + " no debe de ir en esa posicion", s.right, s.left);
    }

    public void unrecovered_syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", "No se pudo recuperar de: " + s.value.toString(), s.right, s.left);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoHaskellTerminal$actions {




  private final SintacticoHaskellTerminal parser;

  /** Constructor */
  CUP$SintacticoHaskellTerminal$actions(SintacticoHaskellTerminal parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoHaskellTerminal$do_action_part00000000(
    int                        CUP$SintacticoHaskellTerminal$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHaskellTerminal$parser,
    java.util.Stack            CUP$SintacticoHaskellTerminal$stack,
    int                        CUP$SintacticoHaskellTerminal$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoHaskellTerminal$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoHaskellTerminal$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoHaskellTerminal$parser.done_parsing();
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
System.out.println("inicio");
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("NT$0",24, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 CUERPO 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 raiz = CUERPO; System.out.println("FINALIZO"); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= LIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= CALCULAR 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= OPSIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= CONCATLISTAS 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= OPLIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= LLAMADO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= porcentaje 
            {
              Nodo RESULT =null;
		 RESULT = NodoGeneral.crearHoja(Const.porcentaje, Const.porcentaje); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LIST ::= dolar let iden igual LISTA dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)).value;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearLista(id, LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LIST",1, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA ::= CONCATLISTAS 
            {
              Nodo RESULT =null;
		int CONCATleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int CONCATright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo CONCAT = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = CONCAT; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LISTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA ::= acorchete L ccorchete 
            {
              Nodo RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = L; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LISTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA ::= cadena 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.cadena, t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LISTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA ::= OPLISTA 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LISTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LISTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LISTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // L ::= LCORCHETES 
            {
              Nodo RESULT =null;
		int LCORCHETESleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int LCORCHETESright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo LCORCHETES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = LCORCHETES; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("L",13, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // L ::= LVAL 
            {
              Nodo RESULT =null;
		int LVALleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int LVALright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo LVAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = LVAL; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("L",13, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LCORCHETES ::= LCORCHETES coma acorchete LVAL ccorchete 
            {
              Nodo RESULT =null;
		int LCORCHETESleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)).left;
		int LCORCHETESright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)).right;
		Nodo LCORCHETES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)).value;
		int LVALleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LVALright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LVAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		
                        LCORCHETES.hijos.add(LVAL);
                        RESULT = (Nodo) LCORCHETES;
                    
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LCORCHETES",14, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LCORCHETES ::= acorchete LVAL ccorchete 
            {
              Nodo RESULT =null;
		int LVALleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LVALright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LVAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearLcorchetes(LVAL); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LCORCHETES",14, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LVAL ::= LCAR 
            {
              Nodo RESULT =null;
		int LCARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int LCARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo LCAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = LCAR; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LVAL",15, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LVAL ::= LEXP 
            {
              Nodo RESULT =null;
		int LEXPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int LEXPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo LEXP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = LEXP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LVAL",15, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LVAL ::= cadena 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.cadena, t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LVAL",15, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LCAR ::= LCAR coma caracter 
            {
              Nodo RESULT =null;
		int LCARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int LCARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo LCAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		
                        LCAR.hijos.add(NodoGeneral.crearHoja(Const.caracter, t1));
                        RESULT = (Nodo) LCAR;
                    
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LCAR",16, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LCAR ::= caracter 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearLista(NodoGeneral.crearHoja(Const.caracter, t1)); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LCAR",16, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LEXP ::= LEXP coma EXP 
            {
              Nodo RESULT =null;
		int LEXPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int LEXPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo LEXP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		
                        LEXP.hijos.add(t1);
                        RESULT = (Nodo) LEXP;
                    
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LEXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LEXP ::= EXP 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearLista(t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LEXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP ::= CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP ::= OPSIST 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CALCULAR ::= dolar calcular E dolar 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CALCULAR",3, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPSIST ::= SUCC 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPSIST",18, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPSIST ::= DECC 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPSIST",18, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPSIST ::= MIN 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPSIST",18, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPSIST ::= MAX 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPSIST",18, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SUCC ::= dolar succ VALOR dolar 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearSucc(VALOR); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("SUCC",4, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECC ::= dolar decc VALOR dolar 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearDecc(VALOR); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("DECC",5, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MIN ::= dolar min LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearMin(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("MIN",6, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MAX ::= dolar max LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearMax(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("MAX",7, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPLIST ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLIST",9, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPLIST ::= OPLISTA 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLIST",9, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPLISTA ::= dolar revers LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearRevers(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLISTA",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPLISTA ::= dolar impr LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearImpr(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLISTA",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPLISTA ::= dolar par LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearPar(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLISTA",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPLISTA ::= dolar asc LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearAsc(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLISTA",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPLISTA ::= dolar desc LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearDesc(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPLISTA",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPEXP ::= dolar sum LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearSum(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPEXP",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPEXP ::= dolar product LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearProduct(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPEXP",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPEXP ::= dolar length LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = NodoGeneral.crearLength(LISTA); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("OPEXP",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LLAMADO ::= dolar iden allave LVALOR cllave dolar 
            {
              Nodo RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-4)).value;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		 RESULT = NodoGeneral.crearLlamado(iden, LVALOR); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LLAMADO",11, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LVALOR ::= LVALOR coma VALOR 
            {
              Nodo RESULT =null;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		
                        LVALOR.hijos.add(VALOR);
                        RESULT = (Nodo) LVALOR;
                    
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LVALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LVALOR ::= VALOR 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearLvalor(VALOR); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LVALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LVALOR ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.lvalor); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("LVALOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALOR ::= CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALOR ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALOR ::= OPSIST 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALOR ::= CONCATLISTAS 
            {
              Nodo RESULT =null;
		int CONCATleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int CONCATright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo CONCAT = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = CONCAT; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALOR ::= OPLISTA 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALOR ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALOR ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALOR ::= caracter 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.caracter, t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALOR ::= cadena 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.cadena, t1); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALOR ::= acorchete L ccorchete 
            {
              Nodo RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = L; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALOR ::= LISTA poslista CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int CALCULARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int CALCULARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo CALCULAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearPosLista(t1, CALCULAR); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("VALOR",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONCATLISTAS ::= LISTA masmas LISTA 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.masmas, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("CONCATLISTAS",8, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E mas E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mas, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E menos E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.menos, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E por E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.por, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E dividido E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.dividido, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E mod E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mod, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E pot E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.pot, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E sqrt E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.sqrt, t1, t2); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= menos E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.menos, t1, null); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= aparentesis E cparentesis 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= OPSIST 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= numero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.numero, t1, Const.tdecimal); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1, Const.tals); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= LISTA poslista CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)).value;
		int CALCULARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int CALCULARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo CALCULAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = NodoGeneral.crearPosLista(t1, CALCULAR); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.elementAt(CUP$SintacticoHaskellTerminal$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= OPEXP 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskellTerminal$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= porcentaje 
            {
              Nodo RESULT =null;
		 RESULT = NodoGeneral.crearHoja(Const.porcentaje, Const.porcentaje); 
              CUP$SintacticoHaskellTerminal$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskellTerminal$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskellTerminal$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoHaskellTerminal$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoHaskellTerminal$do_action(
    int                        CUP$SintacticoHaskellTerminal$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHaskellTerminal$parser,
    java.util.Stack            CUP$SintacticoHaskellTerminal$stack,
    int                        CUP$SintacticoHaskellTerminal$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoHaskellTerminal$do_action_part00000000(
                               CUP$SintacticoHaskellTerminal$act_num,
                               CUP$SintacticoHaskellTerminal$parser,
                               CUP$SintacticoHaskellTerminal$stack,
                               CUP$SintacticoHaskellTerminal$top);
    }
}

}
