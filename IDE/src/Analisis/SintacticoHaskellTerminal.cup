//-------------------codigo de usuario-----------------
package Analisis;
import java_cup.runtime.Symbol;
import Reportes.*;
import fabrica.*;
parser code
{:
    public Nodo raiz = new Nodo(); 
    public void syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", s.value.toString(), s.right, s.left);
    }

    public void unrecovered_syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", "No se pudo recuperar de: " + s.value.toString(), s.right, s.left);
    }
:}

//-------------------codigo para acciones gramaticales
action code
{:

:}
//-------------------declaraciones---------------------
terminal calcular,let,succ,decc,min,max,sum,product,revers,impr,par,asc,desc,length,_if,_then,_else,_end,_case,masmas;
terminal mas,menos,por,dividido,mod,sqrt,pot,or,and,menorigual,mayorigual,menor,mayor,diferente,igualigual;
terminal igual,dolar,porcentaje,allave,cllave,acorchete,ccorchete,aparentesis,cparentesis,coma;
terminal String numero, iden;

non terminal Nodo INICIO, CALCULAR, E;

//precedencia menor a mayor
precedence left mas, menos;
precedence left por, dividido, mod;
precedence left pot, sqrt;
precedence left menor, mayor, menorigual, mayorigual, diferente, igualigual;
precedence left and, or;
start with INICIO;
//-------------------reglas sintacticas----------------

INICIO          ::= {:System.out.println("inicio");:}CALCULAR:t1 {: raiz = t1; System.out.println("FINALIZO"); :};

CALCULAR        ::= dolar calcular E:t1 dolar {: RESULT = t1; System.out.println("Calcular");:};

E               ::= E:t1 and E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | E:t1 or E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :} 
                | E:t1 menor E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | E:t1 mayor E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | E:t1 menorigual E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | E:t1 mayorigual E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | E:t1 diferente E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | E:t1 igualigual E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | E:t1 mas E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | E:t1 menos E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | E:t1 por E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | E:t1 dividido E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | E:t1 mod E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | E:t1 pot E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | E:t1 sqrt E:t2 {: RESULT = new Nodo(1, 1, t1, t2); :}
                | aparentesis E:t1 cparentesis {: RESULT = t1; :}
                | numero:t1 {: RESULT = new Nodo("numero", t1, 1, 1); :}
                | iden:t1 {: RESULT = new Nodo("id", t1, 1, 1); :};















