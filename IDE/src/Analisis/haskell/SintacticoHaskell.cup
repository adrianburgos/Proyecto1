//-------------------codigo de usuario-----------------
package Analisis.haskell;
import java_cup.runtime.Symbol;
import Reportes.*;
import fabrica.*;
import ide.Const;
parser code
{:
    public Nodo raiz = new Nodo(); 
    public void syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", s.value.toString() + " no debe de ir en esa posicion", s.right, s.left);
    }

    public void unrecovered_syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", "No se pudo recuperar de: " + s.value.toString(), s.right, s.left);
    }
:}

//-------------------codigo para acciones gramaticales
action code
{:

:}
//-------------------declaraciones---------------------
terminal calcular,let,succ,decc,min,max,sum,product,revers,impr,par,asc,desc,length,_if,_then,_else,_end,_case,masmas;
terminal mas,menos,por,dividido,mod,sqrt,pot,or,and,menorigual,mayorigual,menor,mayor,diferente,igualigual;
terminal igual,dolar,allave,cllave,acorchete,ccorchete,aparentesis,cparentesis,coma, poslista, dospuntos, puntoycoma;
terminal String numero, iden, cadena, caracter, enter;

non terminal Nodo INICIO, LIST, CUERPO, CALCULAR, SUCC, DECC, MIN, MAX, CONCATLISTAS, OPLIST, E, LLAMADO;
non terminal Nodo IF, CASE;
non terminal Nodo LISTA, L, LCORCHETES, LVAL, LCAR, LCALC, PARLIST, LEXP;
non terminal Nodo LFUNCION, DECFUN, LCUERPO, LPAR, COND, LCASOS, CASO;
non terminal String OPLISTA, OPEXP, OPREL, TIPOVALOR, VALCASO;

//precedencia menor a mayor
precedence left or;
precedence left and;
precedence left menor, mayor, menorigual, mayorigual, diferente, igualigual;
precedence left mas, menos;
precedence left por, dividido, mod;
precedence left pot, sqrt;

precedence left masmas, poslista;
start with INICIO;
//-------------------reglas sintacticas----------------

INICIO          ::= {:System.out.println("inicio");:} LFUNCION {: raiz = new Nodo(); System.out.println("FINALIZO"); :};

LFUNCION        ::= LFUNCION DECFUN
                |   DECFUN;

DECFUN          ::= iden LPAR igual LCUERPO _end
                |   enter;
LPAR            ::= LPAR coma iden
                |   iden
                |   {: RESULT = null; :};
LCUERPO         ::= LCUERPO CUERPO
                |   CUERPO;

CUERPO          ::= LIST:t {: RESULT = t; :}
                |   CALCULAR:t {: RESULT = t; :}
                |   SUCC:t {: RESULT = t; :}
                |   DECC:t {: RESULT = t; :}
                |   MIN:t {: RESULT = t; :}
                |   MAX:t {: RESULT = t; :}
                |   CONCATLISTAS:t {: RESULT = t; :}
                |   OPLIST:t {: RESULT = t; :}
                |   IF:t {: RESULT = t; :}
                |   CASE:t {: RESULT = t; :}
                |   LLAMADO:t {: RESULT = t; :}
                |   enter;

LIST            ::= let iden igual PARLIST;
LISTA           ::= CONCATLISTAS
                |   acorchete L ccorchete
                |   cadena;
L               ::= LCORCHETES
                |   LVAL;
LCORCHETES      ::= LCORCHETES coma acorchete LVAL ccorchete
                |   acorchete LVAL ccorchete;
LVAL            ::= LCAR
                |   LCALC;
LCAR            ::= LCAR coma caracter
                |   caracter;
LCALC           ::= LCALC coma TIPOVALOR
                |   TIPOVALOR;

CALCULAR        ::= dolar calcular E:t1 dolar {: RESULT = NodoGeneral.crearCalcular(t1); System.out.println("Calcular");:};

SUCC            ::= dolar succ TIPOVALOR dolar;

DECC            ::= dolar decc TIPOVALOR dolar;

MIN             ::= dolar min PARLIST dolar;

MAX             ::= dolar max PARLIST dolar;

PARLIST         ::= LISTA
                |   LLAMADO
                |   iden
                |   OPLISTA;

OPLIST          ::= OPEXP
                |   OPLISTA;
OPLISTA         ::= dolar revers PARLIST dolar
                |   dolar impr PARLIST dolar
                |   dolar par PARLIST dolar
                |   dolar asc PARLIST dolar
                |   dolar desc PARLIST dolar;
OPEXP           ::= dolar sum PARLIST dolar
                |   dolar product PARLIST dolar
                |   dolar length PARLIST dolar;

IF              ::= _if COND _then LCUERPO _else LCUERPO _end;

CASE            ::= _case PARLIST enter LCASOS _end;
LCASOS          ::= LCASOS CASO enter
                |   CASO enter;
CASO            ::= VALCASO dospuntos LCUERPO puntoycoma {:System.out.println("TERMINO CASO");:};
VALCASO         ::= CALCULAR
                |   caracter;

LLAMADO         ::= dolar iden allave LEXP cllave dolar;
LEXP            ::= LEXP coma TIPOVALOR
                |   TIPOVALOR
                |   ;
TIPOVALOR       ::= CALCULAR
                |   LLAMADO
                |   iden;

CONCATLISTAS    ::= PARLIST masmas PARLIST; 

COND            ::= COND or COND
                |   COND and COND
                |   E OPREL E;
OPREL           ::= menor {: RESULT = Const.menor; :}
                |   mayor {: RESULT = Const.mayor; :}
                |   menorigual {: RESULT = Const.menorigual; :}
                |   mayorigual {: RESULT = Const.mayorigual; :}
                |   igualigual {: RESULT = Const.igualigual; :}
                |   diferente {: RESULT = Const.diferente; :};
E               ::= E:t1 mas E:t2 {: RESULT = NodoOperacion.crearNodo(Const.mas, t1, t2); :}
                |   E:t1 menos E:t2 {: RESULT = NodoOperacion.crearNodo(Const.menos, t1, t2); :}
                |   E:t1 por E:t2 {: RESULT = NodoOperacion.crearNodo(Const.por, t1, t2); :}
                |   E:t1 dividido E:t2 {: RESULT = NodoOperacion.crearNodo(Const.dividido, t1, t2); :}
                |   E:t1 mod E:t2 {: RESULT = NodoOperacion.crearNodo(Const.mod, t1, t2); :}
                |   E:t1 pot E:t2 {: RESULT = NodoOperacion.crearNodo(Const.pot, t1, t2); :}
                |   E:t1 sqrt E:t2 {: RESULT = NodoOperacion.crearNodo(Const.sqrt, t1, t2); :}
                |   menos E:t1 {: RESULT = NodoOperacion.crearNodo(Const.unario, t1, null); :}
                |   aparentesis E:t1 cparentesis {: RESULT = t1; :}
                |   numero:t1 {: RESULT = new Nodo(Const.numero, t1); :}
                |   iden:t1 {: RESULT = new Nodo(Const.id, t1); :}
                |   LLAMADO
                |   PARLIST poslista
                |   OPEXP;
