
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.haskell;

import java_cup.runtime.Symbol;
import Reportes.*;
import fabrica.*;
import ide.Const;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoHaskell extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symsH.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoHaskell() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoHaskell(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoHaskell(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\044\002\000\002\002" +
    "\004\000\002\030\004\000\002\030\003\000\002\031\007" +
    "\000\002\031\003\000\002\033\005\000\002\033\003\000" +
    "\002\033\002\000\002\032\004\000\002\032\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\003\006\000\002\020\003\000\002\020\005\000\002\020" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\007" +
    "\000\002\022\005\000\002\023\003\000\002\023\003\000" +
    "\002\024\005\000\002\024\003\000\002\025\005\000\002" +
    "\025\003\000\002\005\006\000\002\006\006\000\002\007" +
    "\006\000\002\010\006\000\002\011\006\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\013\003\000\002\013\003\000\002\037\006\000\002" +
    "\037\006\000\002\037\006\000\002\037\006\000\002\037" +
    "\006\000\002\040\006\000\002\040\006\000\002\040\006" +
    "\000\002\016\011\000\002\017\007\000\002\035\005\000" +
    "\002\035\004\000\002\036\006\000\002\043\003\000\002" +
    "\043\003\000\002\015\010\000\002\027\005\000\002\027" +
    "\003\000\002\027\002\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\012\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\004\000\002" +
    "\014\005\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\004\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\006\064\000\067\000\001\002\000\006\064" +
    "\010\067\012\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\010\002\ufffd\064\ufffd\067\ufffd\001" +
    "\002\000\010\047\ufff8\057\ufff8\064\014\001\002\000\010" +
    "\002\uffff\064\010\067\012\001\002\000\010\002\ufffb\064" +
    "\ufffb\067\ufffb\001\002\000\010\002\ufffe\064\ufffe\067\ufffe" +
    "\001\002\000\006\047\ufff9\057\ufff9\001\002\000\006\047" +
    "\016\057\017\001\002\000\024\003\042\005\037\022\025" +
    "\026\021\050\036\053\027\064\052\065\023\067\046\001" +
    "\002\000\004\064\020\001\002\000\006\047\ufffa\057\ufffa" +
    "\001\002\000\012\050\056\053\027\064\052\065\023\001" +
    "\002\000\032\003\uffee\005\uffee\022\uffee\024\uffee\025\uffee" +
    "\026\uffee\050\uffee\053\uffee\062\uffee\064\uffee\065\uffee\067" +
    "\uffee\001\002\000\036\003\uffe5\005\uffe5\022\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\050\uffe5\053\uffe5\060\uffe5\062" +
    "\uffe5\064\uffe5\065\uffe5\067\uffe5\001\002\000\032\003\uffd1" +
    "\005\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1\050\uffd1\053" +
    "\uffd1\062\uffd1\064\uffd1\065\uffd1\067\uffd1\001\002\000\020" +
    "\031\122\050\117\053\027\055\125\063\124\064\121\065" +
    "\023\001\002\000\032\003\ufff5\005\ufff5\022\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\050\ufff5\053\ufff5\062\ufff5\064\ufff5\065" +
    "\ufff5\067\ufff5\001\002\000\012\050\105\053\212\064\106" +
    "\066\205\001\002\000\032\003\ufff6\005\ufff6\022\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\050\ufff6\053\ufff6\062\ufff6\064\ufff6" +
    "\065\ufff6\067\ufff6\001\002\000\034\003\uffef\005\uffef\022" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffe7\050\uffef\053\uffef" +
    "\062\uffef\064\uffef\065\uffef\067\uffef\001\002\000\026\003" +
    "\042\005\037\022\025\025\203\026\021\050\036\053\027" +
    "\064\052\065\023\067\046\001\002\000\032\003\uffed\005" +
    "\uffed\022\uffed\024\uffed\025\uffed\026\uffed\050\uffed\053\uffed" +
    "\062\uffed\064\uffed\065\uffed\067\uffed\001\002\000\004\027" +
    "\063\001\002\000\034\003\uffd0\005\uffd0\022\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd2\050\uffd0\053\uffd0\062\uffd0\064" +
    "\uffd0\065\uffd0\067\uffd0\001\002\000\036\004\116\006\170" +
    "\007\166\010\167\011\171\012\154\013\155\014\065\015" +
    "\071\016\067\017\070\020\072\021\153\064\066\001\002" +
    "\000\004\064\054\001\002\000\032\003\ufff2\005\ufff2\022" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\050\ufff2\053\ufff2\062\ufff2" +
    "\064\ufff2\065\ufff2\067\ufff2\001\002\000\032\003\uffec\005" +
    "\uffec\022\uffec\024\uffec\025\uffec\026\uffec\050\uffec\053\uffec" +
    "\062\uffec\064\uffec\065\uffec\067\uffec\001\002\000\004\067" +
    "\053\001\002\000\034\003\uffeb\005\uffeb\022\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffd4\050\uffeb\053\uffeb\062\uffeb\064" +
    "\uffeb\065\uffeb\067\uffeb\001\002\000\032\003\ufff3\005\ufff3" +
    "\022\ufff3\024\ufff3\025\ufff3\026\ufff3\050\ufff3\053\ufff3\062" +
    "\ufff3\064\ufff3\065\ufff3\067\ufff3\001\002\000\032\003\ufff1" +
    "\005\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\050\ufff1\053" +
    "\ufff1\062\ufff1\064\ufff1\065\ufff1\067\ufff1\001\002\000\032" +
    "\003\uffea\005\uffea\022\uffea\024\uffea\025\uffea\026\uffea\050" +
    "\uffea\053\uffea\062\uffea\064\uffea\065\uffea\067\uffea\001\002" +
    "\000\032\003\ufff4\005\ufff4\022\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\050\ufff4\053\ufff4\062\ufff4\064\ufff4\065\ufff4\067\ufff4" +
    "\001\002\000\032\003\ufff0\005\ufff0\022\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\050\ufff0\053\ufff0\062\ufff0\064\ufff0\065\ufff0" +
    "\067\ufff0\001\002\000\036\003\uffd5\005\uffd5\022\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\050\uffd5\053\uffd5\060\uffd5" +
    "\062\uffd5\064\uffd5\065\uffd5\067\uffd5\001\002\000\036\003" +
    "\uffd3\005\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\050\uffd3\053\uffd3\060\uffd3\062\uffd3\064\uffd3\065\uffd3\067" +
    "\uffd3\001\002\000\032\003\uffe9\005\uffe9\022\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\050\uffe9\053\uffe9\062\uffe9\064\uffe9\065" +
    "\uffe9\067\uffe9\001\002\000\004\047\055\001\002\000\012" +
    "\050\056\053\027\064\052\065\023\001\002\000\016\014" +
    "\065\015\071\016\067\017\070\020\072\064\066\001\002" +
    "\000\034\003\uffe8\005\uffe8\022\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\063\050\uffe8\053\uffe8\062\uffe8\064\uffe8\065\uffe8" +
    "\067\uffe8\001\002\000\036\003\uffd2\005\uffd2\022\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\050\uffd2\053\uffd2\060\uffd2" +
    "\062\uffd2\064\uffd2\065\uffd2\067\uffd2\001\002\000\036\003" +
    "\uffe7\005\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\050\uffe7\053\uffe7\060\uffe7\062\uffe7\064\uffe7\065\uffe7\067" +
    "\uffe7\001\002\000\036\003\uffd4\005\uffd4\022\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\050\uffd4\053\uffd4\060\uffd4\062" +
    "\uffd4\064\uffd4\065\uffd4\067\uffd4\001\002\000\012\050\056" +
    "\053\027\064\052\065\023\001\002\000\036\003\uffb9\005" +
    "\uffb9\022\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\050\uffb9" +
    "\053\uffb9\060\uffb9\062\uffb9\064\uffb9\065\uffb9\067\uffb9\001" +
    "\002\000\012\050\056\053\027\064\052\065\023\001\002" +
    "\000\004\051\103\001\002\000\012\050\056\053\027\064" +
    "\052\065\023\001\002\000\012\050\056\053\027\064\052" +
    "\065\023\001\002\000\012\050\056\053\027\064\052\065" +
    "\023\001\002\000\012\050\056\053\027\064\052\065\023" +
    "\001\002\000\006\027\063\050\074\001\002\000\036\003" +
    "\uffcb\005\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\050\uffcb\053\uffcb\060\uffcb\062\uffcb\064\uffcb\065\uffcb\067" +
    "\uffcb\001\002\000\006\027\063\050\076\001\002\000\036" +
    "\003\uffce\005\uffce\022\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\050\uffce\053\uffce\060\uffce\062\uffce\064\uffce\065\uffce" +
    "\067\uffce\001\002\000\006\027\063\050\100\001\002\000" +
    "\036\003\uffcc\005\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\050\uffcc\053\uffcc\060\uffcc\062\uffcc\064\uffcc\065" +
    "\uffcc\067\uffcc\001\002\000\006\027\063\050\102\001\002" +
    "\000\036\003\uffcd\005\uffcd\022\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\050\uffcd\053\uffcd\060\uffcd\062\uffcd\064\uffcd" +
    "\065\uffcd\067\uffcd\001\002\000\012\050\105\052\uffbd\057" +
    "\uffbd\064\106\001\002\000\006\052\uffbe\057\uffbe\001\002" +
    "\000\006\004\116\064\066\001\002\000\012\050\uffba\052" +
    "\uffba\054\uffba\057\uffba\001\002\000\012\050\uffbc\052\uffbc" +
    "\054\uffbc\057\uffbc\001\002\000\012\050\uffbb\052\uffbb\054" +
    "\uffbb\057\uffbb\001\002\000\006\052\112\057\113\001\002" +
    "\000\004\050\115\001\002\000\006\050\105\064\106\001" +
    "\002\000\006\052\uffbf\057\uffbf\001\002\000\106\003\uffc0" +
    "\005\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\050\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\062\uffc0\064\uffc0\065\uffc0\067" +
    "\uffc0\001\002\000\020\031\122\050\117\053\027\055\125" +
    "\063\124\064\121\065\023\001\002\000\024\012\154\013" +
    "\155\014\065\015\071\016\067\017\070\020\072\021\153" +
    "\064\066\001\002\000\046\023\uffa2\030\uffa2\031\uffa2\032" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\050" +
    "\uffa2\056\uffa2\001\002\000\052\023\uffa5\027\uffd3\030\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\050\uffa5\056\uffa5\060\uffd3\001\002\000\020\031" +
    "\122\050\117\053\027\055\125\063\124\064\121\065\023" +
    "\001\002\000\006\027\063\060\151\001\002\000\046\023" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\050\uffa6\056\uffa6\001\002\000\020" +
    "\031\122\050\117\053\027\055\125\063\124\064\121\065" +
    "\023\001\002\000\052\023\uffa4\027\uffd4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\050\uffa4\056\uffa4\060\uffd4\001\002\000\022\030\133\031" +
    "\134\032\130\033\137\034\132\035\135\036\136\050\131" +
    "\001\002\000\020\031\122\050\117\053\027\055\125\063" +
    "\124\064\121\065\023\001\002\000\040\003\uffda\005\uffda" +
    "\022\uffda\024\uffda\025\uffda\026\uffda\050\uffda\052\uffda\053" +
    "\uffda\054\uffda\057\uffda\062\uffda\064\uffda\065\uffda\067\uffda" +
    "\001\002\000\020\031\122\050\117\053\027\055\125\063" +
    "\124\064\121\065\023\001\002\000\020\031\122\050\117" +
    "\053\027\055\125\063\124\064\121\065\023\001\002\000" +
    "\020\031\122\050\117\053\027\055\125\063\124\064\121" +
    "\065\023\001\002\000\020\031\122\050\117\053\027\055" +
    "\125\063\124\064\121\065\023\001\002\000\020\031\122" +
    "\050\117\053\027\055\125\063\124\064\121\065\023\001" +
    "\002\000\020\031\122\050\117\053\027\055\125\063\124" +
    "\064\121\065\023\001\002\000\046\023\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\034\uffac\035\135\036\136\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\050\uffac\056\uffac\001\002\000\046\023\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa" +
    "\046\uffaa\050\uffaa\056\uffaa\001\002\000\046\023\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\050\uffa9\056\uffa9\001\002\000\046\023\uffae" +
    "\030\uffae\031\uffae\032\130\033\137\034\132\035\135\036" +
    "\136\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\050\uffae\056\uffae\001\002\000\046\023" +
    "\uffaf\030\uffaf\031\uffaf\032\130\033\137\034\132\035\135" +
    "\036\136\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\050\uffaf\056\uffaf\001\002\000\046" +
    "\023\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\135\036\136\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\050\uffab\056\uffab\001\002\000" +
    "\046\023\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\135\036\136\037\uffad\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\050\uffad\056\uffad\001\002" +
    "\000\022\030\133\031\134\032\130\033\137\034\132\035" +
    "\135\036\136\056\150\001\002\000\046\023\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\050\uffa7\056\uffa7\001\002\000\046\023\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\050\uffa3\056\uffa3\001\002\000\046\023\uffa8" +
    "\030\uffa8\031\uffa8\032\130\033\137\034\132\035\135\036" +
    "\136\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\050\uffa8\056\uffa8\001\002\000\012\050" +
    "\056\053\027\064\052\065\023\001\002\000\012\050\056" +
    "\053\027\064\052\065\023\001\002\000\012\050\056\053" +
    "\027\064\052\065\023\001\002\000\006\027\063\050\157" +
    "\001\002\000\074\003\uffc9\005\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\050\uffc9\053\uffc9" +
    "\056\uffc9\062\uffc9\064\uffc9\065\uffc9\067\uffc9\001\002\000" +
    "\006\027\063\050\161\001\002\000\074\003\uffca\005\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\050\uffca\053\uffca\056\uffca\062\uffca\064\uffca\065\uffca" +
    "\067\uffca\001\002\000\006\027\063\050\163\001\002\000" +
    "\074\003\uffc8\005\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\050\uffc8\053\uffc8\056\uffc8\062" +
    "\uffc8\064\uffc8\065\uffc8\067\uffc8\001\002\000\006\027\063" +
    "\050\165\001\002\000\036\003\uffcf\005\uffcf\022\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\050\uffcf\053\uffcf\060\uffcf" +
    "\062\uffcf\064\uffcf\065\uffcf\067\uffcf\001\002\000\006\050" +
    "\105\064\106\001\002\000\012\050\056\053\027\064\052" +
    "\065\023\001\002\000\006\050\105\064\106\001\002\000" +
    "\012\050\056\053\027\064\052\065\023\001\002\000\006" +
    "\027\063\050\173\001\002\000\032\003\uffd6\005\uffd6\022" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\050\uffd6\053\uffd6\062\uffd6" +
    "\064\uffd6\065\uffd6\067\uffd6\001\002\000\004\050\175\001" +
    "\002\000\032\003\uffd9\005\uffd9\022\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\050\uffd9\053\uffd9\062\uffd9\064\uffd9\065\uffd9\067" +
    "\uffd9\001\002\000\006\027\063\050\177\001\002\000\032" +
    "\003\uffd7\005\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7\050" +
    "\uffd7\053\uffd7\062\uffd7\064\uffd7\065\uffd7\067\uffd7\001\002" +
    "\000\004\050\201\001\002\000\032\003\uffd8\005\uffd8\022" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\050\uffd8\053\uffd8\062\uffd8" +
    "\064\uffd8\065\uffd8\067\uffd8\001\002\000\032\003\ufff7\005" +
    "\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7\050\ufff7\053\ufff7" +
    "\062\ufff7\064\ufff7\065\ufff7\067\ufff7\001\002\000\010\002" +
    "\ufffc\064\ufffc\067\ufffc\001\002\000\006\054\uffe4\057\223" +
    "\001\002\000\006\054\uffdd\057\uffdd\001\002\000\006\054" +
    "\uffe0\057\221\001\002\000\006\054\uffdf\057\217\001\002" +
    "\000\004\054\216\001\002\000\006\054\uffdb\057\uffdb\001" +
    "\002\000\010\050\105\064\106\066\205\001\002\000\004" +
    "\054\uffe3\001\002\000\004\054\215\001\002\000\006\054" +
    "\uffe1\057\uffe1\001\002\000\036\003\uffe6\005\uffe6\022\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\050\uffe6\053\uffe6\060" +
    "\uffe6\062\uffe6\064\uffe6\065\uffe6\067\uffe6\001\002\000\006" +
    "\050\105\064\106\001\002\000\006\054\uffdc\057\uffdc\001" +
    "\002\000\004\066\222\001\002\000\006\054\uffde\057\uffde" +
    "\001\002\000\004\053\224\001\002\000\010\050\105\064" +
    "\106\066\205\001\002\000\004\054\226\001\002\000\006" +
    "\054\uffe2\057\uffe2\001\002\000\010\023\242\037\243\040" +
    "\241\001\002\000\034\030\133\031\134\032\130\033\137" +
    "\034\132\035\135\036\136\041\236\042\231\043\232\044" +
    "\237\045\234\046\233\001\002\000\020\031\uffb2\050\uffb2" +
    "\053\uffb2\055\uffb2\063\uffb2\064\uffb2\065\uffb2\001\002\000" +
    "\020\031\uffb5\050\uffb5\053\uffb5\055\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\001\002\000\020\031\uffb1\050\uffb1\053\uffb1\055" +
    "\uffb1\063\uffb1\064\uffb1\065\uffb1\001\002\000\020\031\uffb0" +
    "\050\uffb0\053\uffb0\055\uffb0\063\uffb0\064\uffb0\065\uffb0\001" +
    "\002\000\020\031\122\050\117\053\027\055\125\063\124" +
    "\064\121\065\023\001\002\000\020\031\uffb3\050\uffb3\053" +
    "\uffb3\055\uffb3\063\uffb3\064\uffb3\065\uffb3\001\002\000\020" +
    "\031\uffb4\050\uffb4\053\uffb4\055\uffb4\063\uffb4\064\uffb4\065" +
    "\uffb4\001\002\000\026\023\uffb6\030\133\031\134\032\130" +
    "\033\137\034\132\035\135\036\136\037\uffb6\040\uffb6\001" +
    "\002\000\020\031\122\050\117\053\027\055\125\063\124" +
    "\064\121\065\023\001\002\000\024\003\042\005\037\022" +
    "\025\026\021\050\036\053\027\064\052\065\023\067\046" +
    "\001\002\000\020\031\122\050\117\053\027\055\125\063" +
    "\124\064\121\065\023\001\002\000\010\023\uffb8\037\uffb8" +
    "\040\241\001\002\000\026\003\042\005\037\022\025\024" +
    "\246\026\021\050\036\053\027\064\052\065\023\067\046" +
    "\001\002\000\024\003\042\005\037\022\025\026\021\050" +
    "\036\053\027\064\052\065\023\067\046\001\002\000\026" +
    "\003\042\005\037\022\025\025\250\026\021\050\036\053" +
    "\027\064\052\065\023\067\046\001\002\000\032\003\uffc7" +
    "\005\uffc7\022\uffc7\024\uffc7\025\uffc7\026\uffc7\050\uffc7\053" +
    "\uffc7\062\uffc7\064\uffc7\065\uffc7\067\uffc7\001\002\000\010" +
    "\023\uffb7\037\uffb7\040\uffb7\001\002\000\006\027\063\067" +
    "\253\001\002\000\006\063\254\066\260\001\002\000\004" +
    "\061\uffc2\001\002\000\004\061\265\001\002\000\010\025" +
    "\262\063\254\066\260\001\002\000\004\067\261\001\002" +
    "\000\004\061\uffc1\001\002\000\010\025\uffc4\063\uffc4\066" +
    "\uffc4\001\002\000\032\003\uffc6\005\uffc6\022\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\050\uffc6\053\uffc6\062\uffc6\064\uffc6\065" +
    "\uffc6\067\uffc6\001\002\000\004\067\264\001\002\000\010" +
    "\025\uffc5\063\uffc5\066\uffc5\001\002\000\024\003\042\005" +
    "\037\022\025\026\021\050\036\053\027\064\052\065\023" +
    "\067\046\001\002\000\026\003\042\005\037\022\025\026" +
    "\021\050\036\053\027\062\267\064\052\065\023\067\046" +
    "\001\002\000\004\067\uffc3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\006\002\004\044\003\001\001\000\006\030" +
    "\010\031\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\014\001\001\000\004\031" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\025\004\027\005" +
    "\046\006\043\007\037\010\044\011\047\012\030\013\021" +
    "\015\042\016\032\017\040\020\050\026\033\032\031\037" +
    "\034\040\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\060\015\061\020\050\026\251\037\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\012\060\014\227\015\125\020\050\026\122\034" +
    "\226\037\057\040\117\001\001\000\002\001\001\000\022" +
    "\005\106\015\107\021\207\022\203\023\212\024\205\025" +
    "\206\042\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\025\004\201\005\046\006\043\007\037\010" +
    "\044\011\047\012\030\013\021\015\042\016\032\017\040" +
    "\020\050\026\033\037\034\040\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\060\015\061\020\050\026" +
    "\056\037\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\060\015\061\020\050\026\063\037\057\001\001" +
    "\000\002\001\001\000\014\012\060\015\061\020\050\026" +
    "\163\037\057\001\001\000\002\001\001\000\014\012\060" +
    "\015\061\020\050\026\100\037\057\001\001\000\014\012" +
    "\060\015\061\020\050\026\076\037\057\001\001\000\014" +
    "\012\060\015\061\020\050\026\074\037\057\001\001\000" +
    "\014\012\060\015\061\020\050\026\072\037\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\106\015\107\027" +
    "\110\042\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\106\015\107" +
    "\042\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\060\014\126\015\125\020\050\026\122\037\057" +
    "\040\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\060\014\151\015\125\020\050" +
    "\026\122\037\057\040\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\060\014\146\015\125\020\050" +
    "\026\122\037\057\040\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\060\014\145\015\125\020\050" +
    "\026\122\037\057\040\117\001\001\000\002\001\001\000" +
    "\020\012\060\014\144\015\125\020\050\026\122\037\057" +
    "\040\117\001\001\000\020\012\060\014\143\015\125\020" +
    "\050\026\122\037\057\040\117\001\001\000\020\012\060" +
    "\014\142\015\125\020\050\026\122\037\057\040\117\001" +
    "\001\000\020\012\060\014\141\015\125\020\050\026\122" +
    "\037\057\040\117\001\001\000\020\012\060\014\140\015" +
    "\125\020\050\026\122\037\057\040\117\001\001\000\020" +
    "\012\060\014\137\015\125\020\050\026\122\037\057\040" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\060\015" +
    "\061\020\050\026\161\037\057\001\001\000\014\012\060" +
    "\015\061\020\050\026\157\037\057\001\001\000\014\012" +
    "\060\015\061\020\050\026\155\037\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\106\015\107\042\177\001" +
    "\001\000\014\012\060\015\061\020\050\026\175\037\057" +
    "\001\001\000\010\005\106\015\107\042\173\001\001\000" +
    "\014\012\060\015\061\020\050\026\171\037\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\106\015\107\023\213\024\205\025\206\042\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\106\015\107\042\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\106\015\107\023\224" +
    "\024\205\025\206\042\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\060\014\237\015\125\020\050" +
    "\026\122\037\057\040\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\012\060\014\227" +
    "\015\125\020\050\026\122\034\250\037\057\040\117\001" +
    "\001\000\044\003\025\004\027\005\046\006\043\007\037" +
    "\010\044\011\047\012\030\013\021\015\042\016\032\017" +
    "\040\020\050\026\033\032\244\037\034\040\023\001\001" +
    "\000\022\012\060\014\227\015\125\020\050\026\122\034" +
    "\243\037\057\040\117\001\001\000\002\001\001\000\042" +
    "\003\025\004\201\005\046\006\043\007\037\010\044\011" +
    "\047\012\030\013\021\015\042\016\032\017\040\020\050" +
    "\026\033\037\034\040\023\001\001\000\044\003\025\004" +
    "\027\005\046\006\043\007\037\010\044\011\047\012\030" +
    "\013\021\015\042\016\032\017\040\020\050\026\033\032" +
    "\246\037\034\040\023\001\001\000\042\003\025\004\201" +
    "\005\046\006\043\007\037\010\044\011\047\012\030\013" +
    "\021\015\042\016\032\017\040\020\050\026\033\037\034" +
    "\040\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\035\255\036\256\043\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\262\043" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\025\004\027\005\046\006\043\007\037" +
    "\010\044\011\047\012\030\013\021\015\042\016\032\017" +
    "\040\020\050\026\033\032\265\037\034\040\023\001\001" +
    "\000\042\003\025\004\201\005\046\006\043\007\037\010" +
    "\044\011\047\012\030\013\021\015\042\016\032\017\040" +
    "\020\050\026\033\037\034\040\023\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoHaskell$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoHaskell$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoHaskell$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz = new Nodo(); 
    public void syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", s.value.toString() + " no debe de ir en esa posicion", s.right, s.left);
    }

    public void unrecovered_syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", "No se pudo recuperar de: " + s.value.toString(), s.right, s.left);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoHaskell$actions {




  private final SintacticoHaskell parser;

  /** Constructor */
  CUP$SintacticoHaskell$actions(SintacticoHaskell parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoHaskell$do_action_part00000000(
    int                        CUP$SintacticoHaskell$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHaskell$parser,
    java.util.Stack            CUP$SintacticoHaskell$stack,
    int                        CUP$SintacticoHaskell$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoHaskell$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoHaskell$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoHaskell$parser.done_parsing();
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
System.out.println("inicio");
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 LFUNCION 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 raiz = new Nodo(); System.out.println("FINALIZO"); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LFUNCION ::= LFUNCION DECFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LFUNCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LFUNCION ::= DECFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LFUNCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECFUN ::= iden LPAR igual LCUERPO _end 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DECFUN",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECFUN ::= enter 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DECFUN",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LPAR ::= LPAR coma iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LPAR",25, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LPAR ::= iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LPAR",25, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LPAR ::= 
            {
              Nodo RESULT =null;
		 RESULT = null; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LPAR",25, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LCUERPO ::= LCUERPO CUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCUERPO",24, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LCUERPO ::= CUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCUERPO",24, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= LIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= CALCULAR 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= SUCC 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= DECC 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= MIN 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= MAX 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= CONCATLISTAS 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO ::= OPLIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO ::= IF 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO ::= CASE 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO ::= LLAMADO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO ::= enter 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO ::= error enter 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LIST ::= let iden igual PARLIST 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LIST",1, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA ::= CONCATLISTAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA ::= acorchete L ccorchete 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA ::= cadena 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L ::= LCORCHETES 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("L",15, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L ::= LVAL 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("L",15, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LCORCHETES ::= LCORCHETES coma acorchete LVAL ccorchete 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCORCHETES",16, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LCORCHETES ::= acorchete LVAL ccorchete 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCORCHETES",16, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LVAL ::= LCAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LVAL",17, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LVAL ::= LCALC 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LVAL",17, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LCAR ::= LCAR coma caracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCAR",18, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LCAR ::= caracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCAR",18, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LCALC ::= LCALC coma TIPOVALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCALC",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LCALC ::= TIPOVALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCALC",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CALCULAR ::= dolar calcular E dolar 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearCalcular(t1); System.out.println("Calcular");
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CALCULAR",3, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SUCC ::= dolar succ TIPOVALOR dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SUCC",4, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECC ::= dolar decc TIPOVALOR dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DECC",5, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MIN ::= dolar min PARLIST dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MIN",6, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MAX ::= dolar max PARLIST dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MAX",7, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARLIST ::= LISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PARLIST",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARLIST ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PARLIST",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARLIST ::= iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PARLIST",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARLIST ::= OPLISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PARLIST",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPLIST ::= OPEXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLIST",9, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPLIST ::= OPLISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLIST",9, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPLISTA ::= dolar revers PARLIST dolar 
            {
              String RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPLISTA ::= dolar impr PARLIST dolar 
            {
              String RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPLISTA ::= dolar par PARLIST dolar 
            {
              String RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPLISTA ::= dolar asc PARLIST dolar 
            {
              String RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPLISTA ::= dolar desc PARLIST dolar 
            {
              String RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPEXP ::= dolar sum PARLIST dolar 
            {
              String RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPEXP",30, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPEXP ::= dolar product PARLIST dolar 
            {
              String RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPEXP",30, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPEXP ::= dolar length PARLIST dolar 
            {
              String RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPEXP",30, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF ::= _if COND _then LCUERPO _else LCUERPO _end 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("IF",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASE ::= _case PARLIST enter LCASOS _end 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LCASOS ::= LCASOS CASO enter 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCASOS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LCASOS ::= CASO enter 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCASOS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASO ::= VALCASO dospuntos LCUERPO puntoycoma 
            {
              Nodo RESULT =null;
		System.out.println("TERMINO CASO");
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CASO",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALCASO ::= numero 
            {
              String RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALCASO",33, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALCASO ::= caracter 
            {
              String RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALCASO",33, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LLAMADO ::= dolar iden allave LEXP cllave dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LLAMADO",11, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LEXP ::= LEXP coma TIPOVALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LEXP",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LEXP ::= TIPOVALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LEXP",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LEXP ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LEXP",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPOVALOR ::= CALCULAR 
            {
              String RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("TIPOVALOR",32, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPOVALOR ::= LLAMADO 
            {
              String RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("TIPOVALOR",32, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPOVALOR ::= iden 
            {
              String RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("TIPOVALOR",32, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONCATLISTAS ::= PARLIST masmas PARLIST 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CONCATLISTAS",8, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND ::= COND or COND 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("COND",26, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COND ::= COND and COND 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("COND",26, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COND ::= E OPREL E 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("COND",26, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPREL ::= menor 
            {
              String RESULT =null;
		 RESULT = Const.menor; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",31, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPREL ::= mayor 
            {
              String RESULT =null;
		 RESULT = Const.mayor; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",31, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPREL ::= menorigual 
            {
              String RESULT =null;
		 RESULT = Const.menorigual; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",31, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPREL ::= mayorigual 
            {
              String RESULT =null;
		 RESULT = Const.mayorigual; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",31, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPREL ::= igualigual 
            {
              String RESULT =null;
		 RESULT = Const.igualigual; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",31, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPREL ::= diferente 
            {
              String RESULT =null;
		 RESULT = Const.diferente; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",31, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= E mas E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mas, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= E menos E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.menos, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E por E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.por, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E dividido E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.dividido, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E mod E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mod, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= E pot E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.pot, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= E sqrt E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.sqrt, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= menos E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.unario, t1, null); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= aparentesis E cparentesis 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= numero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = new Nodo(Const.numero, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = new Nodo(Const.id, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= PARLIST poslista 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= OPEXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoHaskell$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoHaskell$do_action(
    int                        CUP$SintacticoHaskell$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHaskell$parser,
    java.util.Stack            CUP$SintacticoHaskell$stack,
    int                        CUP$SintacticoHaskell$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoHaskell$do_action_part00000000(
                               CUP$SintacticoHaskell$act_num,
                               CUP$SintacticoHaskell$parser,
                               CUP$SintacticoHaskell$stack,
                               CUP$SintacticoHaskell$top);
    }
}

}
