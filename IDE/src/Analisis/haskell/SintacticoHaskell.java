
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.haskell;

import java_cup.runtime.Symbol;
import Reportes.*;
import fabrica.*;
import ide.Const;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoHaskell extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symsH.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoHaskell() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoHaskell(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoHaskell(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\051\002\000\002\002" +
    "\004\000\002\040\004\000\002\040\003\000\002\041\007" +
    "\000\002\043\005\000\002\043\003\000\002\043\002\000" +
    "\002\042\004\000\002\042\003\000\002\052\002\000\002" +
    "\004\005\000\002\053\002\000\002\004\005\000\002\054" +
    "\002\000\002\004\005\000\002\055\002\000\002\004\005" +
    "\000\002\056\002\000\002\004\005\000\002\057\002\000" +
    "\002\004\005\000\002\060\002\000\002\004\005\000\002" +
    "\061\002\000\002\004\005\000\002\062\002\000\002\004" +
    "\005\000\002\063\002\000\002\004\005\000\002\064\002" +
    "\000\002\004\005\000\002\065\002\000\002\004\005\000" +
    "\002\066\002\000\002\004\005\000\002\067\002\000\002" +
    "\004\005\000\002\004\003\000\002\004\003\000\002\070" +
    "\002\000\002\004\005\000\002\003\006\000\002\030\003" +
    "\000\002\030\005\000\002\030\003\000\002\031\003\000" +
    "\002\031\003\000\002\032\007\000\002\032\005\000\002" +
    "\033\003\000\002\033\003\000\002\033\002\000\002\034" +
    "\005\000\002\034\003\000\002\035\005\000\002\035\003" +
    "\000\002\005\006\000\002\006\006\000\002\007\006\000" +
    "\002\010\006\000\002\011\006\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\013\004\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\026\011\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\027\006\000\002\045\004\000" +
    "\002\045\003\000\002\046\006\000\002\015\010\000\002" +
    "\037\005\000\002\037\003\000\002\037\002\000\002\012" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\064\000\001\002\000\004\064\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\002\ufffd\064\ufffd\001\002\000\010\047\ufff9\057" +
    "\ufff9\064\013\001\002\000\006\002\uffff\064\010\001\002" +
    "\000\006\002\ufffe\064\ufffe\001\002\000\006\047\ufffa\057" +
    "\ufffa\001\002\000\006\047\015\057\016\001\002\000\040" +
    "\005\034\012\036\013\055\014\046\015\056\016\026\017" +
    "\031\020\060\021\037\022\051\026\061\050\062\053\030" +
    "\064\042\065\064\001\002\000\004\064\017\001\002\000" +
    "\006\047\ufffb\057\ufffb\001\002\000\004\027\132\001\002" +
    "\000\004\067\uffe2\001\002\000\004\067\uffe4\001\002\000" +
    "\006\027\uffd5\067\uffea\001\002\000\004\067\uffdc\001\002" +
    "\000\046\005\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\050\uffd9\053\uffd9\062\uffd9\064\uffd9\065\uffd9\001" +
    "\002\000\012\050\uffba\053\uffba\064\uffba\065\uffba\001\002" +
    "\000\046\005\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\050\ufff7\053\ufff7\062\ufff7\064\ufff7\065\ufff7\001" +
    "\002\000\012\050\075\053\247\054\uffcc\066\241\001\002" +
    "\000\012\050\uffb9\053\uffb9\064\uffb9\065\uffb9\001\002\000" +
    "\004\067\uffe6\001\002\000\004\067\ufff4\001\002\000\004" +
    "\064\231\001\002\000\004\067\ufff0\001\002\000\012\050" +
    "\uffbe\053\uffbe\064\uffbe\065\uffbe\001\002\000\012\050\uffb7" +
    "\053\uffb7\064\uffb7\065\uffb7\001\002\000\012\050\100\053" +
    "\030\064\042\065\064\001\002\000\042\005\034\012\036" +
    "\013\055\014\046\015\056\016\026\017\031\020\060\021" +
    "\037\022\051\025\225\026\061\050\062\053\030\064\042" +
    "\065\064\001\002\000\022\027\uffc0\050\uffc0\053\uffc0\060" +
    "\uffc0\061\uffc0\064\uffc0\065\uffc0\067\uffc0\001\002\000\004" +
    "\067\uffee\001\002\000\046\005\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\024\uffda\025\uffda\026\uffda\050\uffda\053\uffda\062\uffda\064" +
    "\uffda\065\uffda\001\002\000\022\027\uffc2\050\uffc2\053\uffc2" +
    "\060\uffc2\061\uffc2\064\uffc2\065\uffc2\067\uffc2\001\002\000" +
    "\012\050\uffbc\053\uffbc\064\uffbc\065\uffbc\001\002\000\004" +
    "\067\ufff2\001\002\000\004\067\uffe0\001\002\000\016\050" +
    "\100\053\030\055\104\063\103\064\101\065\064\001\002" +
    "\000\004\067\uffe8\001\002\000\004\067\uffde\001\002\000" +
    "\006\027\uffc1\067\uffd8\001\002\000\012\050\uffbd\053\uffbd" +
    "\064\uffbd\065\uffbd\001\002\000\012\050\uffbb\053\uffbb\064" +
    "\uffbb\065\uffbb\001\002\000\004\067\ufff6\001\002\000\012" +
    "\050\uffb8\053\uffb8\064\uffb8\065\uffb8\001\002\000\012\050" +
    "\100\053\030\064\042\065\064\001\002\000\016\004\073" +
    "\006\067\007\074\010\072\011\070\064\071\001\002\000" +
    "\004\067\uffec\001\002\000\022\027\uffd3\050\uffd3\053\uffd3" +
    "\060\uffd3\061\uffd3\064\uffd3\065\uffd3\067\uffd3\001\002\000" +
    "\004\067\066\001\002\000\046\005\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\050\uffeb\053\uffeb\062\uffeb" +
    "\064\uffeb\065\uffeb\001\002\000\004\050\075\001\002\000" +
    "\012\050\100\053\030\064\042\065\064\001\002\000\004" +
    "\051\137\001\002\000\012\050\100\053\030\064\042\065" +
    "\064\001\002\000\016\050\100\053\030\055\104\063\103" +
    "\064\101\065\064\001\002\000\004\050\075\001\002\000" +
    "\004\004\073\001\002\000\004\050\077\001\002\000\004" +
    "\067\uffc5\001\002\000\004\064\071\001\002\000\056\023" +
    "\uff9a\027\uffc0\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\050\uff9a\052\uff9a\056\uff9a" +
    "\057\uff9a\060\uffc0\001\002\000\006\027\132\060\131\001" +
    "\002\000\052\023\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\050\uff9b\052\uff9b" +
    "\056\uff9b\057\uff9b\001\002\000\016\050\100\053\030\055" +
    "\104\063\103\064\101\065\064\001\002\000\022\027\uffd5" +
    "\050\uffd5\053\uffd5\060\uffd5\061\uffd5\064\uffd5\065\uffd5\067" +
    "\uffd5\001\002\000\056\023\uff99\027\uffc1\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040" +
    "\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99" +
    "\050\uff99\052\uff99\056\uff99\057\uff99\060\uffc1\001\002\000" +
    "\022\030\113\031\114\032\110\033\117\034\112\035\115" +
    "\036\116\050\111\001\002\000\016\050\100\053\030\055" +
    "\104\063\103\064\101\065\064\001\002\000\012\050\uffc7" +
    "\054\uffc7\057\uffc7\067\uffc7\001\002\000\016\050\100\053" +
    "\030\055\104\063\103\064\101\065\064\001\002\000\016" +
    "\050\100\053\030\055\104\063\103\064\101\065\064\001" +
    "\002\000\016\050\100\053\030\055\104\063\103\064\101" +
    "\065\064\001\002\000\016\050\100\053\030\055\104\063" +
    "\103\064\101\065\064\001\002\000\016\050\100\053\030" +
    "\055\104\063\103\064\101\065\064\001\002\000\016\050" +
    "\100\053\030\055\104\063\103\064\101\065\064\001\002" +
    "\000\052\023\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\035\115\036\116\037\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050\uffa0\052\uffa0\056" +
    "\uffa0\057\uffa0\001\002\000\052\023\uff9e\030\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\050\uff9e\052\uff9e\056\uff9e\057\uff9e\001\002\000\052\023" +
    "\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044" +
    "\uff9d\045\uff9d\046\uff9d\050\uff9d\052\uff9d\056\uff9d\057\uff9d" +
    "\001\002\000\052\023\uffa2\030\uffa2\031\uffa2\032\110\033" +
    "\117\034\112\035\115\036\116\037\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2\052" +
    "\uffa2\056\uffa2\057\uffa2\001\002\000\052\023\uffa3\030\uffa3" +
    "\031\uffa3\032\110\033\117\034\112\035\115\036\116\037" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\050\uffa3\052\uffa3\056\uffa3\057\uffa3\001\002\000" +
    "\052\023\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\115\036\116\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\050\uff9f\052\uff9f\056\uff9f" +
    "\057\uff9f\001\002\000\052\023\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\115\036\116\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\050" +
    "\uffa1\052\uffa1\056\uffa1\057\uffa1\001\002\000\022\030\113" +
    "\031\114\032\110\033\117\034\112\035\115\036\116\056" +
    "\130\001\002\000\052\023\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\050\uff9c" +
    "\052\uff9c\056\uff9c\057\uff9c\001\002\000\052\023\uff98\030" +
    "\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\050\uff98\052\uff98\056\uff98\057\uff98\001\002" +
    "\000\012\050\100\053\030\064\042\065\064\001\002\000" +
    "\022\027\uffa4\050\uffa4\053\uffa4\060\uffa4\061\uffa4\064\uffa4" +
    "\065\uffa4\067\uffa4\001\002\000\022\027\uffc1\050\uffc1\053" +
    "\uffc1\060\uffc1\061\uffc1\064\uffc1\065\uffc1\067\uffc1\001\002" +
    "\000\006\027\132\050\136\001\002\000\004\067\uffc4\001" +
    "\002\000\022\050\100\052\uffa5\053\030\055\104\057\uffa5" +
    "\063\103\064\101\065\064\001\002\000\006\052\142\057" +
    "\143\001\002\000\024\030\113\031\114\032\110\033\117" +
    "\034\112\035\115\036\116\052\uffa6\057\uffa6\001\002\000" +
    "\004\050\145\001\002\000\016\050\100\053\030\055\104" +
    "\063\103\064\101\065\064\001\002\000\024\030\113\031" +
    "\114\032\110\033\117\034\112\035\115\036\116\052\uffa7" +
    "\057\uffa7\001\002\000\070\023\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\050\uffa8\052\uffa8\053\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\061\uffa8\064\uffa8\065\uffa8\067\uffa8\001\002\000\006\027" +
    "\132\050\147\001\002\000\004\067\uffc3\001\002\000\004" +
    "\050\151\001\002\000\004\067\uffc6\001\002\000\014\027" +
    "\132\050\100\053\030\064\042\065\064\001\002\000\014" +
    "\025\uffaa\050\uffaa\053\uffaa\064\uffaa\065\uffaa\001\002\000" +
    "\014\025\163\050\100\053\030\064\042\065\064\001\002" +
    "\000\006\027\132\061\156\001\002\000\040\005\034\012" +
    "\036\013\055\014\046\015\056\016\026\017\031\020\060" +
    "\021\037\022\051\026\061\050\062\053\030\064\042\065" +
    "\064\001\002\000\042\005\034\012\036\013\055\014\046" +
    "\015\056\016\026\017\031\020\060\021\037\022\051\026" +
    "\061\050\062\053\030\062\161\064\042\065\064\001\002" +
    "\000\046\005\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\050\ufff8\053\ufff8\062\ufff8\064\ufff8\065\ufff8\001" +
    "\002\000\014\025\uffa9\050\uffa9\053\uffa9\064\uffa9\065\uffa9" +
    "\001\002\000\014\025\uffab\050\uffab\053\uffab\064\uffab\065" +
    "\uffab\001\002\000\046\005\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\024" +
    "\uffac\025\uffac\026\uffac\050\uffac\053\uffac\062\uffac\064\uffac" +
    "\065\uffac\001\002\000\004\067\165\001\002\000\046\005" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\050" +
    "\ufff5\053\ufff5\062\ufff5\064\ufff5\065\ufff5\001\002\000\004" +
    "\067\167\001\002\000\046\005\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\050\uffd7\053\uffd7\062\uffd7\064" +
    "\uffd7\065\uffd7\001\002\000\004\067\171\001\002\000\046" +
    "\005\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\050\uffdd\053\uffdd\062\uffdd\064\uffdd\065\uffdd\001\002\000" +
    "\004\067\173\001\002\000\046\005\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\050\uffe7\053\uffe7\062\uffe7" +
    "\064\uffe7\065\uffe7\001\002\000\010\023\207\037\210\040" +
    "\206\001\002\000\034\030\113\031\114\032\110\033\117" +
    "\034\112\035\115\036\116\041\203\042\176\043\177\044" +
    "\204\045\201\046\200\001\002\000\016\050\uffaf\053\uffaf" +
    "\055\uffaf\063\uffaf\064\uffaf\065\uffaf\001\002\000\016\050" +
    "\uffb2\053\uffb2\055\uffb2\063\uffb2\064\uffb2\065\uffb2\001\002" +
    "\000\016\050\uffae\053\uffae\055\uffae\063\uffae\064\uffae\065" +
    "\uffae\001\002\000\016\050\uffad\053\uffad\055\uffad\063\uffad" +
    "\064\uffad\065\uffad\001\002\000\016\050\100\053\030\055" +
    "\104\063\103\064\101\065\064\001\002\000\016\050\uffb0" +
    "\053\uffb0\055\uffb0\063\uffb0\064\uffb0\065\uffb0\001\002\000" +
    "\016\050\uffb1\053\uffb1\055\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\001\002\000\026\023\uffb3\030\113\031\114\032\110\033" +
    "\117\034\112\035\115\036\116\037\uffb3\040\uffb3\001\002" +
    "\000\016\050\100\053\030\055\104\063\103\064\101\065" +
    "\064\001\002\000\040\005\034\012\036\013\055\014\046" +
    "\015\056\016\026\017\031\020\060\021\037\022\051\026" +
    "\061\050\062\053\030\064\042\065\064\001\002\000\016" +
    "\050\100\053\030\055\104\063\103\064\101\065\064\001" +
    "\002\000\010\023\uffb5\037\uffb5\040\206\001\002\000\042" +
    "\005\034\012\036\013\055\014\046\015\056\016\026\017" +
    "\031\020\060\021\037\022\051\024\213\026\061\050\062" +
    "\053\030\064\042\065\064\001\002\000\040\005\034\012" +
    "\036\013\055\014\046\015\056\016\026\017\031\020\060" +
    "\021\037\022\051\026\061\050\062\053\030\064\042\065" +
    "\064\001\002\000\042\005\034\012\036\013\055\014\046" +
    "\015\056\016\026\017\031\020\060\021\037\022\051\025" +
    "\215\026\061\050\062\053\030\064\042\065\064\001\002" +
    "\000\046\005\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\050\uffb6\053\uffb6\062\uffb6\064\uffb6\065\uffb6\001" +
    "\002\000\010\023\uffb4\037\uffb4\040\uffb4\001\002\000\004" +
    "\067\220\001\002\000\046\005\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\050\uffdf\053\uffdf\062\uffdf\064" +
    "\uffdf\065\uffdf\001\002\000\004\067\222\001\002\000\046" +
    "\005\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\050\ufff1\053\ufff1\062\ufff1\064\ufff1\065\ufff1\001\002\000" +
    "\004\067\224\001\002\000\046\005\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\024\uffed\025\uffed\026\uffed\050\uffed\053\uffed\062\uffed" +
    "\064\uffed\065\uffed\001\002\000\006\002\ufffc\064\ufffc\001" +
    "\002\000\006\027\132\067\uffbf\001\002\000\004\067\230" +
    "\001\002\000\046\005\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\024\uffef" +
    "\025\uffef\026\uffef\050\uffef\053\uffef\062\uffef\064\uffef\065" +
    "\uffef\001\002\000\004\047\232\001\002\000\012\050\100" +
    "\053\030\064\042\065\064\001\002\000\006\027\uffc2\067" +
    "\uffd6\001\002\000\004\067\235\001\002\000\046\005\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\050\ufff3" +
    "\053\ufff3\062\ufff3\064\ufff3\065\ufff3\001\002\000\004\067" +
    "\237\001\002\000\046\005\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\050\uffe5\053\uffe5\062\uffe5\064\uffe5" +
    "\065\uffe5\001\002\000\006\054\uffd2\057\257\001\002\000" +
    "\006\054\uffca\057\uffca\001\002\000\006\054\uffce\057\255" +
    "\001\002\000\006\054\uffcd\057\253\001\002\000\004\054" +
    "\252\001\002\000\006\054\uffc8\057\uffc8\001\002\000\004" +
    "\054\uffd1\001\002\000\010\050\075\054\uffcc\066\241\001" +
    "\002\000\004\054\251\001\002\000\006\054\uffcf\057\uffcf" +
    "\001\002\000\022\027\uffd4\050\uffd4\053\uffd4\060\uffd4\061" +
    "\uffd4\064\uffd4\065\uffd4\067\uffd4\001\002\000\004\050\075" +
    "\001\002\000\006\054\uffc9\057\uffc9\001\002\000\004\066" +
    "\256\001\002\000\006\054\uffcb\057\uffcb\001\002\000\004" +
    "\053\260\001\002\000\010\050\075\054\uffcc\066\241\001" +
    "\002\000\004\054\262\001\002\000\006\054\uffd0\057\uffd0" +
    "\001\002\000\004\067\264\001\002\000\046\005\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\024\uffdb\025\uffdb\026\uffdb\050\uffdb\053" +
    "\uffdb\062\uffdb\064\uffdb\065\uffdb\001\002\000\004\067\266" +
    "\001\002\000\046\005\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\050\uffe9\053\uffe9\062\uffe9\064\uffe9\065" +
    "\uffe9\001\002\000\004\067\270\001\002\000\046\005\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\050\uffe3" +
    "\053\uffe3\062\uffe3\064\uffe3\065\uffe3\001\002\000\004\067" +
    "\272\001\002\000\046\005\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\050\uffe1\053\uffe1\062\uffe1\064\uffe1" +
    "\065\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\006\002\004\051\003\001\001\000\006\040" +
    "\010\041\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\013\001\001\000\004\041" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\056\004\026\005\032\006\046\007" +
    "\034\010\042\011\062\012\022\013\051\015\053\017\031" +
    "\020\021\021\020\022\047\023\052\024\023\026\043\027" +
    "\024\030\044\036\017\042\040\047\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\270\001\001\000\004\063\266\001\001\000\004\060\264" +
    "\001\001\000\004\067\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\244\031\243" +
    "\032\237\033\245\034\241\035\242\001\001\000\002\001" +
    "\001\000\004\062\235\001\001\000\004\053\233\001\001" +
    "\000\002\001\001\000\004\055\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\104\015\133\030\044" +
    "\036\225\001\001\000\054\003\056\004\157\005\032\006" +
    "\046\007\034\010\042\011\062\012\022\013\051\015\053" +
    "\017\031\020\021\021\020\022\047\023\052\024\023\026" +
    "\043\027\024\030\044\036\017\047\037\001\001\000\002" +
    "\001\001\000\004\056\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\220\001\001" +
    "\000\004\065\216\001\001\000\016\012\104\014\174\015" +
    "\105\030\044\036\101\044\173\001\001\000\004\061\171" +
    "\001\001\000\004\066\167\001\001\000\004\070\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\163" +
    "\001\001\000\002\001\001\000\012\012\104\015\133\030" +
    "\044\036\151\001\001\000\002\001\001\000\004\057\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\147\001\001\000\012\012\104\015\133" +
    "\030\044\036\145\001\001\000\002\001\001\000\012\012" +
    "\104\015\133\030\044\036\134\001\001\000\014\012\104" +
    "\014\106\015\105\030\044\036\101\001\001\000\004\005" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\104\014\126\015\105" +
    "\030\044\036\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\104\014\125\015\105" +
    "\030\044\036\101\001\001\000\002\001\001\000\014\012" +
    "\104\014\124\015\105\030\044\036\101\001\001\000\014" +
    "\012\104\014\123\015\105\030\044\036\101\001\001\000" +
    "\014\012\104\014\122\015\105\030\044\036\101\001\001" +
    "\000\014\012\104\014\121\015\105\030\044\036\101\001" +
    "\001\000\014\012\104\014\120\015\105\030\044\036\101" +
    "\001\001\000\014\012\104\014\117\015\105\030\044\036" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\104\015\133\030\044\036" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\104\014\140\015" +
    "\105\030\044\036\101\037\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\104\014" +
    "\143\015\105\030\044\036\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\104\015\133" +
    "\030\044\036\154\045\153\046\152\001\001\000\002\001" +
    "\001\000\014\012\104\015\133\030\044\036\154\046\161" +
    "\001\001\000\002\001\001\000\056\003\056\004\026\005" +
    "\032\006\046\007\034\010\042\011\062\012\022\013\051" +
    "\015\053\017\031\020\021\021\020\022\047\023\052\024" +
    "\023\026\043\027\024\030\044\036\017\042\156\047\037" +
    "\001\001\000\054\003\056\004\157\005\032\006\046\007" +
    "\034\010\042\011\062\012\022\013\051\015\053\017\031" +
    "\020\021\021\020\022\047\023\052\024\023\026\043\027" +
    "\024\030\044\036\017\047\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\104\014\204\015\105" +
    "\030\044\036\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\104\014\174\015\105" +
    "\030\044\036\101\044\215\001\001\000\056\003\056\004" +
    "\026\005\032\006\046\007\034\010\042\011\062\012\022" +
    "\013\051\015\053\017\031\020\021\021\020\022\047\023" +
    "\052\024\023\026\043\027\024\030\044\036\017\042\211" +
    "\047\037\001\001\000\016\012\104\014\174\015\105\030" +
    "\044\036\101\044\210\001\001\000\002\001\001\000\054" +
    "\003\056\004\157\005\032\006\046\007\034\010\042\011" +
    "\062\012\022\013\051\015\053\017\031\020\021\021\020" +
    "\022\047\023\052\024\023\026\043\027\024\030\044\036" +
    "\017\047\037\001\001\000\056\003\056\004\026\005\032" +
    "\006\046\007\034\010\042\011\062\012\022\013\051\015" +
    "\053\017\031\020\021\021\020\022\047\023\052\024\023" +
    "\026\043\027\024\030\044\036\017\042\213\047\037\001" +
    "\001\000\054\003\056\004\157\005\032\006\046\007\034" +
    "\010\042\011\062\012\022\013\051\015\053\017\031\020" +
    "\021\021\020\022\047\023\052\024\023\026\043\027\024" +
    "\030\044\036\017\047\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\104\015" +
    "\133\030\232\036\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\244\033\247\034\241\035\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\244\033\260\034\241\035\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoHaskell$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoHaskell$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoHaskell$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz = new Nodo(); 
    public void syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", s.value.toString() + " no debe de ir en esa posicion", s.right, s.left);
    }

    public void unrecovered_syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", "No se pudo recuperar de: " + s.value.toString(), s.right, s.left);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoHaskell$actions {




  private final SintacticoHaskell parser;

  /** Constructor */
  CUP$SintacticoHaskell$actions(SintacticoHaskell parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoHaskell$do_action_part00000000(
    int                        CUP$SintacticoHaskell$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHaskell$parser,
    java.util.Stack            CUP$SintacticoHaskell$stack,
    int                        CUP$SintacticoHaskell$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoHaskell$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoHaskell$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoHaskell$parser.done_parsing();
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
System.out.println("inicio");
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 LFUNCION 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 raiz = new Nodo(); System.out.println("FINALIZO"); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LFUNCION ::= LFUNCION DECFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LFUNCION",30, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LFUNCION ::= DECFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LFUNCION",30, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECFUN ::= iden LPAR igual LCUERPO _end 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DECFUN",31, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LPAR ::= LPAR coma iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LPAR",33, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LPAR ::= iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LPAR",33, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LPAR ::= 
            {
              Nodo RESULT =null;
		 RESULT = null; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LPAR",33, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LCUERPO ::= LCUERPO CUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCUERPO",32, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LCUERPO ::= CUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCUERPO",32, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= LIST NT$1 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= CALCULAR NT$2 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$3 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= SUCC NT$3 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= DECC NT$4 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO ::= MIN NT$5 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$6 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO ::= MAX NT$6 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$7 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO ::= CONCATLISTAS NT$7 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$8 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO ::= OPLIST NT$8 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$9 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO ::= PRODUCT NT$9 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$10 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO ::= REVERS NT$10 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$11 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$11",50, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO ::= IMPR NT$11 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$12 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$12",51, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO ::= PAR NT$12 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$13 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$13",52, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO ::= ASC NT$13 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$14 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$14",53, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO ::= DESC NT$14 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO ::= IF 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPO ::= CASE 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$15 ::= 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$15",54, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CUERPO ::= LLAMADO NT$15 enter 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LIST ::= let iden igual LISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LIST",1, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTA ::= CONCATLISTAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTA ::= acorchete L ccorchete 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA ::= cadena 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // L ::= LCORCHETES 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("L",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // L ::= LVAL 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("L",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LCORCHETES ::= LCORCHETES coma acorchete LVAL ccorchete 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCORCHETES",24, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LCORCHETES ::= acorchete LVAL ccorchete 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCORCHETES",24, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LVAL ::= LCAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LVAL",25, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LVAL ::= LCALC 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LVAL",25, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LVAL ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LVAL",25, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LCAR ::= LCAR coma caracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCAR",26, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LCAR ::= caracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCAR",26, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LCALC ::= LCALC coma CALCULAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCALC",27, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LCALC ::= CALCULAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCALC",27, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CALCULAR ::= dolar calcular E dolar 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearCalcular(t1); System.out.println("Calcular");
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CALCULAR",3, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SUCC ::= dolar succ CALCULAR dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SUCC",4, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECC ::= dolar decc CALCULAR dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DECC",5, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MIN ::= dolar min PARLIST dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MIN",6, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MAX ::= dolar max PARLIST dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MAX",7, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARLIST ::= LISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PARLIST",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARLIST ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PARLIST",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARLIST ::= iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PARLIST",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPLIST ::= OP PARLIST 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLIST",9, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP ::= sum 
            {
              String RESULT =null;
		 RESULT = Const.sum; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OP",37, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP ::= product 
            {
              String RESULT =null;
		 RESULT = Const.product; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OP",37, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP ::= revers 
            {
              String RESULT =null;
		 RESULT = Const.revers; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OP",37, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP ::= impr 
            {
              String RESULT =null;
		 RESULT = Const.impr; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OP",37, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP ::= par 
            {
              String RESULT =null;
		 RESULT = Const.par; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OP",37, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP ::= asc 
            {
              String RESULT =null;
		 RESULT = Const.asc; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OP",37, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP ::= desc 
            {
              String RESULT =null;
		 RESULT = Const.desc; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OP",37, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP ::= length 
            {
              String RESULT =null;
		 RESULT = Const.length; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OP",37, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF ::= _if COND _then LCUERPO _else LCUERPO _end 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COND ::= COND or COND 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("COND",34, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COND ::= COND and COND 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("COND",34, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COND ::= E OPREL E 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("COND",34, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPREL ::= menor 
            {
              String RESULT =null;
		 RESULT = Const.menor; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPREL ::= mayor 
            {
              String RESULT =null;
		 RESULT = Const.mayor; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPREL ::= menorigual 
            {
              String RESULT =null;
		 RESULT = Const.menorigual; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPREL ::= mayorigual 
            {
              String RESULT =null;
		 RESULT = Const.mayorigual; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPREL ::= igualigual 
            {
              String RESULT =null;
		 RESULT = Const.igualigual; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPREL ::= diferente 
            {
              String RESULT =null;
		 RESULT = Const.diferente; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASE ::= _case PARLIST LCASOS _end 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LCASOS ::= LCASOS CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCASOS",35, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LCASOS ::= CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCASOS",35, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CASO ::= PARLIST dospuntos LCUERPO puntoycoma 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CASO",36, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LLAMADO ::= dolar iden allave LEXP cllave dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LLAMADO",11, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LEXP ::= LEXP coma E 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LEXP",29, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LEXP ::= E 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LEXP",29, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LEXP ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LEXP",29, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONCATLISTAS ::= PARLIST masmas PARLIST 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CONCATLISTAS",8, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= E mas E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mas, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= E menos E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.menos, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= E por E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.por, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= E dividido E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.dividido, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= E mod E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mod, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= E pot E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.pot, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= E sqrt E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.sqrt, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= aparentesis E cparentesis 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= numero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = new Nodo(Const.numero, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = new Nodo(Const.id, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= PARLIST poslista 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoHaskell$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoHaskell$do_action(
    int                        CUP$SintacticoHaskell$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHaskell$parser,
    java.util.Stack            CUP$SintacticoHaskell$stack,
    int                        CUP$SintacticoHaskell$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoHaskell$do_action_part00000000(
                               CUP$SintacticoHaskell$act_num,
                               CUP$SintacticoHaskell$parser,
                               CUP$SintacticoHaskell$stack,
                               CUP$SintacticoHaskell$top);
    }
}

}
