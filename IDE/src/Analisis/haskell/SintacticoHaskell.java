
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.haskell;

import java_cup.runtime.Symbol;
import Reportes.*;
import fabrica.*;
import ide.Const;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoHaskell extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symsH.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoHaskell() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoHaskell(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoHaskell(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\046\002\000\002\002" +
    "\004\000\002\027\004\000\002\027\003\000\002\030\007" +
    "\000\002\030\003\000\002\032\005\000\002\032\003\000" +
    "\002\032\002\000\002\031\004\000\002\031\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\003\010\000\002\020\003\000\002\020\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\007" +
    "\000\002\022\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\024\005\000\002\024\003\000\002" +
    "\043\005\000\002\043\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\005\006\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\006\006\000\002" +
    "\007\006\000\002\010\006\000\002\011\006\000\002\013" +
    "\003\000\002\013\003\000\002\041\006\000\002\041\006" +
    "\000\002\041\006\000\002\041\006\000\002\041\006\000" +
    "\002\037\006\000\002\037\006\000\002\037\006\000\002" +
    "\016\011\000\002\017\007\000\002\034\005\000\002\034" +
    "\004\000\002\035\006\000\002\040\003\000\002\040\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\005\000\002" +
    "\015\010\000\002\026\005\000\002\026\003\000\002\026" +
    "\002\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\005\000\002\036\005\000\002\012\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\004" +
    "\000\002\014\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\005\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\064\000\067\000\001\002\000\006\064" +
    "\007\067\011\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\010\047\ufff8\057\ufff8\064\014\001" +
    "\002\000\010\002\uffff\064\007\067\011\001\002\000\010" +
    "\002\ufffb\064\ufffb\067\ufffb\001\002\000\010\002\ufffd\064" +
    "\ufffd\067\ufffd\001\002\000\010\002\ufffe\064\ufffe\067\ufffe" +
    "\001\002\000\006\047\ufff9\057\ufff9\001\002\000\006\047" +
    "\016\057\017\001\002\000\022\003\041\022\026\026\021" +
    "\050\036\053\030\064\051\065\024\067\045\001\002\000" +
    "\004\064\020\001\002\000\006\047\ufffa\057\ufffa\001\002" +
    "\000\012\050\107\053\030\064\303\065\024\001\002\000" +
    "\030\003\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\050\ufff1" +
    "\053\ufff1\062\ufff1\064\ufff1\065\ufff1\067\ufff1\001\002\000" +
    "\030\003\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\050\uffcb" +
    "\053\uffcb\062\uffcb\064\uffcb\065\uffcb\067\uffcb\001\002\000" +
    "\062\003\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\046\uffe8\050\uffe8\052\uffe8\053\uffe8\057\uffe8" +
    "\060\uffe8\062\uffe8\064\uffe8\065\uffe8\067\uffe8\001\002\000" +
    "\030\003\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\050\ufff3" +
    "\053\ufff3\062\ufff3\064\ufff3\065\ufff3\067\ufff3\001\002\000" +
    "\014\050\107\053\103\064\114\065\100\066\105\001\002" +
    "\000\030\003\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\050" +
    "\ufff5\053\ufff5\062\ufff5\064\ufff5\065\ufff5\067\ufff5\001\002" +
    "\000\014\050\214\053\206\064\221\065\203\066\213\001" +
    "\002\000\030\003\ufff6\022\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\050\ufff6\053\ufff6\062\ufff6\064\ufff6\065\ufff6\067\ufff6\001" +
    "\002\000\032\003\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\uffea\050\ufff2\053\ufff2\062\ufff2\064\ufff2\065\ufff2\067" +
    "\ufff2\001\002\000\024\003\041\022\026\025\252\026\021" +
    "\050\036\053\030\064\051\065\024\067\045\001\002\000" +
    "\030\003\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\050\ufff0" +
    "\053\ufff0\062\ufff0\064\ufff0\065\ufff0\067\ufff0\001\002\000" +
    "\032\003\uffca\022\uffca\024\uffca\025\uffca\026\uffca\027\uffe7" +
    "\050\uffca\053\uffca\062\uffca\064\uffca\065\uffca\067\uffca\001" +
    "\002\000\040\004\120\005\244\006\140\007\134\010\136" +
    "\011\141\012\137\013\142\014\060\015\064\016\062\017" +
    "\063\020\065\021\135\064\061\001\002\000\100\003\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\050\uffd2\052\uffd2\053\uffd2\054\uffd2\056\uffd2\057\uffd2" +
    "\062\uffd2\064\uffd2\065\uffd2\067\uffd2\001\002\000\030\003" +
    "\uffef\022\uffef\024\uffef\025\uffef\026\uffef\050\uffef\053\uffef" +
    "\062\uffef\064\uffef\065\uffef\067\uffef\001\002\000\004\067" +
    "\243\001\002\000\032\003\uffee\022\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffe5\050\uffee\053\uffee\062\uffee\064\uffee\065" +
    "\uffee\067\uffee\001\002\000\100\003\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\050\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\056\uffd3\057\uffd3\062\uffd3\064\uffd3" +
    "\065\uffd3\067\uffd3\001\002\000\100\003\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\050\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\056\uffd1\057\uffd1\062\uffd1\064" +
    "\uffd1\065\uffd1\067\uffd1\001\002\000\030\003\uffed\022\uffed" +
    "\024\uffed\025\uffed\026\uffed\050\uffed\053\uffed\062\uffed\064" +
    "\uffed\065\uffed\067\uffed\001\002\000\030\003\ufff4\022\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\050\ufff4\053\ufff4\062\ufff4\064" +
    "\ufff4\065\ufff4\067\ufff4\001\002\000\100\003\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\056\uffd0\057\uffd0\062\uffd0" +
    "\064\uffd0\065\uffd0\067\uffd0\001\002\000\004\027\052\001" +
    "\002\000\062\003\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\050\uffe6\052\uffe6\053\uffe6" +
    "\057\uffe6\060\uffe6\062\uffe6\064\uffe6\065\uffe6\067\uffe6\001" +
    "\002\000\012\050\053\053\030\064\051\065\024\001\002" +
    "\000\016\014\060\015\064\016\062\017\063\020\065\064" +
    "\061\001\002\000\062\003\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050\uffa5\052\uffa5" +
    "\053\uffa5\057\uffa5\060\uffa5\062\uffa5\064\uffa5\065\uffa5\067" +
    "\uffa5\001\002\000\062\003\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\050\uffe5\052\uffe5" +
    "\053\uffe5\057\uffe5\060\uffe5\062\uffe5\064\uffe5\065\uffe5\067" +
    "\uffe5\001\002\000\062\003\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\050\uffe7\052\uffe7" +
    "\053\uffe7\057\uffe7\060\uffe7\062\uffe7\064\uffe7\065\uffe7\067" +
    "\uffe7\001\002\000\062\003\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\045\uffea\046\uffea\050\uffea\052\uffea" +
    "\053\uffea\057\uffea\060\uffea\062\uffea\064\uffea\065\uffea\067" +
    "\uffea\001\002\000\012\050\053\053\030\064\051\065\024" +
    "\001\002\000\004\051\076\001\002\000\012\050\053\053" +
    "\030\064\051\065\024\001\002\000\012\050\053\053\030" +
    "\064\051\065\024\001\002\000\012\050\053\053\030\064" +
    "\051\065\024\001\002\000\012\050\053\053\030\064\051" +
    "\065\024\001\002\000\006\027\052\050\067\001\002\000" +
    "\062\003\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\050\uffc5\052\uffc5\053\uffc5\057\uffc5" +
    "\060\uffc5\062\uffc5\064\uffc5\065\uffc5\067\uffc5\001\002\000" +
    "\006\027\052\050\071\001\002\000\062\003\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\050\uffc8\052\uffc8\053\uffc8\057\uffc8\060\uffc8\062\uffc8\064" +
    "\uffc8\065\uffc8\067\uffc8\001\002\000\006\027\052\050\073" +
    "\001\002\000\062\003\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\050\uffc6\052\uffc6\053" +
    "\uffc6\057\uffc6\060\uffc6\062\uffc6\064\uffc6\065\uffc6\067\uffc6" +
    "\001\002\000\006\027\052\050\075\001\002\000\062\003" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\050\uffc7\052\uffc7\053\uffc7\057\uffc7\060\uffc7" +
    "\062\uffc7\064\uffc7\065\uffc7\067\uffc7\001\002\000\020\050" +
    "\107\052\uffb1\053\103\057\uffb1\064\114\065\100\066\105" +
    "\001\002\000\006\052\235\057\236\001\002\000\036\023" +
    "\uffa8\027\uffe8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\046\uffa8\050\uffa8\052\uffa8\057\uffa8\060" +
    "\uffe8\001\002\000\032\023\uffab\037\uffab\040\uffab\041\uffab" +
    "\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\050\uffab\052" +
    "\uffab\057\uffab\001\002\000\032\023\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\050" +
    "\uffae\052\uffae\057\uffae\001\002\000\014\050\214\053\206" +
    "\064\221\065\203\066\213\001\002\000\036\023\uffad\027" +
    "\uffea\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\050\uffad\052\uffad\057\uffad\060\uffea\001" +
    "\002\000\032\023\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9\052\uffa9\057" +
    "\uffa9\001\002\000\036\023\uffac\027\uffe7\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\050" +
    "\uffac\052\uffac\057\uffac\060\uffe7\001\002\000\036\004\120" +
    "\006\140\007\134\010\136\011\141\012\137\013\142\014" +
    "\060\015\064\016\062\017\063\020\065\021\135\064\061" +
    "\001\002\000\036\023\uffaf\027\uffe5\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\050\uffaf" +
    "\052\uffaf\057\uffaf\060\uffe5\001\002\000\032\023\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\050\uffb0\052\uffb0\057\uffb0\001\002\000\006\027" +
    "\052\060\115\001\002\000\006\052\uffb2\057\uffb2\001\002" +
    "\000\036\023\uffaa\027\uffe6\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\050\uffaa\052\uffaa" +
    "\057\uffaa\060\uffe6\001\002\000\004\050\116\001\002\000" +
    "\004\004\120\001\002\000\032\023\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\050" +
    "\uffa6\052\uffa6\057\uffa6\001\002\000\020\031\125\050\127" +
    "\053\030\055\123\063\124\064\131\065\024\001\002\000" +
    "\024\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e" +
    "\036\uff8e\050\uff8e\056\uff8e\001\002\000\024\030\uff92\031" +
    "\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\050\uff92" +
    "\056\uff92\001\002\000\020\031\125\050\127\053\030\055" +
    "\123\063\124\064\131\065\024\001\002\000\024\030\uff91" +
    "\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\050" +
    "\uff91\056\uff91\001\002\000\020\031\125\050\127\053\030" +
    "\055\123\063\124\064\131\065\024\001\002\000\022\030" +
    "\164\031\165\032\161\033\170\034\163\035\166\036\167" +
    "\050\162\001\002\000\034\006\140\007\134\010\136\011" +
    "\141\012\137\013\142\014\060\015\064\016\062\017\063" +
    "\020\065\021\135\064\061\001\002\000\006\027\052\060" +
    "\132\001\002\000\030\027\uffe6\030\uff90\031\uff90\032\uff90" +
    "\033\uff90\034\uff90\035\uff90\036\uff90\050\uff90\056\uff90\060" +
    "\uffe6\001\002\000\004\050\116\001\002\000\024\030\uff8f" +
    "\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\050" +
    "\uff8f\056\uff8f\001\002\000\014\050\107\053\103\064\114" +
    "\065\100\066\105\001\002\000\012\050\053\053\030\064" +
    "\051\065\024\001\002\000\012\050\053\053\030\064\051" +
    "\065\024\001\002\000\012\050\053\053\030\064\051\065" +
    "\024\001\002\000\014\050\107\053\103\064\114\065\100" +
    "\066\105\001\002\000\012\050\053\053\030\064\051\065" +
    "\024\001\002\000\012\050\053\053\030\064\051\065\024" +
    "\001\002\000\006\027\052\050\144\001\002\000\100\003" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\050\uffc3\052\uffc3\053\uffc3\054\uffc3\056\uffc3\057" +
    "\uffc3\062\uffc3\064\uffc3\065\uffc3\067\uffc3\001\002\000\006" +
    "\027\052\050\146\001\002\000\100\003\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\050\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\056\uffcc\057\uffcc\062\uffcc\064" +
    "\uffcc\065\uffcc\067\uffcc\001\002\000\004\050\150\001\002" +
    "\000\100\003\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\050\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\056\uffcf\057\uffcf\062\uffcf\064\uffcf\065\uffcf\067\uffcf\001" +
    "\002\000\006\027\052\050\152\001\002\000\100\003\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\050\uffc4\052\uffc4\053\uffc4\054\uffc4\056\uffc4\057\uffc4" +
    "\062\uffc4\064\uffc4\065\uffc4\067\uffc4\001\002\000\006\027" +
    "\052\050\154\001\002\000\100\003\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\050\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\056\uffcd\057\uffcd\062\uffcd\064\uffcd" +
    "\065\uffcd\067\uffcd\001\002\000\006\027\052\050\156\001" +
    "\002\000\100\003\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\050\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\056\uffc2\057\uffc2\062\uffc2\064\uffc2\065\uffc2\067\uffc2" +
    "\001\002\000\004\050\160\001\002\000\100\003\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\050\uffce\052\uffce\053\uffce\054\uffce\056\uffce\057\uffce\062" +
    "\uffce\064\uffce\065\uffce\067\uffce\001\002\000\020\031\125" +
    "\050\127\053\030\055\123\063\124\064\131\065\024\001" +
    "\002\000\100\003\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\050\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\056\uffd4\057\uffd4\062\uffd4\064\uffd4\065\uffd4\067\uffd4" +
    "\001\002\000\020\031\125\050\127\053\030\055\123\063" +
    "\124\064\131\065\024\001\002\000\020\031\125\050\127" +
    "\053\030\055\123\063\124\064\131\065\024\001\002\000" +
    "\020\031\125\050\127\053\030\055\123\063\124\064\131" +
    "\065\024\001\002\000\020\031\125\050\127\053\030\055" +
    "\123\063\124\064\131\065\024\001\002\000\020\031\125" +
    "\050\127\053\030\055\123\063\124\064\131\065\024\001" +
    "\002\000\020\031\125\050\127\053\030\055\123\063\124" +
    "\064\131\065\024\001\002\000\024\030\uff98\031\uff98\032" +
    "\uff98\033\uff98\034\uff98\035\166\036\167\050\uff98\056\uff98" +
    "\001\002\000\024\030\uff96\031\uff96\032\uff96\033\uff96\034" +
    "\uff96\035\166\036\167\050\uff96\056\uff96\001\002\000\024" +
    "\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035\166\036" +
    "\167\050\uff95\056\uff95\001\002\000\024\030\uff9a\031\uff9a" +
    "\032\161\033\170\034\163\035\166\036\167\050\uff9a\056" +
    "\uff9a\001\002\000\024\030\uff9b\031\uff9b\032\161\033\170" +
    "\034\163\035\166\036\167\050\uff9b\056\uff9b\001\002\000" +
    "\024\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\166" +
    "\036\167\050\uff97\056\uff97\001\002\000\024\030\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\035\166\036\167\050\uff99" +
    "\056\uff99\001\002\000\024\030\uff94\031\uff94\032\161\033" +
    "\170\034\163\035\166\036\167\050\uff94\056\uff94\001\002" +
    "\000\022\030\164\031\165\032\161\033\170\034\163\035" +
    "\166\036\167\056\202\001\002\000\024\030\uff93\031\uff93" +
    "\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\050\uff93\056" +
    "\uff93\001\002\000\004\054\uffde\001\002\000\006\054\uffd6" +
    "\057\uffd6\001\002\000\006\054\uffd5\057\uffd5\001\002\000" +
    "\012\050\214\064\221\065\203\066\213\001\002\000\004" +
    "\054\232\001\002\000\004\054\uffe3\001\002\000\006\054" +
    "\uffe4\057\226\001\002\000\006\054\uffda\057\uffda\001\002" +
    "\000\006\054\uffdc\057\uffdc\001\002\000\024\004\120\006" +
    "\140\007\134\010\136\011\141\012\137\013\142\021\135" +
    "\064\061\001\002\000\006\054\uffdf\057\224\001\002\000" +
    "\006\054\uffd8\057\uffd8\001\002\000\006\054\uffe0\057\222" +
    "\001\002\000\006\054\uffd9\057\uffd9\001\002\000\006\054" +
    "\uffd7\057\uffd7\001\002\000\004\066\223\001\002\000\006" +
    "\054\uffdd\057\uffdd\001\002\000\006\050\214\064\221\001" +
    "\002\000\006\054\uffdb\057\uffdb\001\002\000\004\053\227" +
    "\001\002\000\012\050\214\064\221\065\203\066\213\001" +
    "\002\000\004\054\231\001\002\000\006\054\uffe2\057\uffe2" +
    "\001\002\000\036\023\uffa7\027\uffe9\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\050\uffa7" +
    "\052\uffa7\057\uffa7\060\uffe9\001\002\000\004\054\234\001" +
    "\002\000\006\054\uffe1\057\uffe1\001\002\000\004\050\240" +
    "\001\002\000\014\050\107\053\103\064\114\065\100\066" +
    "\105\001\002\000\006\052\uffb3\057\uffb3\001\002\000\064" +
    "\003\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\050\uffb4\052\uffb4\053\uffb4\054\uffb4\057" +
    "\uffb4\060\uffb4\062\uffb4\064\uffb4\065\uffb4\067\uffb4\001\002" +
    "\000\006\027\052\050\242\001\002\000\062\003\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\050\uffc9\052\uffc9\053\uffc9\057\uffc9\060\uffc9\062\uffc9" +
    "\064\uffc9\065\uffc9\067\uffc9\001\002\000\030\003\uffec\022" +
    "\uffec\024\uffec\025\uffec\026\uffec\050\uffec\053\uffec\062\uffec" +
    "\064\uffec\065\uffec\067\uffec\001\002\000\004\064\245\001" +
    "\002\000\004\047\246\001\002\000\012\050\053\053\030" +
    "\064\051\065\024\001\002\000\006\027\052\050\250\001" +
    "\002\000\030\003\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\050\uffeb\053\uffeb\062\uffeb\064\uffeb\065\uffeb\067\uffeb\001" +
    "\002\000\030\003\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\050\ufff7\053\ufff7\062\ufff7\064\ufff7\065\ufff7\067\ufff7\001" +
    "\002\000\010\002\ufffc\064\ufffc\067\ufffc\001\002\000\004" +
    "\054\254\001\002\000\062\003\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\050\uffe9\052" +
    "\uffe9\053\uffe9\057\uffe9\060\uffe9\062\uffe9\064\uffe9\065\uffe9" +
    "\067\uffe9\001\002\000\010\023\270\037\271\040\267\001" +
    "\002\000\016\041\264\042\262\043\261\044\263\045\265" +
    "\046\260\001\002\000\014\050\107\053\103\064\114\065" +
    "\100\066\105\001\002\000\014\050\uff9d\053\uff9d\064\uff9d" +
    "\065\uff9d\066\uff9d\001\002\000\014\050\uffa1\053\uffa1\064" +
    "\uffa1\065\uffa1\066\uffa1\001\002\000\014\050\uff9e\053\uff9e" +
    "\064\uff9e\065\uff9e\066\uff9e\001\002\000\014\050\uffa0\053" +
    "\uffa0\064\uffa0\065\uffa0\066\uffa0\001\002\000\014\050\uff9f" +
    "\053\uff9f\064\uff9f\065\uff9f\066\uff9f\001\002\000\014\050" +
    "\uff9c\053\uff9c\064\uff9c\065\uff9c\066\uff9c\001\002\000\010" +
    "\023\uffa2\037\uffa2\040\uffa2\001\002\000\014\050\107\053" +
    "\103\064\114\065\100\066\105\001\002\000\022\003\041" +
    "\022\026\026\021\050\036\053\030\064\051\065\024\067" +
    "\045\001\002\000\014\050\107\053\103\064\114\065\100" +
    "\066\105\001\002\000\010\023\uffa4\037\uffa4\040\267\001" +
    "\002\000\024\003\041\022\026\024\274\026\021\050\036" +
    "\053\030\064\051\065\024\067\045\001\002\000\022\003" +
    "\041\022\026\026\021\050\036\053\030\064\051\065\024" +
    "\067\045\001\002\000\024\003\041\022\026\025\276\026" +
    "\021\050\036\053\030\064\051\065\024\067\045\001\002" +
    "\000\030\003\uffc1\022\uffc1\024\uffc1\025\uffc1\026\uffc1\050" +
    "\uffc1\053\uffc1\062\uffc1\064\uffc1\065\uffc1\067\uffc1\001\002" +
    "\000\010\023\uffa3\037\uffa3\040\uffa3\001\002\000\004\067" +
    "\uffb6\001\002\000\004\067\uffb7\001\002\000\006\027\052" +
    "\060\324\001\002\000\010\027\uffe6\060\uffe6\067\uffb8\001" +
    "\002\000\004\067\307\001\002\000\010\027\uffe5\060\uffe5" +
    "\067\uffb9\001\002\000\004\067\uffba\001\002\000\006\063" +
    "\310\066\314\001\002\000\004\061\uffbc\001\002\000\004" +
    "\061\321\001\002\000\010\025\316\063\310\066\314\001" +
    "\002\000\004\067\315\001\002\000\004\061\uffbb\001\002" +
    "\000\010\025\uffbe\063\uffbe\066\uffbe\001\002\000\030\003" +
    "\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0\050\uffc0\053\uffc0" +
    "\062\uffc0\064\uffc0\065\uffc0\067\uffc0\001\002\000\004\067" +
    "\320\001\002\000\010\025\uffbf\063\uffbf\066\uffbf\001\002" +
    "\000\022\003\041\022\026\026\021\050\036\053\030\064" +
    "\051\065\024\067\045\001\002\000\024\003\041\022\026" +
    "\026\021\050\036\053\030\062\323\064\051\065\024\067" +
    "\045\001\002\000\004\067\uffbd\001\002\000\004\050\116" +
    "\001\002\000\004\067\uffb5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\002\004\046\003\001\001\000\006\027" +
    "\007\030\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\014\001\001\000\004\030\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\026\004\030\005" +
    "\045\006\042\007\036\010\043\011\046\012\031\013\021" +
    "\015\041\016\033\017\037\020\047\031\032\037\022\041" +
    "\034\042\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\305\006\042\007\036\010\043\011\046\012" +
    "\056\015\304\020\301\025\303\037\300\041\055\042\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\110\006\042\007\036" +
    "\010\043\011\046\012\103\015\107\020\111\033\254\036" +
    "\255\037\100\041\105\042\101\001\001\000\002\001\001" +
    "\000\036\005\217\006\042\007\036\010\043\011\046\015" +
    "\215\021\252\022\210\023\207\024\216\037\203\042\204" +
    "\043\214\044\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\026\004\250\005\045\006\042\007\036" +
    "\010\043\011\046\012\031\013\021\015\041\016\033\017" +
    "\037\020\047\037\022\041\034\042\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\056\015\054\020\053\041\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\056\015" +
    "\054\020\240\041\055\001\001\000\002\001\001\000\012" +
    "\012\056\015\054\020\073\041\055\001\001\000\012\012" +
    "\056\015\054\020\071\041\055\001\001\000\012\012\056" +
    "\015\054\020\067\041\055\001\001\000\012\012\056\015" +
    "\054\020\065\041\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\005\110\006\042\007\036\010\043\011\046\012" +
    "\103\015\107\020\111\026\076\036\112\037\100\041\105" +
    "\042\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\217\006\042" +
    "\007\036\010\043\011\046\015\215\021\206\022\210\023" +
    "\207\024\216\037\203\042\204\043\214\044\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\042\007\036\010\043\011\046\012\056\014\125\015" +
    "\054\020\127\037\120\041\055\042\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\042\007\036\010" +
    "\043\011\046\012\056\014\200\015\054\020\127\037\120" +
    "\041\055\042\121\001\001\000\002\001\001\000\030\006" +
    "\042\007\036\010\043\011\046\012\056\014\177\015\054" +
    "\020\127\037\120\041\055\042\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\132\001\001\000\002\001\001\000\032\005" +
    "\110\006\042\007\036\010\043\011\046\012\103\015\107" +
    "\020\111\036\156\037\100\041\105\042\101\001\001\000" +
    "\012\012\056\015\054\020\154\041\055\001\001\000\012" +
    "\012\056\015\054\020\152\041\055\001\001\000\012\012" +
    "\056\015\054\020\150\041\055\001\001\000\032\005\110" +
    "\006\042\007\036\010\043\011\046\012\103\015\107\020" +
    "\111\036\146\037\100\041\105\042\101\001\001\000\012" +
    "\012\056\015\054\020\144\041\055\001\001\000\012\012" +
    "\056\015\054\020\142\041\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\042\007\036\010\043\011\046\012\056\014" +
    "\176\015\054\020\127\037\120\041\055\042\121\001\001" +
    "\000\002\001\001\000\030\006\042\007\036\010\043\011" +
    "\046\012\056\014\175\015\054\020\127\037\120\041\055" +
    "\042\121\001\001\000\030\006\042\007\036\010\043\011" +
    "\046\012\056\014\174\015\054\020\127\037\120\041\055" +
    "\042\121\001\001\000\030\006\042\007\036\010\043\011" +
    "\046\012\056\014\173\015\054\020\127\037\120\041\055" +
    "\042\121\001\001\000\030\006\042\007\036\010\043\011" +
    "\046\012\056\014\172\015\054\020\127\037\120\041\055" +
    "\042\121\001\001\000\030\006\042\007\036\010\043\011" +
    "\046\012\056\014\171\015\054\020\127\037\120\041\055" +
    "\042\121\001\001\000\030\006\042\007\036\010\043\011" +
    "\046\012\056\014\170\015\054\020\127\037\120\041\055" +
    "\042\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\217\006\042\007\036\010" +
    "\043\011\046\015\215\023\232\024\216\037\203\042\204" +
    "\043\214\044\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\217\006\042\007" +
    "\036\010\043\011\046\015\215\037\203\042\204\044\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\217\006\042\007\036\010\043\011\046\015\215\023\227" +
    "\024\216\037\203\042\204\043\214\044\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\110\006\042\007\036\010\043\011\046\012\103\015\107" +
    "\020\111\036\236\037\100\041\105\042\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\056\015\054\020\246\041\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\256\001\001\000\032\005\110\006" +
    "\042\007\036\010\043\011\046\012\103\015\107\020\111" +
    "\036\265\037\100\041\105\042\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\110\006\042\007\036\010\043\011\046\012\103" +
    "\015\107\020\111\033\276\036\255\037\100\041\105\042" +
    "\101\001\001\000\044\003\026\004\030\005\045\006\042" +
    "\007\036\010\043\011\046\012\031\013\021\015\041\016" +
    "\033\017\037\020\047\031\272\037\022\041\034\042\024" +
    "\001\001\000\034\005\110\006\042\007\036\010\043\011" +
    "\046\012\103\015\107\020\111\033\271\036\255\037\100" +
    "\041\105\042\101\001\001\000\002\001\001\000\042\003" +
    "\026\004\250\005\045\006\042\007\036\010\043\011\046" +
    "\012\031\013\021\015\041\016\033\017\037\020\047\037" +
    "\022\041\034\042\024\001\001\000\044\003\026\004\030" +
    "\005\045\006\042\007\036\010\043\011\046\012\031\013" +
    "\021\015\041\016\033\017\037\020\047\031\274\037\022" +
    "\041\034\042\024\001\001\000\042\003\026\004\250\005" +
    "\045\006\042\007\036\010\043\011\046\012\031\013\021" +
    "\015\041\016\033\017\037\020\047\037\022\041\034\042" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\311\035\312\040\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\316\040\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\026\004\030\005\045\006\042\007\036\010\043\011" +
    "\046\012\031\013\021\015\041\016\033\017\037\020\047" +
    "\031\321\037\022\041\034\042\024\001\001\000\042\003" +
    "\026\004\250\005\045\006\042\007\036\010\043\011\046" +
    "\012\031\013\021\015\041\016\033\017\037\020\047\037" +
    "\022\041\034\042\024\001\001\000\002\001\001\000\004" +
    "\005\324\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoHaskell$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoHaskell$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoHaskell$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz = new Nodo(); 
    public void syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", s.value.toString() + " no debe de ir en esa posicion", s.right, s.left);
    }

    public void unrecovered_syntax_error(Symbol s)
    {
        ErroresHaskell.agregarError("Error sintactico", "No se pudo recuperar de: " + s.value.toString(), s.right, s.left);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoHaskell$actions {




  private final SintacticoHaskell parser;

  /** Constructor */
  CUP$SintacticoHaskell$actions(SintacticoHaskell parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoHaskell$do_action_part00000000(
    int                        CUP$SintacticoHaskell$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHaskell$parser,
    java.util.Stack            CUP$SintacticoHaskell$stack,
    int                        CUP$SintacticoHaskell$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoHaskell$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoHaskell$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoHaskell$parser.done_parsing();
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
System.out.println("inicio");
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 LFUNCION 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int LFUNleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int LFUNright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo LFUN = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 raiz = LFUN; System.out.println("FINALIZO"); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LFUNCION ::= LFUNCION FUN 
            {
              Nodo RESULT =null;
		int LFUNCIONleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LFUNCIONright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LFUNCION = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int FUNleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int FUNright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo FUN = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		
                        if(FUN != null)
                            LFUNCION.hijos.add(FUN);
                        RESULT = (Nodo) LFUNCION;
                    
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LFUNCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LFUNCION ::= FUN 
            {
              Nodo RESULT =null;
		int FUNleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int FUNright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo FUN = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		
                        RESULT = new Nodo(Const.ldecfun);
                        if(FUN != null) 
                            RESULT = NodoGeneral.crearLdecfun(FUN);
                    
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LFUNCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUN ::= iden LPAR igual LCUERPO _end 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)).value;
		int LPARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).left;
		int LPARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).right;
		Nodo LPAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).value;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearFuncion(id, LPAR, LCUERPO); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("FUN",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUN ::= enter 
            {
              Nodo RESULT =null;
		 RESULT = null; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("FUN",22, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LPAR ::= LPAR coma iden 
            {
              Nodo RESULT =null;
		int LPARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int LPARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo LPAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		
                        Nodo par = new Nodo(iden);
                        LPAR.hijos.add(par);
                        RESULT = (Nodo) LPAR;
                    
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LPAR",24, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LPAR ::= iden 
            {
              Nodo RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		
                        Nodo par = new Nodo(iden);
                        RESULT = new Nodo(Const.lpar);
                        RESULT.hijos.add(par);
                    
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LPAR",24, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LPAR ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.lpar); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LPAR",24, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LCUERPO ::= LCUERPO CUERPO 
            {
              Nodo RESULT =null;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		
                        if(CUERPO != null)
                            LCUERPO.hijos.add(CUERPO);
                        RESULT = (Nodo) LCUERPO;
                    
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCUERPO",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LCUERPO ::= CUERPO 
            {
              Nodo RESULT =null;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 
                        RESULT = new Nodo(Const.lcuerpo);
                        if(CUERPO != null)
                            RESULT = NodoGeneral.crearCuerpo(CUERPO);
                    
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCUERPO",23, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= LIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= CALCULAR 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= OPSIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= CONCATLISTAS 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= OPLIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= IF 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= CASE 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO ::= LLAMADO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO ::= enter 
            {
              Nodo RESULT =null;
		 RESULT = null; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO ::= error enter 
            {
              Nodo RESULT =null;

              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LIST ::= dolar let iden igual LISTA dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).value;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearLista(id, LISTA); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LIST",1, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA ::= CONCATLISTAS 
            {
              Nodo RESULT =null;
		int CONCATleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int CONCATright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo CONCAT = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = CONCAT; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA ::= acorchete L ccorchete 
            {
              Nodo RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = L; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA ::= cadena 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.cadena, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA ::= OPLISTA 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L ::= LCORCHETES 
            {
              Nodo RESULT =null;
		int LCORCHETESleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int LCORCHETESright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo LCORCHETES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = LCORCHETES; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("L",15, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L ::= LVAL 
            {
              Nodo RESULT =null;
		int LVALleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int LVALright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo LVAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = LVAL; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("L",15, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LCORCHETES ::= LCORCHETES coma acorchete LVAL ccorchete 
            {
              Nodo RESULT =null;
		int LCORCHETESleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)).left;
		int LCORCHETESright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)).right;
		Nodo LCORCHETES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)).value;
		int LVALleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LVALright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LVAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		
                        LCORCHETES.hijos.add(LVAL);
                        RESULT = (Nodo) LCORCHETES;
                    
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCORCHETES",16, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LCORCHETES ::= acorchete LVAL ccorchete 
            {
              Nodo RESULT =null;
		int LVALleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LVALright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LVAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearLcorchetes(LVAL); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCORCHETES",16, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LVAL ::= LCAR 
            {
              Nodo RESULT =null;
		int LCARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int LCARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo LCAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = LCAR; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LVAL",17, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LVAL ::= LEXP 
            {
              Nodo RESULT =null;
		int LEXPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int LEXPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo LEXP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = LEXP; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LVAL",17, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LVAL ::= cadena 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.cadena, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LVAL",17, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LCAR ::= LCAR coma caracter 
            {
              Nodo RESULT =null;
		int LCARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int LCARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo LCAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		
                        LCAR.hijos.add(NodoGeneral.crearHoja(Const.caracter, t1));
                        RESULT = (Nodo) LCAR;
                    
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCAR",18, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LCAR ::= caracter 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearLista(NodoGeneral.crearHoja(Const.caracter, t1)); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCAR",18, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LEXP ::= LEXP coma EXP 
            {
              Nodo RESULT =null;
		int LEXPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int LEXPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo LEXP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		
                        LEXP.hijos.add(t1);
                        RESULT = (Nodo) LEXP;
                    
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LEXP",33, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LEXP ::= EXP 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearLista(t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LEXP",33, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= OPSIST 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CALCULAR ::= dolar calcular E dolar 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CALCULAR",3, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPSIST ::= SUCC 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPSIST",32, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPSIST ::= DECC 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPSIST",32, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPSIST ::= MIN 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPSIST",32, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPSIST ::= MAX 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPSIST",32, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SUCC ::= dolar succ VALOR dolar 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearSucc(VALOR); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SUCC",4, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECC ::= dolar decc VALOR dolar 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearDecc(VALOR); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DECC",5, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MIN ::= dolar min LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearMin(LISTA); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MIN",6, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MAX ::= dolar max LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearMax(LISTA); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MAX",7, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPLIST ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLIST",9, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPLIST ::= OPLISTA 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLIST",9, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPLISTA ::= dolar revers LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearRevers(LISTA); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLISTA",31, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPLISTA ::= dolar impr LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearImpr(LISTA); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLISTA",31, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPLISTA ::= dolar par LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearPar(LISTA); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLISTA",31, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPLISTA ::= dolar asc LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearAsc(LISTA); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLISTA",31, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPLISTA ::= dolar desc LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearDesc(LISTA); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPLISTA",31, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPEXP ::= dolar sum LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearSum(LISTA); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPEXP",29, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPEXP ::= dolar product LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearProduct(LISTA); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPEXP",29, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPEXP ::= dolar length LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearLength(LISTA); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPEXP",29, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IF ::= _if COND _then LCUERPO _else LCUERPO _end 
            {
              Nodo RESULT =null;
		int CONDleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-5)).left;
		int CONDright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-5)).right;
		Nodo COND = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-5)).value;
		int LCUERPOVleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).left;
		int LCUERPOVright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).right;
		Nodo LCUERPOV = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).value;
		int LCUERPOFleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LCUERPOFright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LCUERPOF = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearIf(COND, LCUERPOV, LCUERPOF); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("IF",12, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASE ::= _case VALCASE enter LCASOS _end 
            {
              Nodo RESULT =null;
		int VALCASEleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).left;
		int VALCASEright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).right;
		Nodo VALCASE = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).value;
		int LCASOSleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LCASOSright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LCASOS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearCase(VALCASE, LCASOS); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LCASOS ::= LCASOS CASO enter 
            {
              Nodo RESULT =null;
		int LCASOSleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int LCASOSright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo LCASOS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int CASOSleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int CASOSright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo CASOS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		
                        LCASOS.hijos.add(CASOS);
                        RESULT = (Nodo) LCASOS;
                    
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCASOS",26, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LCASOS ::= CASO enter 
            {
              Nodo RESULT =null;
		int CASOleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int CASOright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo CASO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearLcasos(CASO); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LCASOS",26, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CASO ::= VALCASO dospuntos LCUERPO puntoycoma 
            {
              Nodo RESULT =null;
		int VALCASOleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).left;
		int VALCASOright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).right;
		Nodo VALCASO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)).value;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = NodoGeneral.crearCaso(VALCASO, LCUERPO);
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CASO",27, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALCASO ::= numero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.numero, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALCASO",30, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALCASO ::= caracter 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.caracter, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALCASO",30, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALCASE ::= CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALCASE",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALCASE ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALCASE",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALCASE ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALCASE",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALCASE ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALCASE",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALCASE ::= OPSIST 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALCASE",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALCASE ::= LISTA poslista CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int CALCULARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int CALCULARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo CALCULAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearPosLista(t1, CALCULAR); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALCASE",19, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LLAMADO ::= dolar iden allave LVALOR cllave dolar 
            {
              Nodo RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-4)).value;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		 RESULT = NodoGeneral.crearLlamado(iden, LVALOR); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LLAMADO",11, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LVALOR ::= LVALOR coma VALOR 
            {
              Nodo RESULT =null;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		
                        LVALOR.hijos.add(VALOR);
                        RESULT = (Nodo) LVALOR;
                    
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LVALOR",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LVALOR ::= VALOR 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearLvalor(VALOR); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LVALOR",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LVALOR ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.lvalor); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LVALOR",20, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALOR ::= CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALOR ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALOR ::= OPSIST 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALOR ::= CONCATLISTAS 
            {
              Nodo RESULT =null;
		int CONCATleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int CONCATright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo CONCAT = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = CONCAT; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALOR ::= OPLISTA 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALOR ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALOR ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALOR ::= caracter 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.caracter, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALOR ::= cadena 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.cadena, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALOR ::= acorchete L ccorchete 
            {
              Nodo RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = L; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALOR ::= LISTA poslista CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int CALCULARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int CALCULARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo CALCULAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearPosLista(t1, CALCULAR); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONCATLISTAS ::= LISTA masmas LISTA 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.masmas, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CONCATLISTAS",8, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COND ::= COND or COND 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.or, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("COND",25, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COND ::= COND and COND 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.and, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("COND",25, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COND ::= VALOR OPREL VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearRelacional(op, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("COND",25, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPREL ::= menor 
            {
              String RESULT =null;
		 RESULT = Const.menor; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPREL ::= mayor 
            {
              String RESULT =null;
		 RESULT = Const.mayor; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPREL ::= menorigual 
            {
              String RESULT =null;
		 RESULT = Const.menorigual; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPREL ::= mayorigual 
            {
              String RESULT =null;
		 RESULT = Const.mayorigual; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPREL ::= igualigual 
            {
              String RESULT =null;
		 RESULT = Const.igualigual; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPREL ::= diferente 
            {
              String RESULT =null;
		 RESULT = Const.diferente; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= E mas E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mas, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= E menos E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.menos, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= E por E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.por, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= E dividido E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.dividido, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= E mod E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mod, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E pot E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.pot, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= E sqrt E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.sqrt, t1, t2); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= menos E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.unario, t1, null); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= aparentesis E cparentesis 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= OPSIST 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= numero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.numero, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= LISTA poslista CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)).value;
		int CALCULARleft = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int CALCULARright = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo CALCULAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = NodoGeneral.crearPosLista(t1, CALCULAR); 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.elementAt(CUP$SintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= OPEXP 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHaskell$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoHaskell$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$SintacticoHaskell$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoHaskell$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoHaskell$do_action(
    int                        CUP$SintacticoHaskell$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHaskell$parser,
    java.util.Stack            CUP$SintacticoHaskell$stack,
    int                        CUP$SintacticoHaskell$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoHaskell$do_action_part00000000(
                               CUP$SintacticoHaskell$act_num,
                               CUP$SintacticoHaskell$parser,
                               CUP$SintacticoHaskell$stack,
                               CUP$SintacticoHaskell$top);
    }
}

}
