
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.graphik;

import java_cup.runtime.Symbol;
import Reportes.*;
import fabrica.*;
import ide.Const;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoGraphik extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symsG.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoGraphik() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoGraphik(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoGraphik(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\046\002\000\002\002" +
    "\004\000\002\027\004\000\002\027\003\000\002\030\007" +
    "\000\002\030\003\000\002\032\005\000\002\032\003\000" +
    "\002\032\002\000\002\031\004\000\002\031\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\003\010\000\002\020\003\000\002\020\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\007" +
    "\000\002\022\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\024\005\000\002\024\003\000\002" +
    "\043\005\000\002\043\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\005\006\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\006\006\000\002" +
    "\007\006\000\002\010\006\000\002\011\006\000\002\013" +
    "\003\000\002\013\003\000\002\041\006\000\002\041\006" +
    "\000\002\041\006\000\002\041\006\000\002\041\006\000" +
    "\002\037\006\000\002\037\006\000\002\037\006\000\002" +
    "\016\011\000\002\017\007\000\002\034\005\000\002\034" +
    "\004\000\002\035\006\000\002\040\003\000\002\040\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\005\000\002" +
    "\015\010\000\002\026\005\000\002\026\003\000\002\026" +
    "\002\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\005\000\002\036\005\000\002\012\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\004" +
    "\000\002\014\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\005\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\065\000\070\000\001\002\000\006\065" +
    "\010\070\012\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\010\002\ufffd\065\ufffd\070\ufffd\001" +
    "\002\000\010\050\ufff8\060\ufff8\065\014\001\002\000\010" +
    "\002\uffff\065\010\070\012\001\002\000\010\002\ufffb\065" +
    "\ufffb\070\ufffb\001\002\000\010\002\ufffe\065\ufffe\070\ufffe" +
    "\001\002\000\006\050\ufff9\060\ufff9\001\002\000\006\050" +
    "\016\060\017\001\002\000\022\003\041\022\026\026\021" +
    "\051\036\054\030\065\051\066\024\070\045\001\002\000" +
    "\004\065\020\001\002\000\006\050\ufffa\060\ufffa\001\002" +
    "\000\012\051\107\054\030\065\303\066\024\001\002\000" +
    "\030\003\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\051\ufff1" +
    "\054\ufff1\063\ufff1\065\ufff1\066\ufff1\070\ufff1\001\002\000" +
    "\030\003\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\051\uffcb" +
    "\054\uffcb\063\uffcb\065\uffcb\066\uffcb\070\uffcb\001\002\000" +
    "\062\003\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\046\uffe8\047\uffe8\051\uffe8\053\uffe8\054\uffe8\060\uffe8" +
    "\061\uffe8\063\uffe8\065\uffe8\066\uffe8\070\uffe8\001\002\000" +
    "\030\003\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\051\ufff3" +
    "\054\ufff3\063\ufff3\065\ufff3\066\ufff3\070\ufff3\001\002\000" +
    "\014\051\107\054\103\065\114\066\100\067\105\001\002" +
    "\000\030\003\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\051" +
    "\ufff5\054\ufff5\063\ufff5\065\ufff5\066\ufff5\070\ufff5\001\002" +
    "\000\014\051\214\054\206\065\221\066\203\067\213\001" +
    "\002\000\030\003\ufff6\022\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\051\ufff6\054\ufff6\063\ufff6\065\ufff6\066\ufff6\070\ufff6\001" +
    "\002\000\032\003\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\uffea\051\ufff2\054\ufff2\063\ufff2\065\ufff2\066\ufff2\070" +
    "\ufff2\001\002\000\024\003\041\022\026\025\252\026\021" +
    "\051\036\054\030\065\051\066\024\070\045\001\002\000" +
    "\030\003\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\051\ufff0" +
    "\054\ufff0\063\ufff0\065\ufff0\066\ufff0\070\ufff0\001\002\000" +
    "\032\003\uffca\022\uffca\024\uffca\025\uffca\026\uffca\027\uffe7" +
    "\051\uffca\054\uffca\063\uffca\065\uffca\066\uffca\070\uffca\001" +
    "\002\000\040\004\120\005\244\006\140\007\134\010\136" +
    "\011\141\012\137\013\142\014\060\015\064\016\062\017" +
    "\063\020\065\021\135\065\061\001\002\000\100\003\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\051\uffd2\053\uffd2\054\uffd2\055\uffd2\057\uffd2\060\uffd2" +
    "\063\uffd2\065\uffd2\066\uffd2\070\uffd2\001\002\000\030\003" +
    "\uffef\022\uffef\024\uffef\025\uffef\026\uffef\051\uffef\054\uffef" +
    "\063\uffef\065\uffef\066\uffef\070\uffef\001\002\000\004\070" +
    "\243\001\002\000\032\003\uffee\022\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffe5\051\uffee\054\uffee\063\uffee\065\uffee\066" +
    "\uffee\070\uffee\001\002\000\100\003\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\057\uffd3\060\uffd3\063\uffd3\065\uffd3" +
    "\066\uffd3\070\uffd3\001\002\000\100\003\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\051\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\057\uffd1\060\uffd1\063\uffd1\065" +
    "\uffd1\066\uffd1\070\uffd1\001\002\000\030\003\uffed\022\uffed" +
    "\024\uffed\025\uffed\026\uffed\051\uffed\054\uffed\063\uffed\065" +
    "\uffed\066\uffed\070\uffed\001\002\000\030\003\ufff4\022\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\051\ufff4\054\ufff4\063\ufff4\065" +
    "\ufff4\066\ufff4\070\ufff4\001\002\000\100\003\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\051" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\057\uffd0\060\uffd0\063\uffd0" +
    "\065\uffd0\066\uffd0\070\uffd0\001\002\000\004\027\052\001" +
    "\002\000\062\003\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\051\uffe6\053\uffe6\054\uffe6" +
    "\060\uffe6\061\uffe6\063\uffe6\065\uffe6\066\uffe6\070\uffe6\001" +
    "\002\000\012\051\053\054\030\065\051\066\024\001\002" +
    "\000\016\014\060\015\064\016\062\017\063\020\065\065" +
    "\061\001\002\000\062\003\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\051\uffa5\053\uffa5" +
    "\054\uffa5\060\uffa5\061\uffa5\063\uffa5\065\uffa5\066\uffa5\070" +
    "\uffa5\001\002\000\062\003\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5\053\uffe5" +
    "\054\uffe5\060\uffe5\061\uffe5\063\uffe5\065\uffe5\066\uffe5\070" +
    "\uffe5\001\002\000\062\003\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\040\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7\053\uffe7" +
    "\054\uffe7\060\uffe7\061\uffe7\063\uffe7\065\uffe7\066\uffe7\070" +
    "\uffe7\001\002\000\062\003\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\051\uffea\053\uffea" +
    "\054\uffea\060\uffea\061\uffea\063\uffea\065\uffea\066\uffea\070" +
    "\uffea\001\002\000\012\051\053\054\030\065\051\066\024" +
    "\001\002\000\004\052\076\001\002\000\012\051\053\054" +
    "\030\065\051\066\024\001\002\000\012\051\053\054\030" +
    "\065\051\066\024\001\002\000\012\051\053\054\030\065" +
    "\051\066\024\001\002\000\012\051\053\054\030\065\051" +
    "\066\024\001\002\000\006\027\052\051\067\001\002\000" +
    "\062\003\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\051\uffc5\053\uffc5\054\uffc5\060\uffc5" +
    "\061\uffc5\063\uffc5\065\uffc5\066\uffc5\070\uffc5\001\002\000" +
    "\006\027\052\051\071\001\002\000\062\003\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\051\uffc8\053\uffc8\054\uffc8\060\uffc8\061\uffc8\063\uffc8\065" +
    "\uffc8\066\uffc8\070\uffc8\001\002\000\006\027\052\051\073" +
    "\001\002\000\062\003\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6\053\uffc6\054" +
    "\uffc6\060\uffc6\061\uffc6\063\uffc6\065\uffc6\066\uffc6\070\uffc6" +
    "\001\002\000\006\027\052\051\075\001\002\000\062\003" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\051\uffc7\053\uffc7\054\uffc7\060\uffc7\061\uffc7" +
    "\063\uffc7\065\uffc7\066\uffc7\070\uffc7\001\002\000\020\051" +
    "\107\053\uffb1\054\103\060\uffb1\065\114\066\100\067\105" +
    "\001\002\000\006\053\235\060\236\001\002\000\036\023" +
    "\uffa8\027\uffe8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\051\uffa8\053\uffa8\060\uffa8\061" +
    "\uffe8\001\002\000\032\023\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\051\uffab\053" +
    "\uffab\060\uffab\001\002\000\032\023\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\051" +
    "\uffae\053\uffae\060\uffae\001\002\000\014\051\214\054\206" +
    "\065\221\066\203\067\213\001\002\000\036\023\uffad\027" +
    "\uffea\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\051\uffad\053\uffad\060\uffad\061\uffea\001" +
    "\002\000\032\023\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\051\uffa9\053\uffa9\060" +
    "\uffa9\001\002\000\036\023\uffac\027\uffe7\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\051" +
    "\uffac\053\uffac\060\uffac\061\uffe7\001\002\000\036\004\120" +
    "\006\140\007\134\010\136\011\141\012\137\013\142\014" +
    "\060\015\064\016\062\017\063\020\065\021\135\065\061" +
    "\001\002\000\036\023\uffaf\027\uffe5\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\051\uffaf" +
    "\053\uffaf\060\uffaf\061\uffe5\001\002\000\032\023\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\051\uffb0\053\uffb0\060\uffb0\001\002\000\006\027" +
    "\052\061\115\001\002\000\006\053\uffb2\060\uffb2\001\002" +
    "\000\036\023\uffaa\027\uffe6\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\051\uffaa\053\uffaa" +
    "\060\uffaa\061\uffe6\001\002\000\004\051\116\001\002\000" +
    "\004\004\120\001\002\000\032\023\uffa6\040\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\051" +
    "\uffa6\053\uffa6\060\uffa6\001\002\000\020\032\125\051\127" +
    "\054\030\056\123\064\124\065\131\066\024\001\002\000" +
    "\024\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e" +
    "\037\uff8e\051\uff8e\057\uff8e\001\002\000\024\031\uff92\032" +
    "\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\051\uff92" +
    "\057\uff92\001\002\000\020\032\125\051\127\054\030\056" +
    "\123\064\124\065\131\066\024\001\002\000\024\031\uff91" +
    "\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\051" +
    "\uff91\057\uff91\001\002\000\020\032\125\051\127\054\030" +
    "\056\123\064\124\065\131\066\024\001\002\000\022\031" +
    "\164\032\165\033\161\034\170\035\163\036\166\037\167" +
    "\051\162\001\002\000\034\006\140\007\134\010\136\011" +
    "\141\012\137\013\142\014\060\015\064\016\062\017\063" +
    "\020\065\021\135\065\061\001\002\000\006\027\052\061" +
    "\132\001\002\000\030\027\uffe6\031\uff90\032\uff90\033\uff90" +
    "\034\uff90\035\uff90\036\uff90\037\uff90\051\uff90\057\uff90\061" +
    "\uffe6\001\002\000\004\051\116\001\002\000\024\031\uff8f" +
    "\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\051" +
    "\uff8f\057\uff8f\001\002\000\014\051\107\054\103\065\114" +
    "\066\100\067\105\001\002\000\012\051\053\054\030\065" +
    "\051\066\024\001\002\000\012\051\053\054\030\065\051" +
    "\066\024\001\002\000\012\051\053\054\030\065\051\066" +
    "\024\001\002\000\014\051\107\054\103\065\114\066\100" +
    "\067\105\001\002\000\012\051\053\054\030\065\051\066" +
    "\024\001\002\000\012\051\053\054\030\065\051\066\024" +
    "\001\002\000\006\027\052\051\144\001\002\000\100\003" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\051\uffc3\053\uffc3\054\uffc3\055\uffc3\057\uffc3\060" +
    "\uffc3\063\uffc3\065\uffc3\066\uffc3\070\uffc3\001\002\000\006" +
    "\027\052\051\146\001\002\000\100\003\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\057\uffcc\060\uffcc\063\uffcc\065" +
    "\uffcc\066\uffcc\070\uffcc\001\002\000\004\051\150\001\002" +
    "\000\100\003\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\051\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\057\uffcf\060\uffcf\063\uffcf\065\uffcf\066\uffcf\070\uffcf\001" +
    "\002\000\006\027\052\051\152\001\002\000\100\003\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\051\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4" +
    "\063\uffc4\065\uffc4\066\uffc4\070\uffc4\001\002\000\006\027" +
    "\052\051\154\001\002\000\100\003\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\057\uffcd\060\uffcd\063\uffcd\065\uffcd" +
    "\066\uffcd\070\uffcd\001\002\000\006\027\052\051\156\001" +
    "\002\000\100\003\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\051\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\057\uffc2\060\uffc2\063\uffc2\065\uffc2\066\uffc2\070\uffc2" +
    "\001\002\000\004\051\160\001\002\000\100\003\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\051\uffce\053\uffce\054\uffce\055\uffce\057\uffce\060\uffce\063" +
    "\uffce\065\uffce\066\uffce\070\uffce\001\002\000\020\032\125" +
    "\051\127\054\030\056\123\064\124\065\131\066\024\001" +
    "\002\000\100\003\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\051\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\057\uffd4\060\uffd4\063\uffd4\065\uffd4\066\uffd4\070\uffd4" +
    "\001\002\000\020\032\125\051\127\054\030\056\123\064" +
    "\124\065\131\066\024\001\002\000\020\032\125\051\127" +
    "\054\030\056\123\064\124\065\131\066\024\001\002\000" +
    "\020\032\125\051\127\054\030\056\123\064\124\065\131" +
    "\066\024\001\002\000\020\032\125\051\127\054\030\056" +
    "\123\064\124\065\131\066\024\001\002\000\020\032\125" +
    "\051\127\054\030\056\123\064\124\065\131\066\024\001" +
    "\002\000\020\032\125\051\127\054\030\056\123\064\124" +
    "\065\131\066\024\001\002\000\024\031\uff98\032\uff98\033" +
    "\uff98\034\uff98\035\uff98\036\166\037\167\051\uff98\057\uff98" +
    "\001\002\000\024\031\uff96\032\uff96\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\051\uff96\057\uff96\001\002\000\024" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\051\uff95\057\uff95\001\002\000\024\031\uff9a\032\uff9a" +
    "\033\161\034\170\035\163\036\166\037\167\051\uff9a\057" +
    "\uff9a\001\002\000\024\031\uff9b\032\uff9b\033\161\034\170" +
    "\035\163\036\166\037\167\051\uff9b\057\uff9b\001\002\000" +
    "\024\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\166" +
    "\037\167\051\uff97\057\uff97\001\002\000\024\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\166\037\167\051\uff99" +
    "\057\uff99\001\002\000\024\031\uff94\032\uff94\033\161\034" +
    "\170\035\163\036\166\037\167\051\uff94\057\uff94\001\002" +
    "\000\022\031\164\032\165\033\161\034\170\035\163\036" +
    "\166\037\167\057\202\001\002\000\024\031\uff93\032\uff93" +
    "\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\051\uff93\057" +
    "\uff93\001\002\000\004\055\uffde\001\002\000\006\055\uffd6" +
    "\060\uffd6\001\002\000\006\055\uffd5\060\uffd5\001\002\000" +
    "\012\051\214\065\221\066\203\067\213\001\002\000\004" +
    "\055\232\001\002\000\004\055\uffe3\001\002\000\006\055" +
    "\uffe4\060\226\001\002\000\006\055\uffda\060\uffda\001\002" +
    "\000\006\055\uffdc\060\uffdc\001\002\000\024\004\120\006" +
    "\140\007\134\010\136\011\141\012\137\013\142\021\135" +
    "\065\061\001\002\000\006\055\uffdf\060\224\001\002\000" +
    "\006\055\uffd8\060\uffd8\001\002\000\006\055\uffe0\060\222" +
    "\001\002\000\006\055\uffd9\060\uffd9\001\002\000\006\055" +
    "\uffd7\060\uffd7\001\002\000\004\067\223\001\002\000\006" +
    "\055\uffdd\060\uffdd\001\002\000\006\051\214\065\221\001" +
    "\002\000\006\055\uffdb\060\uffdb\001\002\000\004\054\227" +
    "\001\002\000\012\051\214\065\221\066\203\067\213\001" +
    "\002\000\004\055\231\001\002\000\006\055\uffe2\060\uffe2" +
    "\001\002\000\036\023\uffa7\027\uffe9\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\051\uffa7" +
    "\053\uffa7\060\uffa7\061\uffe9\001\002\000\004\055\234\001" +
    "\002\000\006\055\uffe1\060\uffe1\001\002\000\004\051\240" +
    "\001\002\000\014\051\107\054\103\065\114\066\100\067" +
    "\105\001\002\000\006\053\uffb3\060\uffb3\001\002\000\064" +
    "\003\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\051\uffb4\053\uffb4\054\uffb4\055\uffb4\060" +
    "\uffb4\061\uffb4\063\uffb4\065\uffb4\066\uffb4\070\uffb4\001\002" +
    "\000\006\027\052\051\242\001\002\000\062\003\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\051\uffc9\053\uffc9\054\uffc9\060\uffc9\061\uffc9\063\uffc9" +
    "\065\uffc9\066\uffc9\070\uffc9\001\002\000\030\003\uffec\022" +
    "\uffec\024\uffec\025\uffec\026\uffec\051\uffec\054\uffec\063\uffec" +
    "\065\uffec\066\uffec\070\uffec\001\002\000\004\065\245\001" +
    "\002\000\004\050\246\001\002\000\012\051\053\054\030" +
    "\065\051\066\024\001\002\000\006\027\052\051\250\001" +
    "\002\000\030\003\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\051\uffeb\054\uffeb\063\uffeb\065\uffeb\066\uffeb\070\uffeb\001" +
    "\002\000\030\003\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\051\ufff7\054\ufff7\063\ufff7\065\ufff7\066\ufff7\070\ufff7\001" +
    "\002\000\010\002\ufffc\065\ufffc\070\ufffc\001\002\000\004" +
    "\055\254\001\002\000\062\003\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9\053" +
    "\uffe9\054\uffe9\060\uffe9\061\uffe9\063\uffe9\065\uffe9\066\uffe9" +
    "\070\uffe9\001\002\000\010\023\270\040\271\041\267\001" +
    "\002\000\016\042\264\043\262\044\261\045\263\046\265" +
    "\047\260\001\002\000\014\051\107\054\103\065\114\066" +
    "\100\067\105\001\002\000\014\051\uff9d\054\uff9d\065\uff9d" +
    "\066\uff9d\067\uff9d\001\002\000\014\051\uffa1\054\uffa1\065" +
    "\uffa1\066\uffa1\067\uffa1\001\002\000\014\051\uff9e\054\uff9e" +
    "\065\uff9e\066\uff9e\067\uff9e\001\002\000\014\051\uffa0\054" +
    "\uffa0\065\uffa0\066\uffa0\067\uffa0\001\002\000\014\051\uff9f" +
    "\054\uff9f\065\uff9f\066\uff9f\067\uff9f\001\002\000\014\051" +
    "\uff9c\054\uff9c\065\uff9c\066\uff9c\067\uff9c\001\002\000\010" +
    "\023\uffa2\040\uffa2\041\uffa2\001\002\000\014\051\107\054" +
    "\103\065\114\066\100\067\105\001\002\000\022\003\041" +
    "\022\026\026\021\051\036\054\030\065\051\066\024\070" +
    "\045\001\002\000\014\051\107\054\103\065\114\066\100" +
    "\067\105\001\002\000\010\023\uffa4\040\uffa4\041\267\001" +
    "\002\000\024\003\041\022\026\024\274\026\021\051\036" +
    "\054\030\065\051\066\024\070\045\001\002\000\022\003" +
    "\041\022\026\026\021\051\036\054\030\065\051\066\024" +
    "\070\045\001\002\000\024\003\041\022\026\025\276\026" +
    "\021\051\036\054\030\065\051\066\024\070\045\001\002" +
    "\000\030\003\uffc1\022\uffc1\024\uffc1\025\uffc1\026\uffc1\051" +
    "\uffc1\054\uffc1\063\uffc1\065\uffc1\066\uffc1\070\uffc1\001\002" +
    "\000\010\023\uffa3\040\uffa3\041\uffa3\001\002\000\004\070" +
    "\uffb6\001\002\000\004\070\uffb7\001\002\000\006\027\052" +
    "\061\324\001\002\000\010\027\uffe6\061\uffe6\070\uffb8\001" +
    "\002\000\004\070\307\001\002\000\010\027\uffe5\061\uffe5" +
    "\070\uffb9\001\002\000\004\070\uffba\001\002\000\006\064" +
    "\310\067\314\001\002\000\004\062\uffbc\001\002\000\004" +
    "\062\321\001\002\000\010\025\316\064\310\067\314\001" +
    "\002\000\004\070\315\001\002\000\004\062\uffbb\001\002" +
    "\000\010\025\uffbe\064\uffbe\067\uffbe\001\002\000\030\003" +
    "\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0\051\uffc0\054\uffc0" +
    "\063\uffc0\065\uffc0\066\uffc0\070\uffc0\001\002\000\004\070" +
    "\320\001\002\000\010\025\uffbf\064\uffbf\067\uffbf\001\002" +
    "\000\022\003\041\022\026\026\021\051\036\054\030\065" +
    "\051\066\024\070\045\001\002\000\024\003\041\022\026" +
    "\026\021\051\036\054\030\063\323\065\051\066\024\070" +
    "\045\001\002\000\004\070\uffbd\001\002\000\004\051\116" +
    "\001\002\000\004\070\uffb5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\002\004\046\003\001\001\000\006\027" +
    "\010\030\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\014\001\001\000\004\030" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\026\004\030\005" +
    "\045\006\042\007\036\010\043\011\046\012\031\013\021" +
    "\015\041\016\033\017\037\020\047\031\032\037\022\041" +
    "\034\042\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\305\006\042\007\036\010\043\011\046\012" +
    "\056\015\304\020\301\025\303\037\300\041\055\042\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\110\006\042\007\036" +
    "\010\043\011\046\012\103\015\107\020\111\033\254\036" +
    "\255\037\100\041\105\042\101\001\001\000\002\001\001" +
    "\000\036\005\217\006\042\007\036\010\043\011\046\015" +
    "\215\021\252\022\210\023\207\024\216\037\203\042\204" +
    "\043\214\044\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\026\004\250\005\045\006\042\007\036" +
    "\010\043\011\046\012\031\013\021\015\041\016\033\017" +
    "\037\020\047\037\022\041\034\042\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\056\015\054\020\053\041\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\056\015" +
    "\054\020\240\041\055\001\001\000\002\001\001\000\012" +
    "\012\056\015\054\020\073\041\055\001\001\000\012\012" +
    "\056\015\054\020\071\041\055\001\001\000\012\012\056" +
    "\015\054\020\067\041\055\001\001\000\012\012\056\015" +
    "\054\020\065\041\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\005\110\006\042\007\036\010\043\011\046\012" +
    "\103\015\107\020\111\026\076\036\112\037\100\041\105" +
    "\042\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\217\006\042" +
    "\007\036\010\043\011\046\015\215\021\206\022\210\023" +
    "\207\024\216\037\203\042\204\043\214\044\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\042\007\036\010\043\011\046\012\056\014\125\015" +
    "\054\020\127\037\120\041\055\042\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\042\007\036\010" +
    "\043\011\046\012\056\014\200\015\054\020\127\037\120" +
    "\041\055\042\121\001\001\000\002\001\001\000\030\006" +
    "\042\007\036\010\043\011\046\012\056\014\177\015\054" +
    "\020\127\037\120\041\055\042\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\132\001\001\000\002\001\001\000\032\005" +
    "\110\006\042\007\036\010\043\011\046\012\103\015\107" +
    "\020\111\036\156\037\100\041\105\042\101\001\001\000" +
    "\012\012\056\015\054\020\154\041\055\001\001\000\012" +
    "\012\056\015\054\020\152\041\055\001\001\000\012\012" +
    "\056\015\054\020\150\041\055\001\001\000\032\005\110" +
    "\006\042\007\036\010\043\011\046\012\103\015\107\020" +
    "\111\036\146\037\100\041\105\042\101\001\001\000\012" +
    "\012\056\015\054\020\144\041\055\001\001\000\012\012" +
    "\056\015\054\020\142\041\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\042\007\036\010\043\011\046\012\056\014" +
    "\176\015\054\020\127\037\120\041\055\042\121\001\001" +
    "\000\002\001\001\000\030\006\042\007\036\010\043\011" +
    "\046\012\056\014\175\015\054\020\127\037\120\041\055" +
    "\042\121\001\001\000\030\006\042\007\036\010\043\011" +
    "\046\012\056\014\174\015\054\020\127\037\120\041\055" +
    "\042\121\001\001\000\030\006\042\007\036\010\043\011" +
    "\046\012\056\014\173\015\054\020\127\037\120\041\055" +
    "\042\121\001\001\000\030\006\042\007\036\010\043\011" +
    "\046\012\056\014\172\015\054\020\127\037\120\041\055" +
    "\042\121\001\001\000\030\006\042\007\036\010\043\011" +
    "\046\012\056\014\171\015\054\020\127\037\120\041\055" +
    "\042\121\001\001\000\030\006\042\007\036\010\043\011" +
    "\046\012\056\014\170\015\054\020\127\037\120\041\055" +
    "\042\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\217\006\042\007\036\010" +
    "\043\011\046\015\215\023\232\024\216\037\203\042\204" +
    "\043\214\044\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\217\006\042\007" +
    "\036\010\043\011\046\015\215\037\203\042\204\044\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\217\006\042\007\036\010\043\011\046\015\215\023\227" +
    "\024\216\037\203\042\204\043\214\044\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\110\006\042\007\036\010\043\011\046\012\103\015\107" +
    "\020\111\036\236\037\100\041\105\042\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\056\015\054\020\246\041\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\256\001\001\000\032\005\110\006" +
    "\042\007\036\010\043\011\046\012\103\015\107\020\111" +
    "\036\265\037\100\041\105\042\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\110\006\042\007\036\010\043\011\046\012\103" +
    "\015\107\020\111\033\276\036\255\037\100\041\105\042" +
    "\101\001\001\000\044\003\026\004\030\005\045\006\042" +
    "\007\036\010\043\011\046\012\031\013\021\015\041\016" +
    "\033\017\037\020\047\031\272\037\022\041\034\042\024" +
    "\001\001\000\034\005\110\006\042\007\036\010\043\011" +
    "\046\012\103\015\107\020\111\033\271\036\255\037\100" +
    "\041\105\042\101\001\001\000\002\001\001\000\042\003" +
    "\026\004\250\005\045\006\042\007\036\010\043\011\046" +
    "\012\031\013\021\015\041\016\033\017\037\020\047\037" +
    "\022\041\034\042\024\001\001\000\044\003\026\004\030" +
    "\005\045\006\042\007\036\010\043\011\046\012\031\013" +
    "\021\015\041\016\033\017\037\020\047\031\274\037\022" +
    "\041\034\042\024\001\001\000\042\003\026\004\250\005" +
    "\045\006\042\007\036\010\043\011\046\012\031\013\021" +
    "\015\041\016\033\017\037\020\047\037\022\041\034\042" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\311\035\312\040\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\316\040\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\026\004\030\005\045\006\042\007\036\010\043\011" +
    "\046\012\031\013\021\015\041\016\033\017\037\020\047" +
    "\031\321\037\022\041\034\042\024\001\001\000\042\003" +
    "\026\004\250\005\045\006\042\007\036\010\043\011\046" +
    "\012\031\013\021\015\041\016\033\017\037\020\047\037" +
    "\022\041\034\042\024\001\001\000\002\001\001\000\004" +
    "\005\324\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoGraphik$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoGraphik$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoGraphik$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz = new Nodo(); 
    public void syntax_error(Symbol s)
    {
        ErroresGraphik.agregarError("Error sintactico", s.value.toString() + " no debe de ir en esa posicion", s.right, s.left);
    }

    public void unrecovered_syntax_error(Symbol s)
    {
        ErroresGraphik.agregarError("Error sintactico", "No se pudo recuperar de: " + s.value.toString(), s.right, s.left);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoGraphik$actions {




  private final SintacticoGraphik parser;

  /** Constructor */
  CUP$SintacticoGraphik$actions(SintacticoGraphik parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoGraphik$do_action_part00000000(
    int                        CUP$SintacticoGraphik$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGraphik$parser,
    java.util.Stack            CUP$SintacticoGraphik$stack,
    int                        CUP$SintacticoGraphik$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoGraphik$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoGraphik$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoGraphik$parser.done_parsing();
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
System.out.println("inicio");
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 LFUNCION 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int LFUNleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LFUNright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LFUN = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 raiz = LFUN; System.out.println("FINALIZO"); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LFUNCION ::= LFUNCION DECFUN 
            {
              Nodo RESULT =null;
		int LFUNCIONleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LFUNCIONright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LFUNCION = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int DECFUNleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int DECFUNright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo DECFUN = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(DECFUN != null)
                            LFUNCION.hijos.add(DECFUN);
                        RESULT = (Nodo) LFUNCION;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LFUNCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LFUNCION ::= DECFUN 
            {
              Nodo RESULT =null;
		int DECFUNleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int DECFUNright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo DECFUN = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        RESULT = new Nodo(Const.ldecfun);
                        if(DECFUN != null) 
                            RESULT = NodoGeneral.crearLdecfun(DECFUN);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LFUNCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECFUN ::= iden LPAR igual LCUERPO _end 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).value;
		int LPARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int LPARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		Nodo LPAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearFuncion(id, LPAR, LCUERPO); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DECFUN",22, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECFUN ::= enter 
            {
              Nodo RESULT =null;
		 RESULT = null; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DECFUN",22, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LPAR ::= LPAR coma iden 
            {
              Nodo RESULT =null;
		int LPARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LPARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LPAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        Nodo par = new Nodo(iden);
                        LPAR.hijos.add(par);
                        RESULT = (Nodo) LPAR;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",24, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LPAR ::= iden 
            {
              Nodo RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        Nodo par = new Nodo(iden);
                        RESULT = new Nodo(Const.lpar);
                        RESULT.hijos.add(par);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",24, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LPAR ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.lpar); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",24, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LCUERPO ::= LCUERPO CUERPO 
            {
              Nodo RESULT =null;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(CUERPO != null)
                            LCUERPO.hijos.add(CUERPO);
                        RESULT = (Nodo) LCUERPO;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPO",23, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LCUERPO ::= CUERPO 
            {
              Nodo RESULT =null;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 
                        RESULT = new Nodo(Const.lcuerpo);
                        if(CUERPO != null)
                            RESULT = NodoGeneral.crearCuerpo(CUERPO);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPO",23, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= LIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= CALCULAR 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= OPSIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= CONCATLISTAS 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= OPLIST 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= IF 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= CASE 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO ::= LLAMADO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO ::= enter 
            {
              Nodo RESULT =null;
		 RESULT = null; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO ::= error enter 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LIST ::= dolar let iden igual LISTA dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearLista(id, LISTA); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LIST",1, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA ::= CONCATLISTAS 
            {
              Nodo RESULT =null;
		int CONCATleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CONCATright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CONCAT = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = CONCAT; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA ::= acorchete L ccorchete 
            {
              Nodo RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = L; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA ::= cadena 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.cadena, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA ::= OPLISTA 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LISTA",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L ::= LCORCHETES 
            {
              Nodo RESULT =null;
		int LCORCHETESleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LCORCHETESright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LCORCHETES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = LCORCHETES; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("L",15, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L ::= LVAL 
            {
              Nodo RESULT =null;
		int LVALleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LVALright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LVAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = LVAL; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("L",15, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LCORCHETES ::= LCORCHETES coma acorchete LVAL ccorchete 
            {
              Nodo RESULT =null;
		int LCORCHETESleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).left;
		int LCORCHETESright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).right;
		Nodo LCORCHETES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).value;
		int LVALleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LVALright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LVAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		
                        LCORCHETES.hijos.add(LVAL);
                        RESULT = (Nodo) LCORCHETES;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCORCHETES",16, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LCORCHETES ::= acorchete LVAL ccorchete 
            {
              Nodo RESULT =null;
		int LVALleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LVALright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LVAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearLcorchetes(LVAL); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCORCHETES",16, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LVAL ::= LCAR 
            {
              Nodo RESULT =null;
		int LCARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LCARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LCAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = LCAR; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVAL",17, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LVAL ::= LEXP 
            {
              Nodo RESULT =null;
		int LEXPleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LEXPright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LEXP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = LEXP; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVAL",17, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LVAL ::= cadena 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.cadena, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVAL",17, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LCAR ::= LCAR coma caracter 
            {
              Nodo RESULT =null;
		int LCARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LCARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LCAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        LCAR.hijos.add(NodoGeneral.crearHoja(Const.caracter, t1));
                        RESULT = (Nodo) LCAR;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCAR",18, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LCAR ::= caracter 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearLista(NodoGeneral.crearHoja(Const.caracter, t1)); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCAR",18, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LEXP ::= LEXP coma EXP 
            {
              Nodo RESULT =null;
		int LEXPleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LEXPright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LEXP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        LEXP.hijos.add(t1);
                        RESULT = (Nodo) LEXP;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LEXP",33, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LEXP ::= EXP 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearLista(t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LEXP",33, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= OPSIST 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CALCULAR ::= dolar calcular E dolar 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CALCULAR",3, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPSIST ::= SUCC 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPSIST",32, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPSIST ::= DECC 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPSIST",32, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPSIST ::= MIN 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPSIST",32, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPSIST ::= MAX 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPSIST",32, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SUCC ::= dolar succ VALOR dolar 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearSucc(VALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SUCC",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECC ::= dolar decc VALOR dolar 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearDecc(VALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DECC",5, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MIN ::= dolar min LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearMin(LISTA); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MIN",6, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MAX ::= dolar max LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearMax(LISTA); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MAX",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPLIST ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPLIST",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPLIST ::= OPLISTA 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPLIST",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPLISTA ::= dolar revers LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearRevers(LISTA); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPLISTA",31, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPLISTA ::= dolar impr LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearImpr(LISTA); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPLISTA",31, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPLISTA ::= dolar par LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearPar(LISTA); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPLISTA",31, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPLISTA ::= dolar asc LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearAsc(LISTA); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPLISTA",31, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPLISTA ::= dolar desc LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearDesc(LISTA); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPLISTA",31, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPEXP ::= dolar sum LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearSum(LISTA); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPEXP",29, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPEXP ::= dolar product LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearProduct(LISTA); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPEXP",29, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPEXP ::= dolar length LISTA dolar 
            {
              Nodo RESULT =null;
		int LISTAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LISTAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LISTA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearLength(LISTA); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPEXP",29, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IF ::= _if COND _then LCUERPO _else LCUERPO _end 
            {
              Nodo RESULT =null;
		int CONDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).left;
		int CONDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).right;
		Nodo COND = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).value;
		int LCUERPOVleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int LCUERPOVright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		Nodo LCUERPOV = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LCUERPOFleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOFright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPOF = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearIf(COND, LCUERPOV, LCUERPOF); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IF",12, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASE ::= _case VALCASE enter LCASOS _end 
            {
              Nodo RESULT =null;
		int VALCASEleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int VALCASEright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		Nodo VALCASE = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LCASOSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCASOSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCASOS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearCase(VALCASE, LCASOS); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LCASOS ::= LCASOS CASO enter 
            {
              Nodo RESULT =null;
		int LCASOSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LCASOSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LCASOS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int CASOSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int CASOSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo CASOS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		
                        LCASOS.hijos.add(CASOS);
                        RESULT = (Nodo) LCASOS;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCASOS",26, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LCASOS ::= CASO enter 
            {
              Nodo RESULT =null;
		int CASOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int CASOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo CASO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearLcasos(CASO); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCASOS",26, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CASO ::= VALCASO dospuntos LCUERPO puntoycoma 
            {
              Nodo RESULT =null;
		int VALCASOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int VALCASOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		Nodo VALCASO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearCaso(VALCASO, LCUERPO);
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CASO",27, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALCASO ::= numero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.numero, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALCASO",30, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALCASO ::= caracter 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.caracter, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALCASO",30, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALCASE ::= CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALCASE",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALCASE ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALCASE",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALCASE ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALCASE",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALCASE ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALCASE",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALCASE ::= OPSIST 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALCASE",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALCASE ::= LISTA poslista CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int CALCULARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CALCULARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CALCULAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearPosLista(t1, CALCULAR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALCASE",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LLAMADO ::= dolar iden allave LVALOR cllave dolar 
            {
              Nodo RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).value;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		 RESULT = NodoGeneral.crearLlamado(iden, LVALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADO",11, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LVALOR ::= LVALOR coma VALOR 
            {
              Nodo RESULT =null;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        LVALOR.hijos.add(VALOR);
                        RESULT = (Nodo) LVALOR;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",20, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LVALOR ::= VALOR 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearLvalor(VALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",20, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LVALOR ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.lvalor); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",20, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALOR ::= CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALOR ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALOR ::= OPSIST 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALOR ::= CONCATLISTAS 
            {
              Nodo RESULT =null;
		int CONCATleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CONCATright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CONCAT = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = CONCAT; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALOR ::= OPLISTA 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALOR ::= OPEXP 
            {
              Nodo RESULT =null;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = OP; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALOR ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALOR ::= caracter 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.caracter, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALOR ::= cadena 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.cadena, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALOR ::= acorchete L ccorchete 
            {
              Nodo RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = L; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALOR ::= LISTA poslista CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int CALCULARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CALCULARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CALCULAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearPosLista(t1, CALCULAR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONCATLISTAS ::= LISTA masmas LISTA 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.masmas, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CONCATLISTAS",8, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COND ::= COND or COND 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.or, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("COND",25, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COND ::= COND and COND 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.and, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("COND",25, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COND ::= VALOR OPREL VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearRelacional(op, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("COND",25, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPREL ::= menor 
            {
              String RESULT =null;
		 RESULT = Const.menor; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPREL ::= mayor 
            {
              String RESULT =null;
		 RESULT = Const.mayor; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPREL ::= menorigual 
            {
              String RESULT =null;
		 RESULT = Const.menorigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPREL ::= mayorigual 
            {
              String RESULT =null;
		 RESULT = Const.mayorigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPREL ::= igualigual 
            {
              String RESULT =null;
		 RESULT = Const.igualigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPREL ::= diferente 
            {
              String RESULT =null;
		 RESULT = Const.diferente; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= E mas E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mas, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= E menos E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.menos, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= E por E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.por, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= E dividido E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.dividido, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= E mod E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mod, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E pot E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.pot, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= E sqrt E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.sqrt, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= menos E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.unario, t1, null); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= aparentesis E cparentesis 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= OPSIST 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= numero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.numero, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= iden 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.id, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= LISTA poslista CALCULAR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int CALCULARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CALCULARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CALCULAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearPosLista(t1, CALCULAR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= OPEXP 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoGraphik$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoGraphik$do_action(
    int                        CUP$SintacticoGraphik$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGraphik$parser,
    java.util.Stack            CUP$SintacticoGraphik$stack,
    int                        CUP$SintacticoGraphik$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoGraphik$do_action_part00000000(
                               CUP$SintacticoGraphik$act_num,
                               CUP$SintacticoGraphik$parser,
                               CUP$SintacticoGraphik$stack,
                               CUP$SintacticoGraphik$top);
    }
}

}
