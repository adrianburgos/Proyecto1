
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.graphik;

import java_cup.runtime.Symbol;
import Reportes.*;
import fabrica.*;
import ide.Const;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoGraphik extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symsG.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoGraphik() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoGraphik(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoGraphik(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\061\002\000\002\002" +
    "\006\000\002\017\005\000\002\017\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\022\005\000\002\022\003\000\002" +
    "\012\004\000\002\012\003\000\002\015\006\000\002\013" +
    "\004\000\002\013\003\000\002\016\005\000\002\004\004" +
    "\000\002\004\003\000\002\005\011\000\002\007\004\000" +
    "\002\007\002\000\002\060\004\000\002\060\004\000\002" +
    "\060\004\000\002\060\002\000\002\010\004\000\002\010" +
    "\003\000\002\011\003\000\002\011\004\000\002\011\003" +
    "\000\002\003\013\000\002\021\003\000\002\021\003\000" +
    "\002\025\006\000\002\025\005\000\002\023\007\000\002" +
    "\053\003\000\002\053\003\000\002\053\002\000\002\052" +
    "\006\000\002\052\005\000\002\026\004\000\002\026\004" +
    "\000\002\027\003\000\002\027\006\000\002\030\006\000" +
    "\002\030\005\000\002\031\004\000\002\031\002\000\002" +
    "\032\007\000\002\032\005\000\002\033\003\000\002\033" +
    "\003\000\002\024\011\000\002\034\004\000\002\034\003" +
    "\000\002\006\004\000\002\006\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\005\000\002\006\004\000\002\006\004" +
    "\000\002\035\006\000\002\036\012\000\002\046\006\000" +
    "\002\046\002\000\002\037\012\000\002\047\004\000\002" +
    "\047\003\000\002\050\006\000\002\051\005\000\002\051" +
    "\002\000\002\040\013\000\002\054\003\000\002\054\007" +
    "\000\002\055\004\000\002\055\003\000\002\056\003\000" +
    "\002\056\003\000\002\041\011\000\002\042\012\000\002" +
    "\045\010\000\002\043\007\000\002\044\007\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\004\000\002\014\005\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\017\000\001\002\000\004\017\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\017\ufff4\027\ufff4\001\002\000\004\110\u0100\001" +
    "\002\000\006\017\010\027\012\001\002\000\004\110\376" +
    "\001\002\000\006\021\ufff1\027\ufff1\001\002\000\006\017" +
    "\ufff5\027\ufff5\001\002\000\006\021\020\027\012\001\002" +
    "\000\006\021\ufff2\027\ufff2\001\002\000\006\002\uffee\021" +
    "\uffee\001\002\000\004\110\023\001\002\000\006\002\uffff" +
    "\021\020\001\002\000\006\002\uffef\021\uffef\001\002\000" +
    "\010\022\025\074\uffeb\100\uffeb\001\002\000\006\074\030" +
    "\100\uffe7\001\002\000\004\110\026\001\002\000\006\074" +
    "\uffec\100\uffec\001\002\000\004\100\034\001\002\000\010" +
    "\014\033\015\032\016\031\001\002\000\014\073\uffe9\075" +
    "\uffe9\077\uffe9\100\uffe9\102\uffe9\001\002\000\014\073\uffe8" +
    "\075\uffe8\077\uffe8\100\uffe8\102\uffe8\001\002\000\014\073" +
    "\uffea\075\uffea\077\uffea\100\uffea\102\uffea\001\002\000\020" +
    "\004\051\006\045\010\043\011\037\013\044\107\040\110" +
    "\041\001\002\000\022\004\051\006\045\010\043\011\037" +
    "\013\044\101\374\107\040\110\041\001\002\000\022\004" +
    "\uffe4\006\uffe4\010\uffe4\011\uffe4\013\uffe4\101\uffe4\107\uffe4" +
    "\110\uffe4\001\002\000\004\110\ufff9\001\002\000\004\110" +
    "\ufffb\001\002\000\004\110\ufff8\001\002\000\004\110\356" +
    "\001\002\000\004\110\ufffa\001\002\000\006\026\206\110" +
    "\uffdf\001\002\000\004\110\ufffc\001\002\000\004\110\uffe0" +
    "\001\002\000\004\073\205\001\002\000\022\004\uffe5\006" +
    "\uffe5\010\uffe5\011\uffe5\013\uffe5\101\uffe5\107\uffe5\110\uffe5" +
    "\001\002\000\014\006\045\010\043\011\037\107\040\110" +
    "\041\001\002\000\022\004\uffe2\006\uffe2\010\uffe2\011\uffe2" +
    "\013\uffe2\101\uffe2\107\uffe2\110\uffe2\001\002\000\004\110" +
    "\054\001\002\000\014\073\uffe7\074\030\075\uffe7\077\uffe7" +
    "\102\uffe7\001\002\000\012\073\uffd9\075\057\077\060\102" +
    "\063\001\002\000\006\073\uffdb\077\202\001\002\000\032" +
    "\005\176\024\066\025\070\055\075\104\101\106\100\107" +
    "\073\110\072\111\071\112\103\114\076\115\074\001\002" +
    "\000\004\110\172\001\002\000\010\073\uffcf\075\153\102" +
    "\155\001\002\000\004\073\uffdc\001\002\000\030\024\066" +
    "\025\070\055\075\104\101\106\100\107\073\110\072\111" +
    "\071\112\103\114\076\115\074\001\002\000\004\073\uffda" +
    "\001\002\000\036\054\123\055\112\056\117\057\105\060" +
    "\116\061\111\062\110\065\121\066\107\067\114\070\122" +
    "\071\115\072\113\103\152\001\002\000\004\110\146\001" +
    "\002\000\052\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94" +
    "\061\uff94\062\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071" +
    "\uff94\072\uff94\073\uff94\074\uff94\076\144\077\uff94\101\uff94" +
    "\103\uff94\105\uff94\001\002\000\004\110\135\001\002\000" +
    "\050\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95" +
    "\062\uff95\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\072" +
    "\uff95\073\uff95\074\uff95\077\uff95\101\uff95\103\uff95\105\uff95" +
    "\001\002\000\060\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\065\ufffd\066\ufffd" +
    "\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\076" +
    "\ufffd\077\ufffd\101\ufffd\102\ufffd\103\ufffd\105\ufffd\001\002" +
    "\000\050\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061" +
    "\uff99\062\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99" +
    "\072\uff99\073\uff99\074\uff99\077\uff99\101\uff99\103\uff99\105" +
    "\uff99\001\002\000\050\054\uff97\055\uff97\056\uff97\057\uff97" +
    "\060\uff97\061\uff97\062\uff97\065\uff97\066\uff97\067\uff97\070" +
    "\uff97\071\uff97\072\uff97\073\uff97\074\uff97\077\uff97\101\uff97" +
    "\103\uff97\105\uff97\001\002\000\030\024\066\025\070\055" +
    "\075\104\101\106\100\107\073\110\072\111\071\112\103" +
    "\114\076\115\074\001\002\000\050\054\uff98\055\uff98\056" +
    "\uff98\057\uff98\060\uff98\061\uff98\062\uff98\065\uff98\066\uff98" +
    "\067\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\077" +
    "\uff98\101\uff98\103\uff98\105\uff98\001\002\000\050\054\uff92" +
    "\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\065" +
    "\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92" +
    "\074\uff92\077\uff92\101\uff92\103\uff92\105\uff92\001\002\000" +
    "\050\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a" +
    "\062\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072" +
    "\uff9a\073\uff9a\074\uff9a\077\uff9a\101\uff9a\103\uff9a\105\uff9a" +
    "\001\002\000\030\024\066\025\070\055\075\104\101\106" +
    "\100\107\073\110\072\111\071\112\103\114\076\115\074" +
    "\001\002\000\050\054\uff93\055\uff93\056\uff93\057\uff93\060" +
    "\uff93\061\uff93\062\uff93\065\uff93\066\uff93\067\uff93\070\uff93" +
    "\071\uff93\072\uff93\073\uff93\074\uff93\077\uff93\101\uff93\103" +
    "\uff93\105\uff93\001\002\000\050\054\uff96\055\uff96\056\uff96" +
    "\057\uff96\060\uff96\061\uff96\062\uff96\065\uff96\066\uff96\067" +
    "\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96\077\uff96" +
    "\101\uff96\103\uff96\105\uff96\001\002\000\036\054\123\055" +
    "\112\056\117\057\105\060\116\061\111\062\110\065\121" +
    "\066\107\067\114\070\122\071\115\072\113\105\106\001" +
    "\002\000\030\024\066\025\070\055\075\104\101\106\100" +
    "\107\073\110\072\111\071\112\103\114\076\115\074\001" +
    "\002\000\050\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071" +
    "\uff9b\072\uff9b\073\uff9b\074\uff9b\077\uff9b\101\uff9b\103\uff9b" +
    "\105\uff9b\001\002\000\030\024\uff8e\025\uff8e\055\uff8e\104" +
    "\uff8e\106\uff8e\107\uff8e\110\uff8e\111\uff8e\112\uff8e\114\uff8e" +
    "\115\uff8e\001\002\000\030\024\066\025\070\055\075\104" +
    "\101\106\100\107\073\110\072\111\071\112\103\114\076" +
    "\115\074\001\002\000\030\024\066\025\070\055\075\104" +
    "\101\106\100\107\073\110\072\111\071\112\103\114\076" +
    "\115\074\001\002\000\030\024\066\025\070\055\075\104" +
    "\101\106\100\107\073\110\072\111\071\112\103\114\076" +
    "\115\074\001\002\000\030\024\uff8d\025\uff8d\055\uff8d\104" +
    "\uff8d\106\uff8d\107\uff8d\110\uff8d\111\uff8d\112\uff8d\114\uff8d" +
    "\115\uff8d\001\002\000\030\024\uff91\025\uff91\055\uff91\104" +
    "\uff91\106\uff91\107\uff91\110\uff91\111\uff91\112\uff91\114\uff91" +
    "\115\uff91\001\002\000\030\024\uff8c\025\uff8c\055\uff8c\104" +
    "\uff8c\106\uff8c\107\uff8c\110\uff8c\111\uff8c\112\uff8c\114\uff8c" +
    "\115\uff8c\001\002\000\030\024\066\025\070\055\075\104" +
    "\101\106\100\107\073\110\072\111\071\112\103\114\076" +
    "\115\074\001\002\000\030\024\066\025\070\055\075\104" +
    "\101\106\100\107\073\110\072\111\071\112\103\114\076" +
    "\115\074\001\002\000\030\024\066\025\070\055\075\104" +
    "\101\106\100\107\073\110\072\111\071\112\103\114\076" +
    "\115\074\001\002\000\030\024\uff8f\025\uff8f\055\uff8f\104" +
    "\uff8f\106\uff8f\107\uff8f\110\uff8f\111\uff8f\112\uff8f\114\uff8f" +
    "\115\uff8f\001\002\000\030\024\uff90\025\uff90\055\uff90\104" +
    "\uff90\106\uff90\107\uff90\110\uff90\111\uff90\112\uff90\114\uff90" +
    "\115\uff90\001\002\000\030\024\066\025\070\055\075\104" +
    "\101\106\100\107\073\110\072\111\071\112\103\114\076" +
    "\115\074\001\002\000\050\054\uffa4\055\uffa4\056\117\057" +
    "\105\060\116\061\uffa4\062\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\077\uffa4\101" +
    "\uffa4\103\uffa4\105\uffa4\001\002\000\050\054\123\055\112" +
    "\056\117\057\105\060\116\061\111\062\110\065\121\066" +
    "\107\067\114\070\122\071\115\072\113\073\uffa1\074\uffa1" +
    "\077\uffa1\101\uffa1\103\uffa1\105\uffa1\001\002\000\050\054" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\060\116\061\uff9f\062\uff9f" +
    "\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073" +
    "\uff9f\074\uff9f\077\uff9f\101\uff9f\103\uff9f\105\uff9f\001\002" +
    "\000\050\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\116\061" +
    "\uff9d\062\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d" +
    "\072\uff9d\073\uff9d\074\uff9d\077\uff9d\101\uff9d\103\uff9d\105" +
    "\uff9d\001\002\000\050\054\uffa0\055\uffa0\056\117\057\105" +
    "\060\116\061\uffa0\062\uffa0\065\uffa0\066\uffa0\067\uffa0\070" +
    "\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\077\uffa0\101\uffa0" +
    "\103\uffa0\105\uffa0\001\002\000\050\054\123\055\112\056" +
    "\117\057\105\060\116\061\uffa2\062\uffa2\065\121\066\107" +
    "\067\114\070\122\071\115\072\113\073\uffa2\074\uffa2\077" +
    "\uffa2\101\uffa2\103\uffa2\105\uffa2\001\002\000\050\054\123" +
    "\055\112\056\117\057\105\060\116\061\111\062\uffa3\065" +
    "\121\066\107\067\114\070\122\071\115\072\113\073\uffa3" +
    "\074\uffa3\077\uffa3\101\uffa3\103\uffa3\105\uffa3\001\002\000" +
    "\050\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\116\061\uff9e" +
    "\062\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072" +
    "\uff9e\073\uff9e\074\uff9e\077\uff9e\101\uff9e\103\uff9e\105\uff9e" +
    "\001\002\000\050\054\uff9c\055\uff9c\056\117\057\105\060" +
    "\116\061\uff9c\062\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c" +
    "\071\uff9c\072\uff9c\073\uff9c\074\uff9c\077\uff9c\101\uff9c\103" +
    "\uff9c\105\uff9c\001\002\000\004\104\136\001\002\000\030" +
    "\024\066\025\070\055\075\104\101\106\100\107\073\110" +
    "\072\111\071\112\103\114\076\115\074\001\002\000\042" +
    "\054\123\055\112\056\117\057\105\060\116\061\111\062" +
    "\110\065\121\066\107\067\114\070\122\071\115\072\113" +
    "\077\ufff6\101\ufff6\105\ufff6\001\002\000\006\077\142\105" +
    "\141\001\002\000\050\054\uffa6\055\uffa6\056\uffa6\057\uffa6" +
    "\060\uffa6\061\uffa6\062\uffa6\065\uffa6\066\uffa6\067\uffa6\070" +
    "\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\077\uffa6\101\uffa6" +
    "\103\uffa6\105\uffa6\001\002\000\030\024\066\025\070\055" +
    "\075\104\101\106\100\107\073\110\072\111\071\112\103" +
    "\114\076\115\074\001\002\000\042\054\123\055\112\056" +
    "\117\057\105\060\116\061\111\062\110\065\121\066\107" +
    "\067\114\070\122\071\115\072\113\077\ufff7\101\ufff7\105" +
    "\ufff7\001\002\000\004\110\145\001\002\000\060\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061" +
    "\ufffe\062\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\072\ufffe\073\ufffe\074\ufffe\076\ufffe\077\ufffe\101\ufffe\102" +
    "\ufffe\103\ufffe\105\ufffe\001\002\000\004\104\147\001\002" +
    "\000\030\024\066\025\070\055\075\104\101\106\100\107" +
    "\073\110\072\111\071\112\103\114\076\115\074\001\002" +
    "\000\006\077\142\105\151\001\002\000\050\054\uffa5\055" +
    "\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\065\uffa5" +
    "\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074" +
    "\uffa5\077\uffa5\101\uffa5\103\uffa5\105\uffa5\001\002\000\010" +
    "\073\uffd1\075\uffd1\102\uffd1\001\002\000\004\100\161\001" +
    "\002\000\004\073\uffd5\001\002\000\030\024\066\025\070" +
    "\055\075\104\101\106\100\107\073\110\072\111\071\112" +
    "\103\114\076\115\074\001\002\000\036\054\123\055\112" +
    "\056\117\057\105\060\116\061\111\062\110\065\121\066" +
    "\107\067\114\070\122\071\115\072\113\103\157\001\002" +
    "\000\010\073\uffd2\075\uffd2\102\uffd2\001\002\000\006\073" +
    "\uffd0\077\166\001\002\000\032\024\066\025\070\055\075" +
    "\100\161\104\101\106\100\107\073\110\072\111\071\112" +
    "\103\114\076\115\074\001\002\000\006\077\142\101\uffcc" +
    "\001\002\000\006\077\166\101\uffcb\001\002\000\004\101" +
    "\165\001\002\000\010\073\uffcd\077\uffcd\101\uffcd\001\002" +
    "\000\004\100\167\001\002\000\032\024\066\025\070\055" +
    "\075\100\161\104\101\106\100\107\073\110\072\111\071" +
    "\112\103\114\076\115\074\001\002\000\004\101\171\001" +
    "\002\000\010\073\uffce\077\uffce\101\uffce\001\002\000\010" +
    "\073\uffe7\074\030\077\uffe7\001\002\000\006\073\uffd7\077" +
    "\uffd7\001\002\000\036\054\123\055\112\056\117\057\105" +
    "\060\116\061\111\062\110\065\121\066\107\067\114\070" +
    "\122\071\115\072\113\073\uffd4\001\002\000\004\073\uffd6" +
    "\001\002\000\004\110\177\001\002\000\004\104\200\001" +
    "\002\000\004\105\201\001\002\000\004\073\uffd3\001\002" +
    "\000\004\110\203\001\002\000\010\073\uffe7\074\030\077" +
    "\uffe7\001\002\000\006\073\uffd8\077\uffd8\001\002\000\022" +
    "\004\uffe3\006\uffe3\010\uffe3\011\uffe3\013\uffe3\101\uffe3\107" +
    "\uffe3\110\uffe3\001\002\000\004\104\207\001\002\000\004" +
    "\105\210\001\002\000\004\100\211\001\002\000\034\004" +
    "\051\023\227\024\066\025\070\030\237\032\224\035\212" +
    "\036\216\037\217\040\231\041\233\042\226\110\072\001" +
    "\002\000\004\104\333\001\002\000\042\004\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\030\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\101\uffc4" +
    "\110\uffc4\001\002\000\042\004\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\101\uffc8\110\uffc8\001" +
    "\002\000\036\004\051\023\227\024\066\025\070\030\237" +
    "\032\224\035\212\036\216\037\217\040\231\041\233\042" +
    "\226\101\332\110\072\001\002\000\004\104\324\001\002" +
    "\000\004\100\315\001\002\000\042\004\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\030\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\101\uffc3\110" +
    "\uffc3\001\002\000\004\073\314\001\002\000\006\076\144" +
    "\102\063\001\002\000\004\073\310\001\002\000\004\104" +
    "\270\001\002\000\004\073\267\001\002\000\004\104\262" +
    "\001\002\000\030\024\066\025\070\055\075\104\101\106" +
    "\100\107\073\110\072\111\071\112\103\114\076\115\074" +
    "\001\002\000\004\073\257\001\002\000\004\073\256\001" +
    "\002\000\042\004\uffc5\023\uffc5\024\uffc5\025\uffc5\030\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\101\uffc5\110\uffc5\001\002\000\004" +
    "\073\255\001\002\000\004\073\254\001\002\000\042\004" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\030\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\101\uffc2\110\uffc2\001\002\000\042\004\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\030\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\101\uffc1" +
    "\110\uffc1\001\002\000\004\104\240\001\002\000\030\024" +
    "\066\025\070\055\075\104\101\106\100\107\073\110\072" +
    "\111\071\112\103\114\076\115\074\001\002\000\036\054" +
    "\123\055\112\056\117\057\105\060\116\061\111\062\110" +
    "\065\121\066\107\067\114\070\122\071\115\072\113\105" +
    "\242\001\002\000\004\100\243\001\002\000\034\004\051" +
    "\023\227\024\066\025\070\030\237\032\224\035\212\036" +
    "\216\037\217\040\231\041\233\042\226\110\072\001\002" +
    "\000\036\004\051\023\227\024\066\025\070\030\237\032" +
    "\224\035\212\036\216\037\217\040\231\041\233\042\226" +
    "\101\246\110\072\001\002\000\042\004\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\101\uffc9\110" +
    "\uffc9\001\002\000\044\004\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\030\uffb7\031\247\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\101\uffb7\110\uffb7" +
    "\001\002\000\004\100\251\001\002\000\042\004\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\101" +
    "\uffb9\110\uffb9\001\002\000\034\004\051\023\227\024\066" +
    "\025\070\030\237\032\224\035\212\036\216\037\217\040" +
    "\231\041\233\042\226\110\072\001\002\000\036\004\051" +
    "\023\227\024\066\025\070\030\237\032\224\035\212\036" +
    "\216\037\217\040\231\041\233\042\226\101\253\110\072" +
    "\001\002\000\042\004\uffb8\023\uffb8\024\uffb8\025\uffb8\030" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\101\uffb8\110\uffb8\001\002\000" +
    "\042\004\uffc0\023\uffc0\024\uffc0\025\uffc0\030\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\101\uffc0\110\uffc0\001\002\000\042\004\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\030\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\101\uffbc\110\uffbc\001\002\000\042\004\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\101\uffbb\110" +
    "\uffbb\001\002\000\042\004\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\030\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\101\uffc7\110\uffc7\001\002" +
    "\000\036\054\123\055\112\056\117\057\105\060\116\061" +
    "\111\062\110\065\121\066\107\067\114\070\122\071\115" +
    "\072\113\073\261\001\002\000\042\004\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\030\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\101\uffbd\110" +
    "\uffbd\001\002\000\004\110\263\001\002\000\004\077\264" +
    "\001\002\000\004\110\265\001\002\000\004\105\266\001" +
    "\002\000\004\073\uffa7\001\002\000\042\004\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\101\uffc6" +
    "\110\uffc6\001\002\000\004\110\072\001\002\000\006\076" +
    "\144\105\272\001\002\000\004\100\273\001\002\000\004" +
    "\034\274\001\002\000\030\024\066\025\070\055\075\104" +
    "\101\106\100\107\073\110\072\111\071\112\103\114\076" +
    "\115\074\001\002\000\010\033\300\034\274\101\uffb1\001" +
    "\002\000\010\033\uffb4\034\uffb4\101\uffb4\001\002\000\004" +
    "\101\304\001\002\000\004\074\302\001\002\000\010\033" +
    "\uffb5\034\uffb5\101\uffb5\001\002\000\034\004\051\023\227" +
    "\024\066\025\070\030\237\032\224\035\212\036\216\037" +
    "\217\040\231\041\233\042\226\110\072\001\002\000\036" +
    "\004\051\023\227\024\066\025\070\030\237\032\224\035" +
    "\212\036\216\037\217\040\231\041\233\042\226\101\uffb2" +
    "\110\072\001\002\000\042\004\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\101\uffb6\110\uffb6\001" +
    "\002\000\036\054\123\055\112\056\117\057\105\060\116" +
    "\061\111\062\110\065\121\066\107\067\114\070\122\071" +
    "\115\072\113\074\306\001\002\000\034\004\051\023\227" +
    "\024\066\025\070\030\237\032\224\035\212\036\216\037" +
    "\217\040\231\041\233\042\226\110\072\001\002\000\042" +
    "\004\051\023\227\024\066\025\070\030\237\032\224\033" +
    "\uffb3\034\uffb3\035\212\036\216\037\217\040\231\041\233" +
    "\042\226\101\uffb3\110\072\001\002\000\042\004\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\101" +
    "\uffbf\110\uffbf\001\002\000\006\075\312\102\155\001\002" +
    "\000\030\024\066\025\070\055\075\104\101\106\100\107" +
    "\073\110\072\111\071\112\103\114\076\115\074\001\002" +
    "\000\042\054\123\055\112\056\117\057\105\060\116\061" +
    "\111\062\110\065\121\066\107\067\114\070\122\071\115" +
    "\072\113\073\uffba\074\uffba\105\uffba\001\002\000\042\004" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\030\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\101\uffbe\110\uffbe\001\002\000\034\004\051\023\227" +
    "\024\066\025\070\030\237\032\224\035\212\036\216\037" +
    "\217\040\231\041\233\042\226\110\072\001\002\000\036" +
    "\004\051\023\227\024\066\025\070\030\237\032\224\035" +
    "\212\036\216\037\217\040\231\041\233\042\226\101\317" +
    "\110\072\001\002\000\004\036\320\001\002\000\004\104" +
    "\321\001\002\000\030\024\066\025\070\055\075\104\101" +
    "\106\100\107\073\110\072\111\071\112\103\114\076\115" +
    "\074\001\002\000\036\054\123\055\112\056\117\057\105" +
    "\060\116\061\111\062\110\065\121\066\107\067\114\070" +
    "\122\071\115\072\113\105\323\001\002\000\042\004\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\030\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\101\uffa8\110\uffa8\001\002\000\030\024\066\025\070\055" +
    "\075\104\101\106\100\107\073\110\072\111\071\112\103" +
    "\114\076\115\074\001\002\000\036\054\123\055\112\056" +
    "\117\057\105\060\116\061\111\062\110\065\121\066\107" +
    "\067\114\070\122\071\115\072\113\105\326\001\002\000" +
    "\004\100\327\001\002\000\034\004\051\023\227\024\066" +
    "\025\070\030\237\032\224\035\212\036\216\037\217\040" +
    "\231\041\233\042\226\110\072\001\002\000\036\004\051" +
    "\023\227\024\066\025\070\030\237\032\224\035\212\036" +
    "\216\037\217\040\231\041\233\042\226\101\331\110\072" +
    "\001\002\000\042\004\uffa9\023\uffa9\024\uffa9\025\uffa9\030" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\101\uffa9\110\uffa9\001\002\000" +
    "\022\004\uffca\006\uffca\010\uffca\011\uffca\013\uffca\101\uffca" +
    "\107\uffca\110\uffca\001\002\000\006\004\335\110\072\001" +
    "\002\000\004\074\uffaf\001\002\000\014\006\045\010\043" +
    "\011\037\107\040\110\041\001\002\000\004\074\337\001" +
    "\002\000\004\110\072\001\002\000\004\105\346\001\002" +
    "\000\004\105\uffac\001\002\000\012\052\344\053\345\076" +
    "\144\102\063\001\002\000\004\105\uffad\001\002\000\004" +
    "\105\uffab\001\002\000\004\105\uffaa\001\002\000\004\100" +
    "\347\001\002\000\034\004\051\023\227\024\066\025\070" +
    "\030\237\032\224\035\212\036\216\037\217\040\231\041" +
    "\233\042\226\110\072\001\002\000\036\004\051\023\227" +
    "\024\066\025\070\030\237\032\224\035\212\036\216\037" +
    "\217\040\231\041\233\042\226\101\351\110\072\001\002" +
    "\000\042\004\uffb0\023\uffb0\024\uffb0\025\uffb0\030\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\101\uffb0\110\uffb0\001\002\000\004\110" +
    "\353\001\002\000\004\075\354\001\002\000\030\024\066" +
    "\025\070\055\075\104\101\106\100\107\073\110\072\111" +
    "\071\112\103\114\076\115\074\001\002\000\036\054\123" +
    "\055\112\056\117\057\105\060\116\061\111\062\110\065" +
    "\121\066\107\067\114\070\122\071\115\072\113\074\uffae" +
    "\001\002\000\004\104\357\001\002\000\004\077\361\001" +
    "\002\000\006\077\365\105\364\001\002\000\014\006\045" +
    "\010\043\011\037\107\040\110\041\001\002\000\004\110" +
    "\363\001\002\000\006\077\uffdd\105\uffdd\001\002\000\006" +
    "\074\030\100\uffe7\001\002\000\014\006\045\010\043\011" +
    "\037\107\040\110\041\001\002\000\004\110\367\001\002" +
    "\000\006\077\uffde\105\uffde\001\002\000\004\100\371\001" +
    "\002\000\034\004\051\023\227\024\066\025\070\030\237" +
    "\032\224\035\212\036\216\037\217\040\231\041\233\042" +
    "\226\110\072\001\002\000\036\004\051\023\227\024\066" +
    "\025\070\030\237\032\224\035\212\036\216\037\217\040" +
    "\231\041\233\042\226\101\373\110\072\001\002\000\022" +
    "\004\uffe1\006\uffe1\010\uffe1\011\uffe1\013\uffe1\101\uffe1\107" +
    "\uffe1\110\uffe1\001\002\000\006\002\uffed\021\uffed\001\002" +
    "\000\022\004\uffe6\006\uffe6\010\uffe6\011\uffe6\013\uffe6\101" +
    "\uffe6\107\uffe6\110\uffe6\001\002\000\004\073\377\001\002" +
    "\000\006\021\ufff0\027\ufff0\001\002\000\004\020\u0101\001" +
    "\002\000\004\073\u0102\001\002\000\006\017\ufff3\027\ufff3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\006\002\004\061\003\001\001\000\006\012" +
    "\010\015\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\014\015" +
    "\013\016\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\020\005\016\016\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\021\001\001\000\002\001\001\000\004\007" +
    "\023\001\001\000\004\060\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\035\010\034\011\047\020\045\021\041\023\046\024" +
    "\051\001\001\000\016\003\035\011\374\020\045\021\041" +
    "\023\046\024\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\054\001\001\000\012\026\063\030\060\052\055" +
    "\053\061\001\001\000\002\001\001\000\014\014\173\017" +
    "\066\027\174\043\101\044\076\001\001\000\002\001\001" +
    "\000\004\031\153\001\001\000\002\001\001\000\012\014" +
    "\064\017\066\043\101\044\076\001\001\000\002\001\001" +
    "\000\004\057\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\133\017" +
    "\066\043\101\044\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\103\017\066\043" +
    "\101\044\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\117\001\001\000\012\014\132\017\066\043" +
    "\101\044\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\131\017\066\043\101\044\076\001\001\000" +
    "\012\014\130\017\066\043\101\044\076\001\001\000\012" +
    "\014\127\017\066\043\101\044\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\126" +
    "\017\066\043\101\044\076\001\001\000\012\014\125\017" +
    "\066\043\101\044\076\001\001\000\012\014\124\017\066" +
    "\043\101\044\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\123\017\066\043\101\044\076\001\001" +
    "\000\004\057\117\001\001\000\004\057\117\001\001\000" +
    "\004\057\117\001\001\000\004\057\117\001\001\000\004" +
    "\057\117\001\001\000\004\057\117\001\001\000\004\057" +
    "\117\001\001\000\004\057\117\001\001\000\004\057\117" +
    "\001\001\000\002\001\001\000\014\014\136\017\066\022" +
    "\137\043\101\044\076\001\001\000\004\057\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\142\017" +
    "\066\043\101\044\076\001\001\000\004\057\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\136\017\066\022\147\043\101\044\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\157\001\001\000\002\001\001\000\012\014\155" +
    "\017\066\043\101\044\076\001\001\000\004\057\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\136" +
    "\017\066\022\161\032\162\033\163\043\101\044\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\136\017" +
    "\066\022\161\032\162\033\167\043\101\044\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\172\001" +
    "\001\000\002\001\001\000\004\057\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\006\213" +
    "\017\221\023\227\034\214\035\224\036\231\037\212\040" +
    "\217\041\234\042\235\043\233\044\222\045\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\006\244\017\221\023\227\035\224\036\231\037\212" +
    "\040\217\041\234\042\235\043\233\044\222\045\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\257\017\066\043\101\044\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\240\017\066\043\101" +
    "\044\076\001\001\000\004\057\117\001\001\000\002\001" +
    "\001\000\034\006\213\017\221\023\227\034\243\035\224" +
    "\036\231\037\212\040\217\041\234\042\235\043\233\044" +
    "\222\045\220\001\001\000\032\006\244\017\221\023\227" +
    "\035\224\036\231\037\212\040\217\041\234\042\235\043" +
    "\233\044\222\045\220\001\001\000\002\001\001\000\004" +
    "\046\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\213\017\221\023\227\034\251\035\224\036\231" +
    "\037\212\040\217\041\234\042\235\043\233\044\222\045" +
    "\220\001\001\000\032\006\244\017\221\023\227\035\224" +
    "\036\231\037\212\040\217\041\234\042\235\043\233\044" +
    "\222\045\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\047\274\050" +
    "\275\001\001\000\012\014\304\017\066\043\101\044\076" +
    "\001\001\000\006\050\300\051\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\213\017\221\023\227\034\302\035\224\036" +
    "\231\037\212\040\217\041\234\042\235\043\233\044\222" +
    "\045\220\001\001\000\032\006\244\017\221\023\227\035" +
    "\224\036\231\037\212\040\217\041\234\042\235\043\233" +
    "\044\222\045\220\001\001\000\002\001\001\000\004\057" +
    "\117\001\001\000\034\006\213\017\221\023\227\034\306" +
    "\035\224\036\231\037\212\040\217\041\234\042\235\043" +
    "\233\044\222\045\220\001\001\000\032\006\244\017\221" +
    "\023\227\035\224\036\231\037\212\040\217\041\234\042" +
    "\235\043\233\044\222\045\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\312\017\066\043\101\044" +
    "\076\001\001\000\004\057\117\001\001\000\002\001\001" +
    "\000\034\006\213\017\221\023\227\034\315\035\224\036" +
    "\231\037\212\040\217\041\234\042\235\043\233\044\222" +
    "\045\220\001\001\000\032\006\244\017\221\023\227\035" +
    "\224\036\231\037\212\040\217\041\234\042\235\043\233" +
    "\044\222\045\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\321\017\066\043\101\044\076\001\001" +
    "\000\004\057\117\001\001\000\002\001\001\000\012\014" +
    "\324\017\066\043\101\044\076\001\001\000\004\057\117" +
    "\001\001\000\002\001\001\000\034\006\213\017\221\023" +
    "\227\034\327\035\224\036\231\037\212\040\217\041\234" +
    "\042\235\043\233\044\222\045\220\001\001\000\032\006" +
    "\244\017\221\023\227\035\224\036\231\037\212\040\217" +
    "\041\234\042\235\043\233\044\222\045\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\221\035\333" +
    "\054\335\001\001\000\002\001\001\000\004\020\351\001" +
    "\001\000\002\001\001\000\010\017\341\035\340\055\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\310\056\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\213\017" +
    "\221\023\227\034\347\035\224\036\231\037\212\040\217" +
    "\041\234\042\235\043\233\044\222\045\220\001\001\000" +
    "\032\006\244\017\221\023\227\035\224\036\231\037\212" +
    "\040\217\041\234\042\235\043\233\044\222\045\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\354\017\066\043\101\044\076\001\001\000" +
    "\004\057\117\001\001\000\002\001\001\000\004\025\357" +
    "\001\001\000\002\001\001\000\004\020\361\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\367\001\001" +
    "\000\004\020\365\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\213\017\221\023\227" +
    "\034\371\035\224\036\231\037\212\040\217\041\234\042" +
    "\235\043\233\044\222\045\220\001\001\000\032\006\244" +
    "\017\221\023\227\035\224\036\231\037\212\040\217\041" +
    "\234\042\235\043\233\044\222\045\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoGraphik$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoGraphik$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoGraphik$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz = new Nodo(); 
    public void syntax_error(Symbol s)
    {
        ErroresGraphik.agregarError("Error sintactico", s.value.toString() + " no debe de ir en esa posicion", s.right, s.left);
    }

    public void unrecovered_syntax_error(Symbol s)
    {
        ErroresGraphik.agregarError("Error sintactico", "No se pudo recuperar de: " + s.value.toString(), s.right, s.left);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoGraphik$actions {




  private final SintacticoGraphik parser;

  /** Constructor */
  CUP$SintacticoGraphik$actions(SintacticoGraphik parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoGraphik$do_action_part00000000(
    int                        CUP$SintacticoGraphik$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGraphik$parser,
    java.util.Stack            CUP$SintacticoGraphik$stack,
    int                        CUP$SintacticoGraphik$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoGraphik$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoGraphik$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoGraphik$parser.done_parsing();
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
System.out.println("inicio");
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 LIMPORTAR LINCLUIR LALS 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 raiz = LALS; System.out.println("FINALIZO"); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LID ::= LID punto iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LID",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LID ::= iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LID",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPO ::= entero 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO ::= decimal 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO ::= caracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= cadena 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LVALOR ::= LVALOR coma VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",16, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LVALOR ::= VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",16, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LIMPORTAR ::= LIMPORTAR IMPORTAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",8, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LIMPORTAR ::= IMPORTAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",8, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IMPORTAR ::= importar iden extgk interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LINCLUIR ::= LINCLUIR INCLUIR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LINCLUIR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LINCLUIR ::= INCLUIR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LINCLUIR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INCLUIR ::= incluirhk iden interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INCLUIR",12, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LALS ::= LALS ALS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LALS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LALS ::= ALS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LALS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ALS ::= als iden HEREDA VISIBILIDAD allave LCUERPOALS cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ALS",3, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // HEREDA ::= hereda iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HEREDA",5, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // HEREDA ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HEREDA",5, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VISIBILIDAD ::= dospuntos publico 
            {
              String RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VISIBILIDAD ::= dospuntos protegido 
            {
              String RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VISIBILIDAD ::= dospuntos privado 
            {
              String RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VISIBILIDAD ::= 
            {
              String RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LCUERPOALS ::= LCUERPOALS CUERPOALS 
            {
              Nodo RESULT =null;
		int LCUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int CUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(CUERPOALS != null)
                            LCUERPOALS.hijos.add(CUERPOALS);
                        RESULT = (Nodo) LCUERPOALS;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPOALS",6, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LCUERPOALS ::= CUERPOALS 
            {
              Nodo RESULT =null;
		int CUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        RESULT = new Nodo(Const.ldecfun);
                        if(CUERPOALS != null) 
                            RESULT = NodoGeneral.crearLdecfun(CUERPOALS);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPOALS",6, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPOALS ::= FUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPOALS ::= DEC interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPOALS ::= PRINCIPAL 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUN ::= TIPOFUN iden aparentesis LPAR cparentesis VISIBILIDAD allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("FUN",1, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPOFUN ::= TIPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPOFUN",15, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPOFUN ::= vacio 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPOFUN",15, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LPAR ::= LPAR coma TIPO iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LPAR ::= coma TIPO iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEC ::= var TIPO iden VISIBILIDAD PREASIG 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DEC",17, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PREASIG ::= LVARIABLES 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PREASIG",41, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PREASIG ::= ASIG 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PREASIG",41, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PREASIG ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PREASIG",41, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LVARIABLES ::= LVARIABLES coma iden VISIBILIDAD 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVARIABLES",40, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LVARIABLES ::= coma iden VISIBILIDAD 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVARIABLES",40, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIG ::= igual ASIGNORMAL 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG",20, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIG ::= LCORCHETES ASIGARR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG",20, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNORMAL ::= VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNORMAL",21, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNORMAL ::= nuevo iden aparentesis cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNORMAL",21, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LCORCHETES ::= LCORCHETES acorchete VALOR ccorchete 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCORCHETES",22, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LCORCHETES ::= acorchete VALOR ccorchete 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCORCHETES",22, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGARR ::= igual LLLAVES 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGARR",23, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGARR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGARR",23, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LLLAVES ::= LLLAVES coma allave LLAVE cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLLAVES",24, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LLLAVES ::= allave LLAVE cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLLAVES",24, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LLAVE ::= LVALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAVE",25, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LLAVE ::= LLLAVES 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAVE",25, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PRINCIPAL ::= vacio inicio aparentesis cparentesis allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",18, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LCUERPO ::= LCUERPO CUERPO 
            {
              Nodo RESULT =null;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(CUERPO != null)
                            LCUERPO.hijos.add(CUERPO);
                        RESULT = (Nodo) LCUERPO;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPO",26, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LCUERPO ::= CUERPO 
            {
              Nodo RESULT =null;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 
                        RESULT = new Nodo(Const.lcuerpo);
                        if(CUERPO != null)
                            RESULT = NodoGeneral.crearCuerpo(CUERPO);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPO",26, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUERPO ::= DEC interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CUERPO ::= ASIGNACION interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CUERPO ::= SI 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CUERPO ::= SELECCION 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CUERPO ::= PARA 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CUERPO ::= MIENTRAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUERPO ::= HACER 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUERPO ::= LLAMADO interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CUERPO ::= LLAMADOHK interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CUERPO ::= GRAFICAR interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPO ::= retornar VALOR interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUERPO ::= terminar interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CUERPO ::= continuar interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNACION ::= LID LCORCHETES igual VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SI ::= si aparentesis VALOR cparentesis allave LCUERPO cllave SINO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SI",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SINO ::= sino allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SINO",36, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SINO ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SINO",36, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SELECCION ::= seleccion aparentesis LID cparentesis allave LCASOS DEFECTO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SELECCION",29, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LCASOS ::= LCASOS CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCASOS",37, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LCASOS ::= CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCASOS",37, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CASO ::= caso VALOR dospuntos LCUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CASO",38, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DEFECTO ::= defecto dospuntos LCUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DEFECTO",39, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DEFECTO ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DEFECTO",39, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARA ::= para aparentesis ASIGPARA dospuntos VALPARA cparentesis allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PARA",30, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIGPARA ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGPARA",42, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIGPARA ::= var TIPO iden igual VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGPARA",42, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALPARA ::= LID OP 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALPARA",43, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALPARA ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALPARA",43, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP ::= masmas 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP ::= menosmenos 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MIENTRAS ::= mientras aparentesis VALOR cparentesis allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MIENTRAS",31, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // HACER ::= hacer allave LCUERPO cllave mientras aparentesis VALOR cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HACER",32, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // GRAFICAR ::= graphikarfuncion aparentesis iden coma iden cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("GRAFICAR",35, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LLAMADO ::= llamar iden aparentesis LVALOR cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADO",33, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LLAMADOHK ::= llamarhk iden aparentesis LVALOR cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADOHK",34, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALOR ::= VALOR mas VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mas, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALOR ::= VALOR or VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.or, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALOR ::= VALOR and VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.and, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALOR ::= VALOR OPREL VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearRelacional(op, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALOR ::= VALOR menos VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.menos, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALOR ::= VALOR por VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.por, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALOR ::= VALOR dividido VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.dividido, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALOR ::= VALOR pot VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.pot, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALOR ::= menos VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.unario, t1, null); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALOR ::= aparentesis VALOR cparentesis 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALOR ::= numero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.numero, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALOR ::= decimal 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.decimal, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALOR ::= verdadero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.verdadero, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALOR ::= falso 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.falso, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALOR ::= car 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.caracter, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALOR ::= cad 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.cadena, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALOR ::= LID 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALOR ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALOR ::= LLAMADOHK 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPREL ::= menor 
            {
              String RESULT =null;
		 RESULT = Const.menor; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPREL ::= mayor 
            {
              String RESULT =null;
		 RESULT = Const.mayor; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPREL ::= menorigual 
            {
              String RESULT =null;
		 RESULT = Const.menorigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPREL ::= mayorigual 
            {
              String RESULT =null;
		 RESULT = Const.mayorigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPREL ::= igualigual 
            {
              String RESULT =null;
		 RESULT = Const.igualigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPREL ::= diferente 
            {
              String RESULT =null;
		 RESULT = Const.diferente; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoGraphik$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoGraphik$do_action(
    int                        CUP$SintacticoGraphik$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGraphik$parser,
    java.util.Stack            CUP$SintacticoGraphik$stack,
    int                        CUP$SintacticoGraphik$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoGraphik$do_action_part00000000(
                               CUP$SintacticoGraphik$act_num,
                               CUP$SintacticoGraphik$parser,
                               CUP$SintacticoGraphik$stack,
                               CUP$SintacticoGraphik$top);
    }
}

}
