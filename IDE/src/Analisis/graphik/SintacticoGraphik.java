
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.graphik;

import java_cup.runtime.Symbol;
import Reportes.*;
import fabrica.*;
import ide.Const;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoGraphik extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symsG.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoGraphik() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoGraphik(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoGraphik(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\062\002\000\002\002" +
    "\005\000\002\016\005\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\021\005\000\002" +
    "\021\003\000\002\021\002\000\002\015\003\000\002\015" +
    "\002\000\002\012\004\000\002\012\003\000\002\014\006" +
    "\000\002\014\005\000\002\004\004\000\002\004\003\000" +
    "\002\005\011\000\002\007\004\000\002\007\002\000\002" +
    "\061\004\000\002\061\004\000\002\061\004\000\002\061" +
    "\002\000\002\010\004\000\002\010\003\000\002\011\003" +
    "\000\002\011\004\000\002\011\003\000\002\003\013\000" +
    "\002\020\003\000\002\020\003\000\002\024\006\000\002" +
    "\024\004\000\002\024\002\000\002\022\007\000\002\052" +
    "\003\000\002\052\003\000\002\052\002\000\002\051\006" +
    "\000\002\051\005\000\002\025\004\000\002\025\004\000" +
    "\002\026\003\000\002\026\006\000\002\027\006\000\002" +
    "\027\005\000\002\030\004\000\002\030\002\000\002\031" +
    "\007\000\002\031\005\000\002\032\003\000\002\032\003" +
    "\000\002\023\011\000\002\033\004\000\002\033\003\000" +
    "\002\006\004\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\005\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\034\006\000\002" +
    "\034\005\000\002\035\012\000\002\045\006\000\002\045" +
    "\002\000\002\036\012\000\002\046\004\000\002\046\003" +
    "\000\002\047\006\000\002\050\005\000\002\050\002\000" +
    "\002\037\015\000\002\053\003\000\002\053\007\000\002" +
    "\054\004\000\002\054\003\000\002\055\003\000\002\055" +
    "\003\000\002\040\011\000\002\041\012\000\002\044\010" +
    "\000\002\042\007\000\002\043\007\000\002\056\006\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\013\004\000\002\013\005\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\057\004\000\002\057\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\010\017\000\021\000\027\000\001\002\000" +
    "\010\017\012\021\ufff2\027\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\110\u0111\001" +
    "\002\000\004\021\021\001\002\000\010\017\ufff0\021\ufff0" +
    "\027\ufff0\001\002\000\004\110\015\001\002\000\010\017" +
    "\012\021\ufff3\027\007\001\002\000\010\017\ufff1\021\ufff1" +
    "\027\ufff1\001\002\000\004\020\016\001\002\000\004\073" +
    "\017\001\002\000\010\017\uffef\021\uffef\027\uffef\001\002" +
    "\000\006\002\uffec\021\uffec\001\002\000\004\110\024\001" +
    "\002\000\006\002\uffff\021\021\001\002\000\006\002\uffed" +
    "\021\uffed\001\002\000\010\022\026\074\uffe9\100\uffe9\001" +
    "\002\000\006\074\031\100\uffe5\001\002\000\004\110\027" +
    "\001\002\000\006\074\uffea\100\uffea\001\002\000\004\100" +
    "\035\001\002\000\010\014\034\015\033\016\032\001\002" +
    "\000\014\073\uffe7\075\uffe7\077\uffe7\100\uffe7\102\uffe7\001" +
    "\002\000\014\073\uffe6\075\uffe6\077\uffe6\100\uffe6\102\uffe6" +
    "\001\002\000\014\073\uffe8\075\uffe8\077\uffe8\100\uffe8\102" +
    "\uffe8\001\002\000\022\004\053\006\047\007\042\010\044" +
    "\011\041\012\037\013\046\110\043\001\002\000\024\004" +
    "\053\006\047\007\042\010\044\011\041\012\037\013\046" +
    "\101\u010f\110\043\001\002\000\004\110\ufff8\001\002\000" +
    "\024\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\101\uffe2\110\uffe2\001\002\000\004\110\ufff9\001" +
    "\002\000\004\110\ufffb\001\002\000\004\110\ufff7\001\002" +
    "\000\004\110\ufffa\001\002\000\004\110\u0102\001\002\000" +
    "\006\026\216\110\uffdd\001\002\000\004\110\ufffc\001\002" +
    "\000\004\110\uffde\001\002\000\004\073\215\001\002\000" +
    "\024\004\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\101\uffe3\110\uffe3\001\002\000\016\006\047\007" +
    "\042\010\044\011\041\012\037\110\043\001\002\000\024" +
    "\004\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\101\uffe0\110\uffe0\001\002\000\004\110\056\001\002" +
    "\000\014\073\uffe5\074\031\075\uffe5\077\uffe5\102\uffe5\001" +
    "\002\000\012\073\uffd6\075\060\077\062\102\065\001\002" +
    "\000\034\005\211\024\070\025\077\055\101\064\073\104" +
    "\105\106\104\107\074\110\075\111\076\112\106\113\102" +
    "\114\100\001\002\000\006\073\uffd8\077\204\001\002\000" +
    "\004\110\202\001\002\000\010\073\uffcc\075\166\102\156" +
    "\001\002\000\004\073\uffd9\001\002\000\032\024\070\025" +
    "\077\055\101\064\073\104\105\106\104\107\074\110\075" +
    "\111\076\112\106\113\102\114\100\001\002\000\004\073" +
    "\uffd7\001\002\000\040\054\130\055\116\056\125\057\111" +
    "\060\123\061\115\062\114\063\120\065\126\066\113\067" +
    "\121\070\127\071\122\072\117\103\165\001\002\000\004" +
    "\110\161\001\002\000\052\054\uff8b\055\uff8b\056\uff8b\057" +
    "\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\065\uff8b\066\uff8b" +
    "\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b\077" +
    "\uff8b\101\uff8b\103\uff8b\105\uff8b\001\002\000\056\054\uff87" +
    "\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062\uff87\063" +
    "\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071\uff87\072\uff87" +
    "\073\uff87\074\uff87\076\144\077\uff87\101\uff87\102\065\103" +
    "\uff87\105\uff87\001\002\000\032\024\070\025\077\055\101" +
    "\064\073\104\105\106\104\107\074\110\075\111\076\112" +
    "\106\113\102\114\100\001\002\000\052\054\uff90\055\uff90" +
    "\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\065" +
    "\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073\uff90" +
    "\074\uff90\077\uff90\101\uff90\103\uff90\105\uff90\001\002\000" +
    "\066\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\063\ufffd\065\ufffd\066\ufffd\067" +
    "\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd" +
    "\076\ufffd\077\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\105" +
    "\ufffd\001\002\000\052\054\uff8c\055\uff8c\056\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\062\uff8c\063\uff8c\065\uff8c\066\uff8c\067" +
    "\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\077\uff8c" +
    "\101\uff8c\103\uff8c\105\uff8c\001\002\000\004\110\075\001" +
    "\002\000\052\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e" +
    "\061\uff8e\062\uff8e\063\uff8e\065\uff8e\066\uff8e\067\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\077\uff8e\101\uff8e" +
    "\103\uff8e\105\uff8e\001\002\000\032\024\070\025\077\055" +
    "\101\064\073\104\105\106\104\107\074\110\075\111\076" +
    "\112\106\113\102\114\100\001\002\000\052\054\uff8f\055" +
    "\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f" +
    "\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073" +
    "\uff8f\074\uff8f\077\uff8f\101\uff8f\103\uff8f\105\uff8f\001\002" +
    "\000\052\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061" +
    "\uff89\062\uff89\063\uff89\065\uff89\066\uff89\067\uff89\070\uff89" +
    "\071\uff89\072\uff89\073\uff89\074\uff89\077\uff89\101\uff89\103" +
    "\uff89\105\uff89\001\002\000\052\054\uff91\055\uff91\056\uff91" +
    "\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\065\uff91\066" +
    "\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91" +
    "\077\uff91\101\uff91\103\uff91\105\uff91\001\002\000\032\024" +
    "\070\025\077\055\101\064\073\104\105\106\104\107\074" +
    "\110\075\111\076\112\106\113\102\114\100\001\002\000" +
    "\052\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d" +
    "\062\uff8d\063\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071" +
    "\uff8d\072\uff8d\073\uff8d\074\uff8d\077\uff8d\101\uff8d\103\uff8d" +
    "\105\uff8d\001\002\000\052\054\uff8a\055\uff8a\056\uff8a\057" +
    "\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\065\uff8a\066\uff8a" +
    "\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\077" +
    "\uff8a\101\uff8a\103\uff8a\105\uff8a\001\002\000\040\054\130" +
    "\055\116\056\125\057\111\060\123\061\115\062\114\063" +
    "\120\065\126\066\113\067\121\070\127\071\122\072\117" +
    "\105\112\001\002\000\032\024\070\025\077\055\101\064" +
    "\073\104\105\106\104\107\074\110\075\111\076\112\106" +
    "\113\102\114\100\001\002\000\052\054\uff92\055\uff92\056" +
    "\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\065\uff92" +
    "\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074" +
    "\uff92\077\uff92\101\uff92\103\uff92\105\uff92\001\002\000\032" +
    "\024\uff83\025\uff83\055\uff83\064\uff83\104\uff83\106\uff83\107" +
    "\uff83\110\uff83\111\uff83\112\uff83\113\uff83\114\uff83\001\002" +
    "\000\032\024\070\025\077\055\101\064\073\104\105\106" +
    "\104\107\074\110\075\111\076\112\106\113\102\114\100" +
    "\001\002\000\032\024\070\025\077\055\101\064\073\104" +
    "\105\106\104\107\074\110\075\111\076\112\106\113\102" +
    "\114\100\001\002\000\032\024\070\025\077\055\101\064" +
    "\073\104\105\106\104\107\074\110\075\111\076\112\106" +
    "\113\102\114\100\001\002\000\032\024\uff82\025\uff82\055" +
    "\uff82\064\uff82\104\uff82\106\uff82\107\uff82\110\uff82\111\uff82" +
    "\112\uff82\113\uff82\114\uff82\001\002\000\032\024\070\025" +
    "\077\055\101\064\073\104\105\106\104\107\074\110\075" +
    "\111\076\112\106\113\102\114\100\001\002\000\032\024" +
    "\uff86\025\uff86\055\uff86\064\uff86\104\uff86\106\uff86\107\uff86" +
    "\110\uff86\111\uff86\112\uff86\113\uff86\114\uff86\001\002\000" +
    "\032\024\uff81\025\uff81\055\uff81\064\uff81\104\uff81\106\uff81" +
    "\107\uff81\110\uff81\111\uff81\112\uff81\113\uff81\114\uff81\001" +
    "\002\000\032\024\070\025\077\055\101\064\073\104\105" +
    "\106\104\107\074\110\075\111\076\112\106\113\102\114" +
    "\100\001\002\000\032\024\070\025\077\055\101\064\073" +
    "\104\105\106\104\107\074\110\075\111\076\112\106\113" +
    "\102\114\100\001\002\000\032\024\070\025\077\055\101" +
    "\064\073\104\105\106\104\107\074\110\075\111\076\112" +
    "\106\113\102\114\100\001\002\000\032\024\uff84\025\uff84" +
    "\055\uff84\064\uff84\104\uff84\106\uff84\107\uff84\110\uff84\111" +
    "\uff84\112\uff84\113\uff84\114\uff84\001\002\000\032\024\uff85" +
    "\025\uff85\055\uff85\064\uff85\104\uff85\106\uff85\107\uff85\110" +
    "\uff85\111\uff85\112\uff85\113\uff85\114\uff85\001\002\000\032" +
    "\024\070\025\077\055\101\064\073\104\105\106\104\107" +
    "\074\110\075\111\076\112\106\113\102\114\100\001\002" +
    "\000\052\054\uff9d\055\uff9d\056\125\057\111\060\123\061" +
    "\uff9d\062\uff9d\063\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\073\uff9d\074\uff9d\077\uff9d\101\uff9d\103" +
    "\uff9d\105\uff9d\001\002\000\052\054\uff97\055\uff97\056\uff97" +
    "\057\uff97\060\123\061\uff97\062\uff97\063\uff97\065\uff97\066" +
    "\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97" +
    "\077\uff97\101\uff97\103\uff97\105\uff97\001\002\000\052\054" +
    "\130\055\116\056\125\057\111\060\123\061\115\062\114" +
    "\063\120\065\126\066\113\067\121\070\127\071\122\072" +
    "\117\073\uff99\074\uff99\077\uff99\101\uff99\103\uff99\105\uff99" +
    "\001\002\000\052\054\uff95\055\uff95\056\uff95\057\uff95\060" +
    "\123\061\uff95\062\uff95\063\uff95\065\uff95\066\uff95\067\uff95" +
    "\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95\077\uff95\101" +
    "\uff95\103\uff95\105\uff95\001\002\000\052\054\130\055\116" +
    "\056\125\057\111\060\123\061\115\062\uff9b\063\uff9b\065" +
    "\126\066\113\067\121\070\127\071\122\072\117\073\uff9b" +
    "\074\uff9b\077\uff9b\101\uff9b\103\uff9b\105\uff9b\001\002\000" +
    "\052\054\uff98\055\uff98\056\125\057\111\060\123\061\uff98" +
    "\062\uff98\063\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071" +
    "\uff98\072\uff98\073\uff98\074\uff98\077\uff98\101\uff98\103\uff98" +
    "\105\uff98\001\002\000\052\054\130\055\116\056\125\057" +
    "\111\060\123\061\uff9a\062\uff9a\063\uff9a\065\126\066\113" +
    "\067\121\070\127\071\122\072\117\073\uff9a\074\uff9a\077" +
    "\uff9a\101\uff9a\103\uff9a\105\uff9a\001\002\000\052\054\130" +
    "\055\116\056\125\057\111\060\123\061\115\062\uff9c\063" +
    "\120\065\126\066\113\067\121\070\127\071\122\072\117" +
    "\073\uff9c\074\uff9c\077\uff9c\101\uff9c\103\uff9c\105\uff9c\001" +
    "\002\000\052\054\uff96\055\uff96\056\uff96\057\uff96\060\123" +
    "\061\uff96\062\uff96\063\uff96\065\uff96\066\uff96\067\uff96\070" +
    "\uff96\071\uff96\072\uff96\073\uff96\074\uff96\077\uff96\101\uff96" +
    "\103\uff96\105\uff96\001\002\000\052\054\uff93\055\uff93\056" +
    "\125\057\111\060\123\061\uff93\062\uff93\063\uff93\065\uff93" +
    "\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93\074" +
    "\uff93\077\uff93\101\uff93\103\uff93\105\uff93\001\002\000\006" +
    "\076\144\104\145\001\002\000\004\110\153\001\002\000" +
    "\036\024\070\025\077\055\101\064\073\077\ufff4\104\105" +
    "\105\ufff4\106\104\107\074\110\075\111\076\112\106\113" +
    "\102\114\100\001\002\000\006\077\151\105\150\001\002" +
    "\000\044\054\130\055\116\056\125\057\111\060\123\061" +
    "\115\062\114\063\120\065\126\066\113\067\121\070\127" +
    "\071\122\072\117\077\ufff5\101\ufff5\105\ufff5\001\002\000" +
    "\052\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071" +
    "\uffa0\072\uffa0\073\uffa0\074\uffa0\077\uffa0\101\uffa0\103\uffa0" +
    "\105\uffa0\001\002\000\032\024\070\025\077\055\101\064" +
    "\073\104\105\106\104\107\074\110\075\111\076\112\106" +
    "\113\102\114\100\001\002\000\044\054\130\055\116\056" +
    "\125\057\111\060\123\061\115\062\114\063\120\065\126" +
    "\066\113\067\121\070\127\071\122\072\117\077\ufff6\101" +
    "\ufff6\105\ufff6\001\002\000\066\052\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe" +
    "\073\ufffe\074\ufffe\075\ufffe\076\ufffe\077\ufffe\101\ufffe\102" +
    "\ufffe\103\ufffe\104\ufffe\105\ufffe\001\002\000\052\054\130" +
    "\055\116\056\125\057\111\060\123\061\uff94\062\uff94\063" +
    "\uff94\065\126\066\113\067\121\070\127\071\122\072\117" +
    "\073\uff94\074\uff94\077\uff94\101\uff94\103\uff94\105\uff94\001" +
    "\002\000\054\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88" +
    "\061\uff88\062\uff88\063\uff88\065\uff88\066\uff88\067\uff88\070" +
    "\uff88\071\uff88\072\uff88\073\uff88\074\uff88\077\uff88\101\uff88" +
    "\102\156\103\uff88\105\uff88\001\002\000\032\024\070\025" +
    "\077\055\101\064\073\104\105\106\104\107\074\110\075" +
    "\111\076\112\106\113\102\114\100\001\002\000\040\054" +
    "\130\055\116\056\125\057\111\060\123\061\115\062\114" +
    "\063\120\065\126\066\113\067\121\070\127\071\122\072" +
    "\117\103\160\001\002\000\056\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\065\uffcf\066" +
    "\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf" +
    "\075\uffcf\077\uffcf\101\uffcf\102\uffcf\103\uffcf\105\uffcf\001" +
    "\002\000\004\104\162\001\002\000\036\024\070\025\077" +
    "\055\101\064\073\077\ufff4\104\105\105\ufff4\106\104\107" +
    "\074\110\075\111\076\112\106\113\102\114\100\001\002" +
    "\000\006\077\151\105\164\001\002\000\052\054\uff9f\055" +
    "\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f" +
    "\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073" +
    "\uff9f\074\uff9f\077\uff9f\101\uff9f\103\uff9f\105\uff9f\001\002" +
    "\000\056\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\065\uffce\066\uffce\067\uffce\070\uffce" +
    "\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\077\uffce\101" +
    "\uffce\102\uffce\103\uffce\105\uffce\001\002\000\004\100\171" +
    "\001\002\000\004\073\uffd2\001\002\000\006\073\uffcd\077" +
    "\176\001\002\000\040\024\070\025\077\055\101\064\073" +
    "\077\ufff4\100\171\101\ufff4\104\105\106\104\107\074\110" +
    "\075\111\076\112\106\113\102\114\100\001\002\000\006" +
    "\077\151\101\uffc9\001\002\000\006\077\176\101\uffc8\001" +
    "\002\000\004\101\175\001\002\000\010\073\uffca\077\uffca" +
    "\101\uffca\001\002\000\004\100\177\001\002\000\040\024" +
    "\070\025\077\055\101\064\073\077\ufff4\100\171\101\ufff4" +
    "\104\105\106\104\107\074\110\075\111\076\112\106\113" +
    "\102\114\100\001\002\000\004\101\201\001\002\000\010" +
    "\073\uffcb\077\uffcb\101\uffcb\001\002\000\010\073\uffe5\074" +
    "\031\077\uffe5\001\002\000\006\073\uffd4\077\uffd4\001\002" +
    "\000\004\110\205\001\002\000\010\073\uffe5\074\031\077" +
    "\uffe5\001\002\000\006\073\uffd5\077\uffd5\001\002\000\004" +
    "\073\uffd3\001\002\000\040\054\130\055\116\056\125\057" +
    "\111\060\123\061\115\062\114\063\120\065\126\066\113" +
    "\067\121\070\127\071\122\072\117\073\uffd1\001\002\000" +
    "\004\110\212\001\002\000\004\104\213\001\002\000\004" +
    "\105\214\001\002\000\004\073\uffd0\001\002\000\024\004" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\101\uffe1\110\uffe1\001\002\000\004\104\217\001\002\000" +
    "\004\105\220\001\002\000\004\100\221\001\002\000\040" +
    "\003\245\004\053\023\241\024\070\025\077\030\251\032" +
    "\236\035\222\036\227\037\231\040\243\041\246\042\240" +
    "\051\226\110\075\001\002\000\004\104\355\001\002\000" +
    "\046\003\uffc1\004\uffc1\023\uffc1\024\uffc1\025\uffc1\030\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\051\uffc1\101\uffc1\110\uffc1\001\002" +
    "\000\046\003\uffc5\004\uffc5\023\uffc5\024\uffc5\025\uffc5\030" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\051\uffc5\101\uffc5\110\uffc5\001" +
    "\002\000\042\003\245\004\053\023\241\024\070\025\077" +
    "\030\251\032\236\035\222\036\227\037\231\040\243\041" +
    "\246\042\240\051\226\101\354\110\075\001\002\000\004" +
    "\104\351\001\002\000\004\104\343\001\002\000\004\073" +
    "\342\001\002\000\004\100\333\001\002\000\046\003\uffc0" +
    "\004\uffc0\023\uffc0\024\uffc0\025\uffc0\030\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\051\uffc0\101\uffc0\110\uffc0\001\002\000\004\073" +
    "\332\001\002\000\010\075\325\076\144\102\065\001\002" +
    "\000\004\073\324\001\002\000\004\104\304\001\002\000" +
    "\004\073\303\001\002\000\004\104\276\001\002\000\032" +
    "\024\070\025\077\055\101\064\073\104\105\106\104\107" +
    "\074\110\075\111\076\112\106\113\102\114\100\001\002" +
    "\000\004\073\273\001\002\000\004\073\272\001\002\000" +
    "\046\003\uffc2\004\uffc2\023\uffc2\024\uffc2\025\uffc2\030\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\051\uffc2\101\uffc2\110\uffc2\001\002" +
    "\000\004\073\271\001\002\000\004\073\270\001\002\000" +
    "\004\073\267\001\002\000\046\003\uffbf\004\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\051\uffbf" +
    "\101\uffbf\110\uffbf\001\002\000\004\104\253\001\002\000" +
    "\046\003\uffbe\004\uffbe\023\uffbe\024\uffbe\025\uffbe\030\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\051\uffbe\101\uffbe\110\uffbe\001\002" +
    "\000\032\024\070\025\077\055\101\064\073\104\105\106" +
    "\104\107\074\110\075\111\076\112\106\113\102\114\100" +
    "\001\002\000\040\054\130\055\116\056\125\057\111\060" +
    "\123\061\115\062\114\063\120\065\126\066\113\067\121" +
    "\070\127\071\122\072\117\105\255\001\002\000\004\100" +
    "\256\001\002\000\040\003\245\004\053\023\241\024\070" +
    "\025\077\030\251\032\236\035\222\036\227\037\231\040" +
    "\243\041\246\042\240\051\226\110\075\001\002\000\042" +
    "\003\245\004\053\023\241\024\070\025\077\030\251\032" +
    "\236\035\222\036\227\037\231\040\243\041\246\042\240" +
    "\051\226\101\261\110\075\001\002\000\046\003\uffc6\004" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\030\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\051\uffc6\101\uffc6\110\uffc6\001\002\000\050\003\uffb1" +
    "\004\uffb1\023\uffb1\024\uffb1\025\uffb1\030\uffb1\031\262\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\051\uffb1\101\uffb1\110\uffb1\001\002\000" +
    "\004\100\264\001\002\000\046\003\uffb3\004\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\030\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\051\uffb3" +
    "\101\uffb3\110\uffb3\001\002\000\040\003\245\004\053\023" +
    "\241\024\070\025\077\030\251\032\236\035\222\036\227" +
    "\037\231\040\243\041\246\042\240\051\226\110\075\001" +
    "\002\000\042\003\245\004\053\023\241\024\070\025\077" +
    "\030\251\032\236\035\222\036\227\037\231\040\243\041" +
    "\246\042\240\051\226\101\266\110\075\001\002\000\046" +
    "\003\uffb2\004\uffb2\023\uffb2\024\uffb2\025\uffb2\030\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\051\uffb2\101\uffb2\110\uffb2\001\002\000" +
    "\046\003\uffbd\004\uffbd\023\uffbd\024\uffbd\025\uffbd\030\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\051\uffbd\101\uffbd\110\uffbd\001\002" +
    "\000\046\003\uffb8\004\uffb8\023\uffb8\024\uffb8\025\uffb8\030" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\051\uffb8\101\uffb8\110\uffb8\001" +
    "\002\000\046\003\uffb6\004\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\030\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\051\uffb6\101\uffb6\110\uffb6" +
    "\001\002\000\046\003\uffb7\004\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\030\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\042\uffb7\051\uffb7\101\uffb7\110" +
    "\uffb7\001\002\000\046\003\uffc4\004\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\030\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\051\uffc4\101\uffc4" +
    "\110\uffc4\001\002\000\040\054\130\055\116\056\125\057" +
    "\111\060\123\061\115\062\114\063\120\065\126\066\113" +
    "\067\121\070\127\071\122\072\117\073\275\001\002\000" +
    "\046\003\uffb9\004\uffb9\023\uffb9\024\uffb9\025\uffb9\030\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\051\uffb9\101\uffb9\110\uffb9\001\002" +
    "\000\004\110\075\001\002\000\006\076\144\077\300\001" +
    "\002\000\004\110\075\001\002\000\006\076\144\105\302" +
    "\001\002\000\004\073\uffa1\001\002\000\046\003\uffc3\004" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\030\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\051\uffc3\101\uffc3\110\uffc3\001\002\000\004\110\075" +
    "\001\002\000\006\076\144\105\306\001\002\000\004\100" +
    "\307\001\002\000\004\034\310\001\002\000\032\024\070" +
    "\025\077\055\101\064\073\104\105\106\104\107\074\110" +
    "\075\111\076\112\106\113\102\114\100\001\002\000\010" +
    "\033\314\034\310\101\uffab\001\002\000\010\033\uffae\034" +
    "\uffae\101\uffae\001\002\000\004\101\320\001\002\000\004" +
    "\074\316\001\002\000\010\033\uffaf\034\uffaf\101\uffaf\001" +
    "\002\000\040\003\245\004\053\023\241\024\070\025\077" +
    "\030\251\032\236\035\222\036\227\037\231\040\243\041" +
    "\246\042\240\051\226\110\075\001\002\000\042\003\245" +
    "\004\053\023\241\024\070\025\077\030\251\032\236\035" +
    "\222\036\227\037\231\040\243\041\246\042\240\051\226" +
    "\101\uffac\110\075\001\002\000\046\003\uffb0\004\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\030\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\051" +
    "\uffb0\101\uffb0\110\uffb0\001\002\000\040\054\130\055\116" +
    "\056\125\057\111\060\123\061\115\062\114\063\120\065" +
    "\126\066\113\067\121\070\127\071\122\072\117\074\322" +
    "\001\002\000\040\003\245\004\053\023\241\024\070\025" +
    "\077\030\251\032\236\035\222\036\227\037\231\040\243" +
    "\041\246\042\240\051\226\110\075\001\002\000\046\003" +
    "\245\004\053\023\241\024\070\025\077\030\251\032\236" +
    "\033\uffad\034\uffad\035\222\036\227\037\231\040\243\041" +
    "\246\042\240\051\226\101\uffad\110\075\001\002\000\046" +
    "\003\uffbc\004\uffbc\023\uffbc\024\uffbc\025\uffbc\030\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\051\uffbc\101\uffbc\110\uffbc\001\002\000" +
    "\032\024\070\025\077\055\101\064\073\104\105\106\104" +
    "\107\074\110\075\111\076\112\106\113\102\114\100\001" +
    "\002\000\006\075\327\102\156\001\002\000\032\024\070" +
    "\025\077\055\101\064\073\104\105\106\104\107\074\110" +
    "\075\111\076\112\106\113\102\114\100\001\002\000\044" +
    "\054\130\055\116\056\125\057\111\060\123\061\115\062" +
    "\114\063\120\065\126\066\113\067\121\070\127\071\122" +
    "\072\117\073\uffb5\074\uffb5\105\uffb5\001\002\000\044\054" +
    "\130\055\116\056\125\057\111\060\123\061\115\062\114" +
    "\063\120\065\126\066\113\067\121\070\127\071\122\072" +
    "\117\073\uffb4\074\uffb4\105\uffb4\001\002\000\046\003\uffbb" +
    "\004\uffbb\023\uffbb\024\uffbb\025\uffbb\030\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\051\uffbb\101\uffbb\110\uffbb\001\002\000\040\003" +
    "\245\004\053\023\241\024\070\025\077\030\251\032\236" +
    "\035\222\036\227\037\231\040\243\041\246\042\240\051" +
    "\226\110\075\001\002\000\042\003\245\004\053\023\241" +
    "\024\070\025\077\030\251\032\236\035\222\036\227\037" +
    "\231\040\243\041\246\042\240\051\226\101\335\110\075" +
    "\001\002\000\004\036\336\001\002\000\004\104\337\001" +
    "\002\000\032\024\070\025\077\055\101\064\073\104\105" +
    "\106\104\107\074\110\075\111\076\112\106\113\102\114" +
    "\100\001\002\000\040\054\130\055\116\056\125\057\111" +
    "\060\123\061\115\062\114\063\120\065\126\066\113\067" +
    "\121\070\127\071\122\072\117\105\341\001\002\000\046" +
    "\003\uffa2\004\uffa2\023\uffa2\024\uffa2\025\uffa2\030\uffa2\032" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\051\uffa2\101\uffa2\110\uffa2\001\002\000" +
    "\046\003\uffba\004\uffba\023\uffba\024\uffba\025\uffba\030\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\051\uffba\101\uffba\110\uffba\001\002" +
    "\000\032\024\070\025\077\055\101\064\073\104\105\106" +
    "\104\107\074\110\075\111\076\112\106\113\102\114\100" +
    "\001\002\000\040\054\130\055\116\056\125\057\111\060" +
    "\123\061\115\062\114\063\120\065\126\066\113\067\121" +
    "\070\127\071\122\072\117\105\345\001\002\000\004\100" +
    "\346\001\002\000\040\003\245\004\053\023\241\024\070" +
    "\025\077\030\251\032\236\035\222\036\227\037\231\040" +
    "\243\041\246\042\240\051\226\110\075\001\002\000\042" +
    "\003\245\004\053\023\241\024\070\025\077\030\251\032" +
    "\236\035\222\036\227\037\231\040\243\041\246\042\240" +
    "\051\226\101\350\110\075\001\002\000\046\003\uffa3\004" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\030\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042" +
    "\uffa3\051\uffa3\101\uffa3\110\uffa3\001\002\000\032\024\070" +
    "\025\077\055\101\064\073\104\105\106\104\107\074\110" +
    "\075\111\076\112\106\113\102\114\100\001\002\000\040" +
    "\054\130\055\116\056\125\057\111\060\123\061\115\062" +
    "\114\063\120\065\126\066\113\067\121\070\127\071\122" +
    "\072\117\105\353\001\002\000\004\073\uff9e\001\002\000" +
    "\024\004\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\101\uffc7\110\uffc7\001\002\000\006\004\357\110" +
    "\075\001\002\000\004\074\uffa9\001\002\000\016\006\047" +
    "\007\042\010\044\011\041\012\037\110\043\001\002\000" +
    "\004\074\361\001\002\000\032\024\070\025\077\055\101" +
    "\064\073\104\105\106\104\107\074\110\075\111\076\112" +
    "\106\113\102\114\100\001\002\000\040\054\130\055\116" +
    "\056\125\057\111\060\123\061\115\062\114\063\120\065" +
    "\126\066\113\067\121\070\127\071\122\072\117\074\363" +
    "\001\002\000\004\110\075\001\002\000\004\105\uffa6\001" +
    "\002\000\004\105\372\001\002\000\014\052\370\053\371" +
    "\075\325\076\144\102\065\001\002\000\004\105\uffa7\001" +
    "\002\000\004\105\uffa5\001\002\000\004\105\uffa4\001\002" +
    "\000\004\100\373\001\002\000\040\003\245\004\053\023" +
    "\241\024\070\025\077\030\251\032\236\035\222\036\227" +
    "\037\231\040\243\041\246\042\240\051\226\110\075\001" +
    "\002\000\042\003\245\004\053\023\241\024\070\025\077" +
    "\030\251\032\236\035\222\036\227\037\231\040\243\041" +
    "\246\042\240\051\226\101\375\110\075\001\002\000\046" +
    "\003\uffaa\004\uffaa\023\uffaa\024\uffaa\025\uffaa\030\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\051\uffaa\101\uffaa\110\uffaa\001\002\000" +
    "\004\110\377\001\002\000\004\075\u0100\001\002\000\032" +
    "\024\070\025\077\055\101\064\073\104\105\106\104\107" +
    "\074\110\075\111\076\112\106\113\102\114\100\001\002" +
    "\000\040\054\130\055\116\056\125\057\111\060\123\061" +
    "\115\062\114\063\120\065\126\066\113\067\121\070\127" +
    "\071\122\072\117\074\uffa8\001\002\000\004\104\u0103\001" +
    "\002\000\022\006\047\007\042\010\044\011\041\012\037" +
    "\077\uffda\105\uffda\110\043\001\002\000\006\077\u0108\105" +
    "\u0107\001\002\000\004\110\u0106\001\002\000\006\077\uffdb" +
    "\105\uffdb\001\002\000\006\074\031\100\uffe5\001\002\000" +
    "\016\006\047\007\042\010\044\011\041\012\037\110\043" +
    "\001\002\000\004\110\u010a\001\002\000\006\077\uffdc\105" +
    "\uffdc\001\002\000\004\100\u010c\001\002\000\040\003\245" +
    "\004\053\023\241\024\070\025\077\030\251\032\236\035" +
    "\222\036\227\037\231\040\243\041\246\042\240\051\226" +
    "\110\075\001\002\000\042\003\245\004\053\023\241\024" +
    "\070\025\077\030\251\032\236\035\222\036\227\037\231" +
    "\040\243\041\246\042\240\051\226\101\u010e\110\075\001" +
    "\002\000\024\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\101\uffdf\110\uffdf\001\002\000\006\002" +
    "\uffeb\021\uffeb\001\002\000\024\004\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\013\uffe4\101\uffe4\110\uffe4\001" +
    "\002\000\004\073\u0112\001\002\000\010\017\uffee\021\uffee" +
    "\027\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\006\002\004\062\003\001\001\000\010\012" +
    "\012\014\010\015\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\021\005\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\022\001\001\000\002\001\001\000\004\007" +
    "\024\001\001\000\004\061\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\037\010\035\011\051\017\047\020\044\022\050\023" +
    "\053\001\001\000\016\003\037\011\u010f\017\047\020\044" +
    "\022\050\023\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\056\001\001\000\012\025\065" +
    "\027\062\051\060\052\063\001\001\000\016\013\207\016" +
    "\071\026\206\042\106\043\102\057\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\166\001\001\000" +
    "\002\001\001\000\014\013\066\016\071\042\106\043\102" +
    "\057\070\001\001\000\002\001\001\000\004\060\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\154" +
    "\001\001\000\014\013\153\016\071\042\106\043\102\057" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\142\001\001\000\002\001\001\000" +
    "\014\013\141\016\071\042\106\043\102\057\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\107\016\071\042\106\043\102\057\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\123\001" +
    "\001\000\014\013\140\016\071\042\106\043\102\057\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\013" +
    "\137\016\071\042\106\043\102\057\070\001\001\000\014" +
    "\013\136\016\071\042\106\043\102\057\070\001\001\000" +
    "\014\013\135\016\071\042\106\043\102\057\070\001\001" +
    "\000\002\001\001\000\014\013\134\016\071\042\106\043" +
    "\102\057\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\133\016\071\042\106\043\102\057\070\001" +
    "\001\000\014\013\132\016\071\042\106\043\102\057\070" +
    "\001\001\000\014\013\131\016\071\042\106\043\102\057" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\130\016\071\042\106\043\102\057\070\001\001\000" +
    "\004\060\123\001\001\000\004\060\123\001\001\000\004" +
    "\060\123\001\001\000\004\060\123\001\001\000\004\060" +
    "\123\001\001\000\004\060\123\001\001\000\004\060\123" +
    "\001\001\000\004\060\123\001\001\000\004\060\123\001" +
    "\001\000\004\060\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\146\016\071\021\145\042\106\043" +
    "\102\057\070\001\001\000\002\001\001\000\004\060\123" +
    "\001\001\000\002\001\001\000\014\013\151\016\071\042" +
    "\106\043\102\057\070\001\001\000\004\060\123\001\001" +
    "\000\002\001\001\000\004\060\123\001\001\000\002\001" +
    "\001\000\014\013\156\016\071\042\106\043\102\057\070" +
    "\001\001\000\004\060\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\013\146\016\071\021\162\042\106" +
    "\043\102\057\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\146\016\071\021" +
    "\171\031\172\032\173\042\106\043\102\057\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\013\146\016\071" +
    "\021\171\031\172\032\177\042\106\043\102\057\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\223\016\233\022\241\033\224\034\236\035\243\036\222" +
    "\037\231\040\247\041\251\042\246\043\234\044\232\056" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\257\016\233\022\241\034\236\035" +
    "\243\036\222\037\231\040\247\041\251\042\246\043\234" +
    "\044\232\056\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\273\016\071\042\106\043\102\057\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\253\016\071\042\106\043\102\057\070\001\001\000" +
    "\004\060\123\001\001\000\002\001\001\000\036\006\223" +
    "\016\233\022\241\033\256\034\236\035\243\036\222\037" +
    "\231\040\247\041\251\042\246\043\234\044\232\056\227" +
    "\001\001\000\034\006\257\016\233\022\241\034\236\035" +
    "\243\036\222\037\231\040\247\041\251\042\246\043\234" +
    "\044\232\056\227\001\001\000\002\001\001\000\004\045" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\006\223\016\233\022\241\033\264\034\236\035\243\036" +
    "\222\037\231\040\247\041\251\042\246\043\234\044\232" +
    "\056\227\001\001\000\034\006\257\016\233\022\241\034" +
    "\236\035\243\036\222\037\231\040\247\041\251\042\246" +
    "\043\234\044\232\056\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\123\001\001\000" +
    "\002\001\001\000\004\016\276\001\001\000\002\001\001" +
    "\000\004\016\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\046\310\047\311\001" +
    "\001\000\014\013\320\016\071\042\106\043\102\057\070" +
    "\001\001\000\006\047\314\050\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\223\016\233\022\241\033\316\034\236\035" +
    "\243\036\222\037\231\040\247\041\251\042\246\043\234" +
    "\044\232\056\227\001\001\000\034\006\257\016\233\022" +
    "\241\034\236\035\243\036\222\037\231\040\247\041\251" +
    "\042\246\043\234\044\232\056\227\001\001\000\002\001" +
    "\001\000\004\060\123\001\001\000\036\006\223\016\233" +
    "\022\241\033\322\034\236\035\243\036\222\037\231\040" +
    "\247\041\251\042\246\043\234\044\232\056\227\001\001" +
    "\000\034\006\257\016\233\022\241\034\236\035\243\036" +
    "\222\037\231\040\247\041\251\042\246\043\234\044\232" +
    "\056\227\001\001\000\002\001\001\000\014\013\330\016" +
    "\071\042\106\043\102\057\070\001\001\000\002\001\001" +
    "\000\014\013\327\016\071\042\106\043\102\057\070\001" +
    "\001\000\004\060\123\001\001\000\004\060\123\001\001" +
    "\000\002\001\001\000\036\006\223\016\233\022\241\033" +
    "\333\034\236\035\243\036\222\037\231\040\247\041\251" +
    "\042\246\043\234\044\232\056\227\001\001\000\034\006" +
    "\257\016\233\022\241\034\236\035\243\036\222\037\231" +
    "\040\247\041\251\042\246\043\234\044\232\056\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\337" +
    "\016\071\042\106\043\102\057\070\001\001\000\004\060" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\343\016\071\042\106\043\102\057\070\001\001\000" +
    "\004\060\123\001\001\000\002\001\001\000\036\006\223" +
    "\016\233\022\241\033\346\034\236\035\243\036\222\037" +
    "\231\040\247\041\251\042\246\043\234\044\232\056\227" +
    "\001\001\000\034\006\257\016\233\022\241\034\236\035" +
    "\243\036\222\037\231\040\247\041\251\042\246\043\234" +
    "\044\232\056\227\001\001\000\002\001\001\000\014\013" +
    "\351\016\071\042\106\043\102\057\070\001\001\000\004" +
    "\060\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\233\034\355\053\357\001\001\000\002\001\001" +
    "\000\004\017\375\001\001\000\002\001\001\000\014\013" +
    "\361\016\071\042\106\043\102\057\070\001\001\000\004" +
    "\060\123\001\001\000\010\016\365\034\363\054\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\325" +
    "\055\366\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\223\016\233" +
    "\022\241\033\373\034\236\035\243\036\222\037\231\040" +
    "\247\041\251\042\246\043\234\044\232\056\227\001\001" +
    "\000\034\006\257\016\233\022\241\034\236\035\243\036" +
    "\222\037\231\040\247\041\251\042\246\043\234\044\232" +
    "\056\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\u0100\016\071\042\106\043\102" +
    "\057\070\001\001\000\004\060\123\001\001\000\002\001" +
    "\001\000\006\017\u0104\024\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\u010a\001" +
    "\001\000\004\017\u0108\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\223\016\233\022" +
    "\241\033\u010c\034\236\035\243\036\222\037\231\040\247" +
    "\041\251\042\246\043\234\044\232\056\227\001\001\000" +
    "\034\006\257\016\233\022\241\034\236\035\243\036\222" +
    "\037\231\040\247\041\251\042\246\043\234\044\232\056" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoGraphik$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoGraphik$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoGraphik$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz = new Nodo(); 
    public void syntax_error(Symbol s)
    {
        ErroresGraphik.agregarError("Error sintactico", s.value.toString() + " no debe de ir en esa posicion", s.right, s.left);
    }

    public void unrecovered_syntax_error(Symbol s)
    {
        ErroresGraphik.agregarError("Error sintactico", "No se pudo recuperar de: " + s.value.toString(), s.right, s.left);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoGraphik$actions {




  private final SintacticoGraphik parser;

  /** Constructor */
  CUP$SintacticoGraphik$actions(SintacticoGraphik parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoGraphik$do_action_part00000000(
    int                        CUP$SintacticoGraphik$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGraphik$parser,
    java.util.Stack            CUP$SintacticoGraphik$stack,
    int                        CUP$SintacticoGraphik$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoGraphik$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoGraphik$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoGraphik$parser.done_parsing();
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
System.out.println("inicio");
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 INCLUIR LALS 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int LALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 raiz = null; System.out.println("FINALIZO"); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LID ::= LID punto iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LID",12, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LID ::= iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LID",12, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPO ::= entero 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO ::= decimal 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO ::= caracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= cadena 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= bool 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LVALOR ::= LVALOR coma VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LVALOR ::= VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LVALOR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INCLUIR ::= LIMPORTAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INCLUIR",11, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INCLUIR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INCLUIR",11, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LIMPORTAR ::= LIMPORTAR IMPORTAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",8, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LIMPORTAR ::= IMPORTAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",8, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IMPORTAR ::= importar iden extgk interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTAR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IMPORTAR ::= incluirhk iden interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTAR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LALS ::= LALS ALS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LALS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LALS ::= ALS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LALS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ALS ::= als iden HEREDA VISIBILIDAD allave LCUERPOALS cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ALS",3, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // HEREDA ::= hereda iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HEREDA",5, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // HEREDA ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HEREDA",5, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VISIBILIDAD ::= dospuntos publico 
            {
              String RESULT =null;
		 RESULT = Const.publico; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",47, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VISIBILIDAD ::= dospuntos protegido 
            {
              String RESULT =null;
		 RESULT = Const.protegido; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",47, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VISIBILIDAD ::= dospuntos privado 
            {
              String RESULT =null;
		 RESULT = Const.privado; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",47, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VISIBILIDAD ::= 
            {
              String RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",47, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LCUERPOALS ::= LCUERPOALS CUERPOALS 
            {
              Nodo RESULT =null;
		int LCUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int CUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(CUERPOALS != null)
                            LCUERPOALS.hijos.add(CUERPOALS);
                        RESULT = (Nodo) LCUERPOALS;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPOALS",6, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LCUERPOALS ::= CUERPOALS 
            {
              Nodo RESULT =null;
		int CUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        RESULT = new Nodo(Const.ldecfun);
                        if(CUERPOALS != null) 
                            RESULT = NodoGeneral.crearLdecfun(CUERPOALS);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPOALS",6, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPOALS ::= FUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPOALS ::= DEC interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPOALS ::= PRINCIPAL 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUN ::= TIPOFUN iden aparentesis LPAR cparentesis VISIBILIDAD allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("FUN",1, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPOFUN ::= TIPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPOFUN",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPOFUN ::= vacio 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPOFUN",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LPAR ::= LPAR coma TIPO iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",18, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LPAR ::= TIPO iden 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",18, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LPAR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",18, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DEC ::= var TIPO iden VISIBILIDAD PREASIG 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DEC",16, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PREASIG ::= LVARIABLES 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PREASIG",40, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PREASIG ::= ASIG 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PREASIG",40, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PREASIG ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PREASIG",40, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LVARIABLES ::= LVARIABLES coma iden VISIBILIDAD 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVARIABLES",39, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LVARIABLES ::= coma iden VISIBILIDAD 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVARIABLES",39, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIG ::= igual ASIGNORMAL 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIG ::= LCORCHETES ASIGARR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNORMAL ::= VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNORMAL",20, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNORMAL ::= nuevo iden aparentesis cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNORMAL",20, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LCORCHETES ::= LCORCHETES acorchete VALOR ccorchete 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCORCHETES",21, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LCORCHETES ::= acorchete VALOR ccorchete 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCORCHETES",21, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGARR ::= igual LLLAVES 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGARR",22, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGARR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGARR",22, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LLLAVES ::= LLLAVES coma allave LLAVE cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLLAVES",23, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LLLAVES ::= allave LLAVE cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLLAVES",23, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LLAVE ::= LVALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAVE",24, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LLAVE ::= LLLAVES 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAVE",24, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PRINCIPAL ::= vacio inicio aparentesis cparentesis allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",17, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LCUERPO ::= LCUERPO CUERPO 
            {
              Nodo RESULT =null;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(CUERPO != null)
                            LCUERPO.hijos.add(CUERPO);
                        RESULT = (Nodo) LCUERPO;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPO",25, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LCUERPO ::= CUERPO 
            {
              Nodo RESULT =null;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 
                        RESULT = new Nodo(Const.lcuerpo);
                        if(CUERPO != null)
                            RESULT = NodoGeneral.crearCuerpo(CUERPO);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPO",25, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CUERPO ::= DEC interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CUERPO ::= ASIGNACION interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CUERPO ::= SI 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUERPO ::= SELECCION 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUERPO ::= PARA 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CUERPO ::= MIENTRAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CUERPO ::= HACER 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPO ::= LLAMADO interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUERPO ::= LLAMADOHK interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CUERPO ::= GRAFICAR interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CUERPO ::= IMPRIMIR interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CUERPO ::= retornar VALOR interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CUERPO ::= terminar interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUERPO ::= continuar interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CUERPO ::= error interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIGNACION ::= LID LCORCHETES igual VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNACION ::= LID igual VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SI ::= si aparentesis VALOR cparentesis allave LCUERPO cllave SINO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SI",27, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SINO ::= sino allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SINO",35, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SINO ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SINO",35, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SELECCION ::= seleccion aparentesis LID cparentesis allave LCASOS DEFECTO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SELECCION",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LCASOS ::= LCASOS CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCASOS",36, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LCASOS ::= CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCASOS",36, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASO ::= caso VALOR dospuntos LCUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CASO",37, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DEFECTO ::= defecto dospuntos LCUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DEFECTO",38, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DEFECTO ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DEFECTO",38, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARA ::= para aparentesis ASIGPARA dospuntos VALOR dospuntos VALPARA cparentesis allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PARA",29, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGPARA ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGPARA",41, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIGPARA ::= var TIPO iden igual VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGPARA",41, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALPARA ::= LID OP 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALPARA",42, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALPARA ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALPARA",42, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP ::= masmas 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OP",43, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP ::= menosmenos 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OP",43, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MIENTRAS ::= mientras aparentesis VALOR cparentesis allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // HACER ::= hacer allave LCUERPO cllave mientras aparentesis VALOR cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HACER",31, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // GRAFICAR ::= graphikarfuncion aparentesis LID coma LID cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("GRAFICAR",34, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LLAMADO ::= llamar LID aparentesis LVALOR cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADO",32, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LLAMADOHK ::= llamarhk iden aparentesis LVALOR cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADOHK",33, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IMPRIMIR ::= imprimir aparentesis VALOR cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",44, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALOR ::= VALOR mas VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mas, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALOR ::= VALOR or VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.or, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALOR ::= VALOR xor VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.xor, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALOR ::= VALOR and VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.and, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALOR ::= VALOR OPREL VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearRelacional(op, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALOR ::= VALOR menos VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.menos, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALOR ::= VALOR por VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.por, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALOR ::= VALOR dividido VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.dividido, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALOR ::= VALOR pot VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.pot, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALOR ::= not VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.not, t1, null); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALOR ::= menos VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.unario, t1, null); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALOR ::= aparentesis VALOR cparentesis 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALOR ::= numero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.numero, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALOR ::= dec 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.decimal, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALOR ::= verdadero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.verdadero, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALOR ::= falso 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.falso, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALOR ::= car 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.caracter, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALOR ::= cad 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.cadena, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALOR ::= ACCESO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALOR ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VALOR ::= LLAMADOHK 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ACCESO ::= LID LCORCHETES 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESO",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ACCESO ::= LID 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = LID; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESO",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPREL ::= menor 
            {
              String RESULT =null;
		 RESULT = Const.menor; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPREL ::= mayor 
            {
              String RESULT =null;
		 RESULT = Const.mayor; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPREL ::= menorigual 
            {
              String RESULT =null;
		 RESULT = Const.menorigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPREL ::= mayorigual 
            {
              String RESULT =null;
		 RESULT = Const.mayorigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPREL ::= igualigual 
            {
              String RESULT =null;
		 RESULT = Const.igualigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPREL ::= diferente 
            {
              String RESULT =null;
		 RESULT = Const.diferente; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoGraphik$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoGraphik$do_action(
    int                        CUP$SintacticoGraphik$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGraphik$parser,
    java.util.Stack            CUP$SintacticoGraphik$stack,
    int                        CUP$SintacticoGraphik$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoGraphik$do_action_part00000000(
                               CUP$SintacticoGraphik$act_num,
                               CUP$SintacticoGraphik$parser,
                               CUP$SintacticoGraphik$stack,
                               CUP$SintacticoGraphik$top);
    }
}

}
