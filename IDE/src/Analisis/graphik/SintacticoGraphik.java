
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.graphik;

import java_cup.runtime.Symbol;
import Reportes.*;
import fabrica.*;
import ide.Const;
import semanticos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoGraphik extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symsG.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoGraphik() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoGraphik(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoGraphik(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\062\002\000\002\002" +
    "\005\000\002\016\005\000\002\016\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\017\005\000\002" +
    "\017\003\000\002\017\002\000\002\015\003\000\002\015" +
    "\002\000\002\012\004\000\002\012\003\000\002\014\006" +
    "\000\002\014\005\000\002\004\004\000\002\004\003\000" +
    "\002\005\011\000\002\007\004\000\002\007\002\000\002" +
    "\057\004\000\002\057\004\000\002\057\004\000\002\057" +
    "\002\000\002\010\004\000\002\010\003\000\002\011\003" +
    "\000\002\011\004\000\002\011\003\000\002\003\013\000" +
    "\002\061\003\000\002\061\003\000\002\022\006\000\002" +
    "\022\004\000\002\022\002\000\002\020\007\000\002\050" +
    "\003\000\002\050\003\000\002\050\002\000\002\047\006" +
    "\000\002\047\005\000\002\023\004\000\002\023\004\000" +
    "\002\024\003\000\002\024\006\000\002\025\006\000\002" +
    "\025\005\000\002\026\004\000\002\026\002\000\002\027" +
    "\007\000\002\027\005\000\002\030\003\000\002\030\003" +
    "\000\002\021\011\000\002\031\004\000\002\031\003\000" +
    "\002\006\004\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\005\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\032\006\000\002" +
    "\032\005\000\002\033\012\000\002\043\006\000\002\043" +
    "\002\000\002\034\012\000\002\044\004\000\002\044\003" +
    "\000\002\045\006\000\002\046\005\000\002\046\002\000" +
    "\002\035\015\000\002\051\003\000\002\051\007\000\002" +
    "\052\004\000\002\052\003\000\002\053\003\000\002\053" +
    "\003\000\002\036\011\000\002\037\012\000\002\042\010" +
    "\000\002\040\007\000\002\041\007\000\002\054\006\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\013\004\000\002\013\005\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\055\004\000\002\055\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\010\017\000\020\000\026\000\001\002\000" +
    "\010\017\012\020\ufff2\026\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\107\u0111\001" +
    "\002\000\004\020\021\001\002\000\010\017\ufff0\020\ufff0" +
    "\026\ufff0\001\002\000\004\107\015\001\002\000\010\017" +
    "\012\020\ufff3\026\007\001\002\000\010\017\ufff1\020\ufff1" +
    "\026\ufff1\001\002\000\004\114\016\001\002\000\004\072" +
    "\017\001\002\000\010\017\uffef\020\uffef\026\uffef\001\002" +
    "\000\006\002\uffec\020\uffec\001\002\000\004\107\024\001" +
    "\002\000\006\002\uffff\020\021\001\002\000\006\002\uffed" +
    "\020\uffed\001\002\000\010\021\026\073\uffe9\077\uffe9\001" +
    "\002\000\006\073\031\077\uffe5\001\002\000\004\107\027" +
    "\001\002\000\006\073\uffea\077\uffea\001\002\000\004\077" +
    "\035\001\002\000\010\014\034\015\033\016\032\001\002" +
    "\000\014\072\uffe7\074\uffe7\076\uffe7\077\uffe7\101\uffe7\001" +
    "\002\000\014\072\uffe6\074\uffe6\076\uffe6\077\uffe6\101\uffe6" +
    "\001\002\000\014\072\uffe8\074\uffe8\076\uffe8\077\uffe8\101" +
    "\uffe8\001\002\000\022\004\053\006\047\007\042\010\044" +
    "\011\041\012\037\013\046\107\043\001\002\000\024\004" +
    "\053\006\047\007\042\010\044\011\041\012\037\013\046" +
    "\100\u010f\107\043\001\002\000\004\107\ufff8\001\002\000" +
    "\024\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\100\uffe2\107\uffe2\001\002\000\004\107\ufff9\001" +
    "\002\000\004\107\ufffb\001\002\000\004\107\ufff7\001\002" +
    "\000\004\107\ufffa\001\002\000\004\107\u0102\001\002\000" +
    "\006\025\216\107\uffdd\001\002\000\004\107\ufffc\001\002" +
    "\000\004\107\uffde\001\002\000\004\072\215\001\002\000" +
    "\024\004\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\100\uffe3\107\uffe3\001\002\000\016\006\047\007" +
    "\042\010\044\011\041\012\037\107\043\001\002\000\024" +
    "\004\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\100\uffe0\107\uffe0\001\002\000\004\107\056\001\002" +
    "\000\014\072\uffe5\073\031\074\uffe5\076\uffe5\101\uffe5\001" +
    "\002\000\012\072\uffd6\074\060\076\062\101\065\001\002" +
    "\000\034\005\211\023\070\024\077\054\101\063\073\103" +
    "\105\105\104\106\074\107\075\110\076\111\106\112\102" +
    "\113\100\001\002\000\006\072\uffd8\076\204\001\002\000" +
    "\004\107\202\001\002\000\010\072\uffcc\074\166\101\156" +
    "\001\002\000\004\072\uffd9\001\002\000\032\023\070\024" +
    "\077\054\101\063\073\103\105\105\104\106\074\107\075" +
    "\110\076\111\106\112\102\113\100\001\002\000\004\072" +
    "\uffd7\001\002\000\040\053\130\054\116\055\125\056\111" +
    "\057\123\060\115\061\114\062\120\064\126\065\113\066" +
    "\121\067\127\070\122\071\117\102\165\001\002\000\004" +
    "\107\161\001\002\000\052\053\uff8b\054\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\064\uff8b\065\uff8b" +
    "\066\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\076" +
    "\uff8b\100\uff8b\102\uff8b\104\uff8b\001\002\000\056\053\uff87" +
    "\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062" +
    "\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071\uff87" +
    "\072\uff87\073\uff87\075\144\076\uff87\100\uff87\101\065\102" +
    "\uff87\104\uff87\001\002\000\032\023\070\024\077\054\101" +
    "\063\073\103\105\105\104\106\074\107\075\110\076\111" +
    "\106\112\102\113\100\001\002\000\052\053\uff90\054\uff90" +
    "\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\064" +
    "\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90" +
    "\073\uff90\076\uff90\100\uff90\102\uff90\104\uff90\001\002\000" +
    "\066\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\062\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd" +
    "\075\ufffd\076\ufffd\100\ufffd\101\ufffd\102\ufffd\103\ufffd\104" +
    "\ufffd\001\002\000\052\053\uff8c\054\uff8c\055\uff8c\056\uff8c" +
    "\057\uff8c\060\uff8c\061\uff8c\062\uff8c\064\uff8c\065\uff8c\066" +
    "\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\076\uff8c" +
    "\100\uff8c\102\uff8c\104\uff8c\001\002\000\004\107\075\001" +
    "\002\000\052\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e" +
    "\060\uff8e\061\uff8e\062\uff8e\064\uff8e\065\uff8e\066\uff8e\067" +
    "\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\076\uff8e\100\uff8e" +
    "\102\uff8e\104\uff8e\001\002\000\032\023\070\024\077\054" +
    "\101\063\073\103\105\105\104\106\074\107\075\110\076" +
    "\111\106\112\102\113\100\001\002\000\052\053\uff8f\054" +
    "\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f" +
    "\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072" +
    "\uff8f\073\uff8f\076\uff8f\100\uff8f\102\uff8f\104\uff8f\001\002" +
    "\000\052\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060" +
    "\uff89\061\uff89\062\uff89\064\uff89\065\uff89\066\uff89\067\uff89" +
    "\070\uff89\071\uff89\072\uff89\073\uff89\076\uff89\100\uff89\102" +
    "\uff89\104\uff89\001\002\000\052\053\uff91\054\uff91\055\uff91" +
    "\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\064\uff91\065" +
    "\uff91\066\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91" +
    "\076\uff91\100\uff91\102\uff91\104\uff91\001\002\000\032\023" +
    "\070\024\077\054\101\063\073\103\105\105\104\106\074" +
    "\107\075\110\076\111\106\112\102\113\100\001\002\000" +
    "\052\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d" +
    "\061\uff8d\062\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070" +
    "\uff8d\071\uff8d\072\uff8d\073\uff8d\076\uff8d\100\uff8d\102\uff8d" +
    "\104\uff8d\001\002\000\052\053\uff8a\054\uff8a\055\uff8a\056" +
    "\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\064\uff8a\065\uff8a" +
    "\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\076" +
    "\uff8a\100\uff8a\102\uff8a\104\uff8a\001\002\000\040\053\130" +
    "\054\116\055\125\056\111\057\123\060\115\061\114\062" +
    "\120\064\126\065\113\066\121\067\127\070\122\071\117" +
    "\104\112\001\002\000\032\023\070\024\077\054\101\063" +
    "\073\103\105\105\104\106\074\107\075\110\076\111\106" +
    "\112\102\113\100\001\002\000\052\053\uff92\054\uff92\055" +
    "\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\064\uff92" +
    "\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073" +
    "\uff92\076\uff92\100\uff92\102\uff92\104\uff92\001\002\000\032" +
    "\023\uff83\024\uff83\054\uff83\063\uff83\103\uff83\105\uff83\106" +
    "\uff83\107\uff83\110\uff83\111\uff83\112\uff83\113\uff83\001\002" +
    "\000\032\023\070\024\077\054\101\063\073\103\105\105" +
    "\104\106\074\107\075\110\076\111\106\112\102\113\100" +
    "\001\002\000\032\023\070\024\077\054\101\063\073\103" +
    "\105\105\104\106\074\107\075\110\076\111\106\112\102" +
    "\113\100\001\002\000\032\023\070\024\077\054\101\063" +
    "\073\103\105\105\104\106\074\107\075\110\076\111\106" +
    "\112\102\113\100\001\002\000\032\023\uff82\024\uff82\054" +
    "\uff82\063\uff82\103\uff82\105\uff82\106\uff82\107\uff82\110\uff82" +
    "\111\uff82\112\uff82\113\uff82\001\002\000\032\023\070\024" +
    "\077\054\101\063\073\103\105\105\104\106\074\107\075" +
    "\110\076\111\106\112\102\113\100\001\002\000\032\023" +
    "\uff86\024\uff86\054\uff86\063\uff86\103\uff86\105\uff86\106\uff86" +
    "\107\uff86\110\uff86\111\uff86\112\uff86\113\uff86\001\002\000" +
    "\032\023\uff81\024\uff81\054\uff81\063\uff81\103\uff81\105\uff81" +
    "\106\uff81\107\uff81\110\uff81\111\uff81\112\uff81\113\uff81\001" +
    "\002\000\032\023\070\024\077\054\101\063\073\103\105" +
    "\105\104\106\074\107\075\110\076\111\106\112\102\113" +
    "\100\001\002\000\032\023\070\024\077\054\101\063\073" +
    "\103\105\105\104\106\074\107\075\110\076\111\106\112" +
    "\102\113\100\001\002\000\032\023\070\024\077\054\101" +
    "\063\073\103\105\105\104\106\074\107\075\110\076\111" +
    "\106\112\102\113\100\001\002\000\032\023\uff84\024\uff84" +
    "\054\uff84\063\uff84\103\uff84\105\uff84\106\uff84\107\uff84\110" +
    "\uff84\111\uff84\112\uff84\113\uff84\001\002\000\032\023\uff85" +
    "\024\uff85\054\uff85\063\uff85\103\uff85\105\uff85\106\uff85\107" +
    "\uff85\110\uff85\111\uff85\112\uff85\113\uff85\001\002\000\032" +
    "\023\070\024\077\054\101\063\073\103\105\105\104\106" +
    "\074\107\075\110\076\111\106\112\102\113\100\001\002" +
    "\000\052\053\uff9d\054\uff9d\055\125\056\111\057\123\060" +
    "\uff9d\061\uff9d\062\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d" +
    "\070\uff9d\071\uff9d\072\uff9d\073\uff9d\076\uff9d\100\uff9d\102" +
    "\uff9d\104\uff9d\001\002\000\052\053\uff97\054\uff97\055\uff97" +
    "\056\uff97\057\123\060\uff97\061\uff97\062\uff97\064\uff97\065" +
    "\uff97\066\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97" +
    "\076\uff97\100\uff97\102\uff97\104\uff97\001\002\000\052\053" +
    "\130\054\116\055\125\056\111\057\123\060\115\061\114" +
    "\062\120\064\126\065\113\066\121\067\127\070\122\071" +
    "\117\072\uff99\073\uff99\076\uff99\100\uff99\102\uff99\104\uff99" +
    "\001\002\000\052\053\uff95\054\uff95\055\uff95\056\uff95\057" +
    "\123\060\uff95\061\uff95\062\uff95\064\uff95\065\uff95\066\uff95" +
    "\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\076\uff95\100" +
    "\uff95\102\uff95\104\uff95\001\002\000\052\053\130\054\116" +
    "\055\125\056\111\057\123\060\115\061\uff9b\062\uff9b\064" +
    "\126\065\113\066\121\067\127\070\122\071\117\072\uff9b" +
    "\073\uff9b\076\uff9b\100\uff9b\102\uff9b\104\uff9b\001\002\000" +
    "\052\053\uff98\054\uff98\055\125\056\111\057\123\060\uff98" +
    "\061\uff98\062\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070" +
    "\uff98\071\uff98\072\uff98\073\uff98\076\uff98\100\uff98\102\uff98" +
    "\104\uff98\001\002\000\052\053\130\054\116\055\125\056" +
    "\111\057\123\060\uff9a\061\uff9a\062\uff9a\064\126\065\113" +
    "\066\121\067\127\070\122\071\117\072\uff9a\073\uff9a\076" +
    "\uff9a\100\uff9a\102\uff9a\104\uff9a\001\002\000\052\053\130" +
    "\054\116\055\125\056\111\057\123\060\115\061\uff9c\062" +
    "\120\064\126\065\113\066\121\067\127\070\122\071\117" +
    "\072\uff9c\073\uff9c\076\uff9c\100\uff9c\102\uff9c\104\uff9c\001" +
    "\002\000\052\053\uff96\054\uff96\055\uff96\056\uff96\057\123" +
    "\060\uff96\061\uff96\062\uff96\064\uff96\065\uff96\066\uff96\067" +
    "\uff96\070\uff96\071\uff96\072\uff96\073\uff96\076\uff96\100\uff96" +
    "\102\uff96\104\uff96\001\002\000\052\053\uff93\054\uff93\055" +
    "\125\056\111\057\123\060\uff93\061\uff93\062\uff93\064\uff93" +
    "\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073" +
    "\uff93\076\uff93\100\uff93\102\uff93\104\uff93\001\002\000\006" +
    "\075\144\103\145\001\002\000\004\107\153\001\002\000" +
    "\036\023\070\024\077\054\101\063\073\076\ufff4\103\105" +
    "\104\ufff4\105\104\106\074\107\075\110\076\111\106\112" +
    "\102\113\100\001\002\000\006\076\151\104\150\001\002" +
    "\000\044\053\130\054\116\055\125\056\111\057\123\060" +
    "\115\061\114\062\120\064\126\065\113\066\121\067\127" +
    "\070\122\071\117\076\ufff5\100\ufff5\104\ufff5\001\002\000" +
    "\052\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\061\uffa0\062\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070" +
    "\uffa0\071\uffa0\072\uffa0\073\uffa0\076\uffa0\100\uffa0\102\uffa0" +
    "\104\uffa0\001\002\000\032\023\070\024\077\054\101\063" +
    "\073\103\105\105\104\106\074\107\075\110\076\111\106" +
    "\112\102\113\100\001\002\000\044\053\130\054\116\055" +
    "\125\056\111\057\123\060\115\061\114\062\120\064\126" +
    "\065\113\066\121\067\127\070\122\071\117\076\ufff6\100" +
    "\ufff6\104\ufff6\001\002\000\066\051\ufffe\052\ufffe\053\ufffe" +
    "\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe\100\ufffe\101" +
    "\ufffe\102\ufffe\103\ufffe\104\ufffe\001\002\000\052\053\130" +
    "\054\116\055\125\056\111\057\123\060\uff94\061\uff94\062" +
    "\uff94\064\126\065\113\066\121\067\127\070\122\071\117" +
    "\072\uff94\073\uff94\076\uff94\100\uff94\102\uff94\104\uff94\001" +
    "\002\000\054\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88" +
    "\060\uff88\061\uff88\062\uff88\064\uff88\065\uff88\066\uff88\067" +
    "\uff88\070\uff88\071\uff88\072\uff88\073\uff88\076\uff88\100\uff88" +
    "\101\156\102\uff88\104\uff88\001\002\000\032\023\070\024" +
    "\077\054\101\063\073\103\105\105\104\106\074\107\075" +
    "\110\076\111\106\112\102\113\100\001\002\000\040\053" +
    "\130\054\116\055\125\056\111\057\123\060\115\061\114" +
    "\062\120\064\126\065\113\066\121\067\127\070\122\071" +
    "\117\102\160\001\002\000\056\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\064\uffcf\065" +
    "\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf" +
    "\074\uffcf\076\uffcf\100\uffcf\101\uffcf\102\uffcf\104\uffcf\001" +
    "\002\000\004\103\162\001\002\000\036\023\070\024\077" +
    "\054\101\063\073\076\ufff4\103\105\104\ufff4\105\104\106" +
    "\074\107\075\110\076\111\106\112\102\113\100\001\002" +
    "\000\006\076\151\104\164\001\002\000\052\053\uff9f\054" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072" +
    "\uff9f\073\uff9f\076\uff9f\100\uff9f\102\uff9f\104\uff9f\001\002" +
    "\000\056\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\061\uffce\062\uffce\064\uffce\065\uffce\066\uffce\067\uffce" +
    "\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\076\uffce\100" +
    "\uffce\101\uffce\102\uffce\104\uffce\001\002\000\004\077\171" +
    "\001\002\000\004\072\uffd2\001\002\000\006\072\uffcd\076" +
    "\176\001\002\000\040\023\070\024\077\054\101\063\073" +
    "\076\ufff4\077\171\100\ufff4\103\105\105\104\106\074\107" +
    "\075\110\076\111\106\112\102\113\100\001\002\000\006" +
    "\076\151\100\uffc9\001\002\000\006\076\176\100\uffc8\001" +
    "\002\000\004\100\175\001\002\000\010\072\uffca\076\uffca" +
    "\100\uffca\001\002\000\004\077\177\001\002\000\040\023" +
    "\070\024\077\054\101\063\073\076\ufff4\077\171\100\ufff4" +
    "\103\105\105\104\106\074\107\075\110\076\111\106\112" +
    "\102\113\100\001\002\000\004\100\201\001\002\000\010" +
    "\072\uffcb\076\uffcb\100\uffcb\001\002\000\010\072\uffe5\073" +
    "\031\076\uffe5\001\002\000\006\072\uffd4\076\uffd4\001\002" +
    "\000\004\107\205\001\002\000\010\072\uffe5\073\031\076" +
    "\uffe5\001\002\000\006\072\uffd5\076\uffd5\001\002\000\004" +
    "\072\uffd3\001\002\000\040\053\130\054\116\055\125\056" +
    "\111\057\123\060\115\061\114\062\120\064\126\065\113" +
    "\066\121\067\127\070\122\071\117\072\uffd1\001\002\000" +
    "\004\107\212\001\002\000\004\103\213\001\002\000\004" +
    "\104\214\001\002\000\004\072\uffd0\001\002\000\024\004" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\100\uffe1\107\uffe1\001\002\000\004\103\217\001\002\000" +
    "\004\104\220\001\002\000\004\077\221\001\002\000\040" +
    "\003\245\004\053\022\241\023\070\024\077\027\251\031" +
    "\236\034\222\035\227\036\231\037\243\040\246\041\240" +
    "\050\226\107\075\001\002\000\004\103\355\001\002\000" +
    "\046\003\uffc1\004\uffc1\022\uffc1\023\uffc1\024\uffc1\027\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\050\uffc1\100\uffc1\107\uffc1\001\002" +
    "\000\046\003\uffc5\004\uffc5\022\uffc5\023\uffc5\024\uffc5\027" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\050\uffc5\100\uffc5\107\uffc5\001" +
    "\002\000\042\003\245\004\053\022\241\023\070\024\077" +
    "\027\251\031\236\034\222\035\227\036\231\037\243\040" +
    "\246\041\240\050\226\100\354\107\075\001\002\000\004" +
    "\103\351\001\002\000\004\103\343\001\002\000\004\072" +
    "\342\001\002\000\004\077\333\001\002\000\046\003\uffc0" +
    "\004\uffc0\022\uffc0\023\uffc0\024\uffc0\027\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\050\uffc0\100\uffc0\107\uffc0\001\002\000\004\072" +
    "\332\001\002\000\010\074\325\075\144\101\065\001\002" +
    "\000\004\072\324\001\002\000\004\103\304\001\002\000" +
    "\004\072\303\001\002\000\004\103\276\001\002\000\032" +
    "\023\070\024\077\054\101\063\073\103\105\105\104\106" +
    "\074\107\075\110\076\111\106\112\102\113\100\001\002" +
    "\000\004\072\273\001\002\000\004\072\272\001\002\000" +
    "\046\003\uffc2\004\uffc2\022\uffc2\023\uffc2\024\uffc2\027\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\050\uffc2\100\uffc2\107\uffc2\001\002" +
    "\000\004\072\271\001\002\000\004\072\270\001\002\000" +
    "\004\072\267\001\002\000\046\003\uffbf\004\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\050\uffbf" +
    "\100\uffbf\107\uffbf\001\002\000\004\103\253\001\002\000" +
    "\046\003\uffbe\004\uffbe\022\uffbe\023\uffbe\024\uffbe\027\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\050\uffbe\100\uffbe\107\uffbe\001\002" +
    "\000\032\023\070\024\077\054\101\063\073\103\105\105" +
    "\104\106\074\107\075\110\076\111\106\112\102\113\100" +
    "\001\002\000\040\053\130\054\116\055\125\056\111\057" +
    "\123\060\115\061\114\062\120\064\126\065\113\066\121" +
    "\067\127\070\122\071\117\104\255\001\002\000\004\077" +
    "\256\001\002\000\040\003\245\004\053\022\241\023\070" +
    "\024\077\027\251\031\236\034\222\035\227\036\231\037" +
    "\243\040\246\041\240\050\226\107\075\001\002\000\042" +
    "\003\245\004\053\022\241\023\070\024\077\027\251\031" +
    "\236\034\222\035\227\036\231\037\243\040\246\041\240" +
    "\050\226\100\261\107\075\001\002\000\046\003\uffc6\004" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\027\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\050\uffc6\100\uffc6\107\uffc6\001\002\000\050\003\uffb1" +
    "\004\uffb1\022\uffb1\023\uffb1\024\uffb1\027\uffb1\030\262\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\050\uffb1\100\uffb1\107\uffb1\001\002\000" +
    "\004\077\264\001\002\000\046\003\uffb3\004\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\050\uffb3" +
    "\100\uffb3\107\uffb3\001\002\000\040\003\245\004\053\022" +
    "\241\023\070\024\077\027\251\031\236\034\222\035\227" +
    "\036\231\037\243\040\246\041\240\050\226\107\075\001" +
    "\002\000\042\003\245\004\053\022\241\023\070\024\077" +
    "\027\251\031\236\034\222\035\227\036\231\037\243\040" +
    "\246\041\240\050\226\100\266\107\075\001\002\000\046" +
    "\003\uffb2\004\uffb2\022\uffb2\023\uffb2\024\uffb2\027\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\050\uffb2\100\uffb2\107\uffb2\001\002\000" +
    "\046\003\uffbd\004\uffbd\022\uffbd\023\uffbd\024\uffbd\027\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\050\uffbd\100\uffbd\107\uffbd\001\002" +
    "\000\046\003\uffb8\004\uffb8\022\uffb8\023\uffb8\024\uffb8\027" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\050\uffb8\100\uffb8\107\uffb8\001" +
    "\002\000\046\003\uffb6\004\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\050\uffb6\100\uffb6\107\uffb6" +
    "\001\002\000\046\003\uffb7\004\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\027\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\050\uffb7\100\uffb7\107" +
    "\uffb7\001\002\000\046\003\uffc4\004\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\050\uffc4\100\uffc4" +
    "\107\uffc4\001\002\000\040\053\130\054\116\055\125\056" +
    "\111\057\123\060\115\061\114\062\120\064\126\065\113" +
    "\066\121\067\127\070\122\071\117\072\275\001\002\000" +
    "\046\003\uffb9\004\uffb9\022\uffb9\023\uffb9\024\uffb9\027\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\050\uffb9\100\uffb9\107\uffb9\001\002" +
    "\000\004\107\075\001\002\000\006\075\144\076\300\001" +
    "\002\000\004\107\075\001\002\000\006\075\144\104\302" +
    "\001\002\000\004\072\uffa1\001\002\000\046\003\uffc3\004" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\027\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\050\uffc3\100\uffc3\107\uffc3\001\002\000\004\107\075" +
    "\001\002\000\006\075\144\104\306\001\002\000\004\077" +
    "\307\001\002\000\004\033\310\001\002\000\032\023\070" +
    "\024\077\054\101\063\073\103\105\105\104\106\074\107" +
    "\075\110\076\111\106\112\102\113\100\001\002\000\010" +
    "\032\314\033\310\100\uffab\001\002\000\010\032\uffae\033" +
    "\uffae\100\uffae\001\002\000\004\100\320\001\002\000\004" +
    "\073\316\001\002\000\010\032\uffaf\033\uffaf\100\uffaf\001" +
    "\002\000\040\003\245\004\053\022\241\023\070\024\077" +
    "\027\251\031\236\034\222\035\227\036\231\037\243\040" +
    "\246\041\240\050\226\107\075\001\002\000\042\003\245" +
    "\004\053\022\241\023\070\024\077\027\251\031\236\034" +
    "\222\035\227\036\231\037\243\040\246\041\240\050\226" +
    "\100\uffac\107\075\001\002\000\046\003\uffb0\004\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\027\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\050" +
    "\uffb0\100\uffb0\107\uffb0\001\002\000\040\053\130\054\116" +
    "\055\125\056\111\057\123\060\115\061\114\062\120\064" +
    "\126\065\113\066\121\067\127\070\122\071\117\073\322" +
    "\001\002\000\040\003\245\004\053\022\241\023\070\024" +
    "\077\027\251\031\236\034\222\035\227\036\231\037\243" +
    "\040\246\041\240\050\226\107\075\001\002\000\046\003" +
    "\245\004\053\022\241\023\070\024\077\027\251\031\236" +
    "\032\uffad\033\uffad\034\222\035\227\036\231\037\243\040" +
    "\246\041\240\050\226\100\uffad\107\075\001\002\000\046" +
    "\003\uffbc\004\uffbc\022\uffbc\023\uffbc\024\uffbc\027\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\050\uffbc\100\uffbc\107\uffbc\001\002\000" +
    "\032\023\070\024\077\054\101\063\073\103\105\105\104" +
    "\106\074\107\075\110\076\111\106\112\102\113\100\001" +
    "\002\000\006\074\327\101\156\001\002\000\032\023\070" +
    "\024\077\054\101\063\073\103\105\105\104\106\074\107" +
    "\075\110\076\111\106\112\102\113\100\001\002\000\044" +
    "\053\130\054\116\055\125\056\111\057\123\060\115\061" +
    "\114\062\120\064\126\065\113\066\121\067\127\070\122" +
    "\071\117\072\uffb5\073\uffb5\104\uffb5\001\002\000\044\053" +
    "\130\054\116\055\125\056\111\057\123\060\115\061\114" +
    "\062\120\064\126\065\113\066\121\067\127\070\122\071" +
    "\117\072\uffb4\073\uffb4\104\uffb4\001\002\000\046\003\uffbb" +
    "\004\uffbb\022\uffbb\023\uffbb\024\uffbb\027\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\050\uffbb\100\uffbb\107\uffbb\001\002\000\040\003" +
    "\245\004\053\022\241\023\070\024\077\027\251\031\236" +
    "\034\222\035\227\036\231\037\243\040\246\041\240\050" +
    "\226\107\075\001\002\000\042\003\245\004\053\022\241" +
    "\023\070\024\077\027\251\031\236\034\222\035\227\036" +
    "\231\037\243\040\246\041\240\050\226\100\335\107\075" +
    "\001\002\000\004\035\336\001\002\000\004\103\337\001" +
    "\002\000\032\023\070\024\077\054\101\063\073\103\105" +
    "\105\104\106\074\107\075\110\076\111\106\112\102\113" +
    "\100\001\002\000\040\053\130\054\116\055\125\056\111" +
    "\057\123\060\115\061\114\062\120\064\126\065\113\066" +
    "\121\067\127\070\122\071\117\104\341\001\002\000\046" +
    "\003\uffa2\004\uffa2\022\uffa2\023\uffa2\024\uffa2\027\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\050\uffa2\100\uffa2\107\uffa2\001\002\000" +
    "\046\003\uffba\004\uffba\022\uffba\023\uffba\024\uffba\027\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037" +
    "\uffba\040\uffba\041\uffba\050\uffba\100\uffba\107\uffba\001\002" +
    "\000\032\023\070\024\077\054\101\063\073\103\105\105" +
    "\104\106\074\107\075\110\076\111\106\112\102\113\100" +
    "\001\002\000\040\053\130\054\116\055\125\056\111\057" +
    "\123\060\115\061\114\062\120\064\126\065\113\066\121" +
    "\067\127\070\122\071\117\104\345\001\002\000\004\077" +
    "\346\001\002\000\040\003\245\004\053\022\241\023\070" +
    "\024\077\027\251\031\236\034\222\035\227\036\231\037" +
    "\243\040\246\041\240\050\226\107\075\001\002\000\042" +
    "\003\245\004\053\022\241\023\070\024\077\027\251\031" +
    "\236\034\222\035\227\036\231\037\243\040\246\041\240" +
    "\050\226\100\350\107\075\001\002\000\046\003\uffa3\004" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\027\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\050\uffa3\100\uffa3\107\uffa3\001\002\000\032\023\070" +
    "\024\077\054\101\063\073\103\105\105\104\106\074\107" +
    "\075\110\076\111\106\112\102\113\100\001\002\000\040" +
    "\053\130\054\116\055\125\056\111\057\123\060\115\061" +
    "\114\062\120\064\126\065\113\066\121\067\127\070\122" +
    "\071\117\104\353\001\002\000\004\072\uff9e\001\002\000" +
    "\024\004\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\100\uffc7\107\uffc7\001\002\000\006\004\357\107" +
    "\075\001\002\000\004\073\uffa9\001\002\000\016\006\047" +
    "\007\042\010\044\011\041\012\037\107\043\001\002\000" +
    "\004\073\361\001\002\000\032\023\070\024\077\054\101" +
    "\063\073\103\105\105\104\106\074\107\075\110\076\111" +
    "\106\112\102\113\100\001\002\000\040\053\130\054\116" +
    "\055\125\056\111\057\123\060\115\061\114\062\120\064" +
    "\126\065\113\066\121\067\127\070\122\071\117\073\363" +
    "\001\002\000\004\107\075\001\002\000\004\104\uffa6\001" +
    "\002\000\004\104\372\001\002\000\014\051\370\052\371" +
    "\074\325\075\144\101\065\001\002\000\004\104\uffa7\001" +
    "\002\000\004\104\uffa5\001\002\000\004\104\uffa4\001\002" +
    "\000\004\077\373\001\002\000\040\003\245\004\053\022" +
    "\241\023\070\024\077\027\251\031\236\034\222\035\227" +
    "\036\231\037\243\040\246\041\240\050\226\107\075\001" +
    "\002\000\042\003\245\004\053\022\241\023\070\024\077" +
    "\027\251\031\236\034\222\035\227\036\231\037\243\040" +
    "\246\041\240\050\226\100\375\107\075\001\002\000\046" +
    "\003\uffaa\004\uffaa\022\uffaa\023\uffaa\024\uffaa\027\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\050\uffaa\100\uffaa\107\uffaa\001\002\000" +
    "\004\107\377\001\002\000\004\074\u0100\001\002\000\032" +
    "\023\070\024\077\054\101\063\073\103\105\105\104\106" +
    "\074\107\075\110\076\111\106\112\102\113\100\001\002" +
    "\000\040\053\130\054\116\055\125\056\111\057\123\060" +
    "\115\061\114\062\120\064\126\065\113\066\121\067\127" +
    "\070\122\071\117\073\uffa8\001\002\000\004\103\u0103\001" +
    "\002\000\022\006\047\007\042\010\044\011\041\012\037" +
    "\076\uffda\104\uffda\107\043\001\002\000\006\076\u0108\104" +
    "\u0107\001\002\000\004\107\u0106\001\002\000\006\076\uffdb" +
    "\104\uffdb\001\002\000\006\073\031\077\uffe5\001\002\000" +
    "\016\006\047\007\042\010\044\011\041\012\037\107\043" +
    "\001\002\000\004\107\u010a\001\002\000\006\076\uffdc\104" +
    "\uffdc\001\002\000\004\077\u010c\001\002\000\040\003\245" +
    "\004\053\022\241\023\070\024\077\027\251\031\236\034" +
    "\222\035\227\036\231\037\243\040\246\041\240\050\226" +
    "\107\075\001\002\000\042\003\245\004\053\022\241\023" +
    "\070\024\077\027\251\031\236\034\222\035\227\036\231" +
    "\037\243\040\246\041\240\050\226\100\u010e\107\075\001" +
    "\002\000\024\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\100\uffdf\107\uffdf\001\002\000\006\002" +
    "\uffeb\020\uffeb\001\002\000\024\004\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\013\uffe4\100\uffe4\107\uffe4\001" +
    "\002\000\004\072\u0112\001\002\000\010\017\uffee\020\uffee" +
    "\026\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\006\002\004\062\003\001\001\000\010\012" +
    "\012\014\010\015\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\021\005\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\022\001\001\000\002\001\001\000\004\007" +
    "\024\001\001\000\004\057\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\037\010\035\011\051\020\050\021\053\060\047\061" +
    "\044\001\001\000\016\003\037\011\u010f\020\050\021\053" +
    "\060\047\061\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\056\001\001\000\012\023\065" +
    "\025\062\047\060\050\063\001\001\000\016\013\207\016" +
    "\071\024\206\040\106\041\102\055\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\166\001\001\000" +
    "\002\001\001\000\014\013\066\016\071\040\106\041\102" +
    "\055\070\001\001\000\002\001\001\000\004\056\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\154" +
    "\001\001\000\014\013\153\016\071\040\106\041\102\055" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\142\001\001\000\002\001\001\000" +
    "\014\013\141\016\071\040\106\041\102\055\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\107\016\071\040\106\041\102\055\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\123\001" +
    "\001\000\014\013\140\016\071\040\106\041\102\055\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\013" +
    "\137\016\071\040\106\041\102\055\070\001\001\000\014" +
    "\013\136\016\071\040\106\041\102\055\070\001\001\000" +
    "\014\013\135\016\071\040\106\041\102\055\070\001\001" +
    "\000\002\001\001\000\014\013\134\016\071\040\106\041" +
    "\102\055\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\133\016\071\040\106\041\102\055\070\001" +
    "\001\000\014\013\132\016\071\040\106\041\102\055\070" +
    "\001\001\000\014\013\131\016\071\040\106\041\102\055" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\130\016\071\040\106\041\102\055\070\001\001\000" +
    "\004\056\123\001\001\000\004\056\123\001\001\000\004" +
    "\056\123\001\001\000\004\056\123\001\001\000\004\056" +
    "\123\001\001\000\004\056\123\001\001\000\004\056\123" +
    "\001\001\000\004\056\123\001\001\000\004\056\123\001" +
    "\001\000\004\056\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\146\016\071\017\145\040\106\041" +
    "\102\055\070\001\001\000\002\001\001\000\004\056\123" +
    "\001\001\000\002\001\001\000\014\013\151\016\071\040" +
    "\106\041\102\055\070\001\001\000\004\056\123\001\001" +
    "\000\002\001\001\000\004\056\123\001\001\000\002\001" +
    "\001\000\014\013\156\016\071\040\106\041\102\055\070" +
    "\001\001\000\004\056\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\013\146\016\071\017\162\040\106" +
    "\041\102\055\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\146\016\071\017" +
    "\171\027\172\030\173\040\106\041\102\055\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\013\146\016\071" +
    "\017\171\027\172\030\177\040\106\041\102\055\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\223\016\233\020\241\031\224\032\236\033\243\034\222" +
    "\035\231\036\247\037\251\040\246\041\234\042\232\054" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\257\016\233\020\241\032\236\033" +
    "\243\034\222\035\231\036\247\037\251\040\246\041\234" +
    "\042\232\054\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\273\016\071\040\106\041\102\055\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\253\016\071\040\106\041\102\055\070\001\001\000" +
    "\004\056\123\001\001\000\002\001\001\000\036\006\223" +
    "\016\233\020\241\031\256\032\236\033\243\034\222\035" +
    "\231\036\247\037\251\040\246\041\234\042\232\054\227" +
    "\001\001\000\034\006\257\016\233\020\241\032\236\033" +
    "\243\034\222\035\231\036\247\037\251\040\246\041\234" +
    "\042\232\054\227\001\001\000\002\001\001\000\004\043" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\006\223\016\233\020\241\031\264\032\236\033\243\034" +
    "\222\035\231\036\247\037\251\040\246\041\234\042\232" +
    "\054\227\001\001\000\034\006\257\016\233\020\241\032" +
    "\236\033\243\034\222\035\231\036\247\037\251\040\246" +
    "\041\234\042\232\054\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\123\001\001\000" +
    "\002\001\001\000\004\016\276\001\001\000\002\001\001" +
    "\000\004\016\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\044\310\045\311\001" +
    "\001\000\014\013\320\016\071\040\106\041\102\055\070" +
    "\001\001\000\006\045\314\046\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\223\016\233\020\241\031\316\032\236\033" +
    "\243\034\222\035\231\036\247\037\251\040\246\041\234" +
    "\042\232\054\227\001\001\000\034\006\257\016\233\020" +
    "\241\032\236\033\243\034\222\035\231\036\247\037\251" +
    "\040\246\041\234\042\232\054\227\001\001\000\002\001" +
    "\001\000\004\056\123\001\001\000\036\006\223\016\233" +
    "\020\241\031\322\032\236\033\243\034\222\035\231\036" +
    "\247\037\251\040\246\041\234\042\232\054\227\001\001" +
    "\000\034\006\257\016\233\020\241\032\236\033\243\034" +
    "\222\035\231\036\247\037\251\040\246\041\234\042\232" +
    "\054\227\001\001\000\002\001\001\000\014\013\330\016" +
    "\071\040\106\041\102\055\070\001\001\000\002\001\001" +
    "\000\014\013\327\016\071\040\106\041\102\055\070\001" +
    "\001\000\004\056\123\001\001\000\004\056\123\001\001" +
    "\000\002\001\001\000\036\006\223\016\233\020\241\031" +
    "\333\032\236\033\243\034\222\035\231\036\247\037\251" +
    "\040\246\041\234\042\232\054\227\001\001\000\034\006" +
    "\257\016\233\020\241\032\236\033\243\034\222\035\231" +
    "\036\247\037\251\040\246\041\234\042\232\054\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\337" +
    "\016\071\040\106\041\102\055\070\001\001\000\004\056" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\343\016\071\040\106\041\102\055\070\001\001\000" +
    "\004\056\123\001\001\000\002\001\001\000\036\006\223" +
    "\016\233\020\241\031\346\032\236\033\243\034\222\035" +
    "\231\036\247\037\251\040\246\041\234\042\232\054\227" +
    "\001\001\000\034\006\257\016\233\020\241\032\236\033" +
    "\243\034\222\035\231\036\247\037\251\040\246\041\234" +
    "\042\232\054\227\001\001\000\002\001\001\000\014\013" +
    "\351\016\071\040\106\041\102\055\070\001\001\000\004" +
    "\056\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\233\032\355\051\357\001\001\000\002\001\001" +
    "\000\004\060\375\001\001\000\002\001\001\000\014\013" +
    "\361\016\071\040\106\041\102\055\070\001\001\000\004" +
    "\056\123\001\001\000\010\016\365\032\363\052\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\325" +
    "\053\366\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\223\016\233" +
    "\020\241\031\373\032\236\033\243\034\222\035\231\036" +
    "\247\037\251\040\246\041\234\042\232\054\227\001\001" +
    "\000\034\006\257\016\233\020\241\032\236\033\243\034" +
    "\222\035\231\036\247\037\251\040\246\041\234\042\232" +
    "\054\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\u0100\016\071\040\106\041\102" +
    "\055\070\001\001\000\004\056\123\001\001\000\002\001" +
    "\001\000\006\022\u0103\060\u0104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\u010a\001" +
    "\001\000\004\060\u0108\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\223\016\233\020" +
    "\241\031\u010c\032\236\033\243\034\222\035\231\036\247" +
    "\037\251\040\246\041\234\042\232\054\227\001\001\000" +
    "\034\006\257\016\233\020\241\032\236\033\243\034\222" +
    "\035\231\036\247\037\251\040\246\041\234\042\232\054" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoGraphik$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoGraphik$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoGraphik$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz = new Nodo(); 
    public void syntax_error(Symbol s)
    {
        ErroresGraphik.agregarError("Error sintactico", s.value.toString() + " no debe de ir en esa posicion", s.right, s.left);
    }

    public void unrecovered_syntax_error(Symbol s)
    {
        ErroresGraphik.agregarError("Error sintactico", "No se pudo recuperar de: " + s.value.toString(), s.right, s.left);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoGraphik$actions {




  private final SintacticoGraphik parser;

  /** Constructor */
  CUP$SintacticoGraphik$actions(SintacticoGraphik parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoGraphik$do_action_part00000000(
    int                        CUP$SintacticoGraphik$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGraphik$parser,
    java.util.Stack            CUP$SintacticoGraphik$stack,
    int                        CUP$SintacticoGraphik$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoGraphik$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoGraphik$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoGraphik$parser.done_parsing();
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
System.out.println("inicio");
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 INCLUIR LALS 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int INCLUIRleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int INCLUIRright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo INCLUIR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int LALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        Nodo RAIZ = new Nodo("raiz");
                        RAIZ.hijos.add(INCLUIR);
                        RAIZ.hijos.add(LALS);
                        raiz = RAIZ;
                        System.out.println("FINALIZO");
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LID ::= LID punto iden 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        Nodo id = new Nodo(Const.id, nombre);
                        LID.hijos.add(id);
                        RESULT = (Nodo) LID;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LID",12, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LID ::= iden 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 
                        Nodo id = new Nodo(Const.id, nombre);
                        RESULT = NodoGeneral.crearLid(id);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LID",12, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPO ::= entero 
            {
              String RESULT =null;
		 RESULT = Const.numero; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO ::= decimal 
            {
              String RESULT =null;
		 RESULT = Const.decimal; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO ::= caracter 
            {
              String RESULT =null;
		 RESULT = Const.caracter; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= cadena 
            {
              String RESULT =null;
		 RESULT = Const.cadena; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= bool 
            {
              String RESULT =null;
		 RESULT = Const.bool; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= iden 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = id; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LVALOR ::= LVALOR coma VALOR 
            {
              Nodo RESULT =null;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        LVALOR.hijos.add(VALOR);
                        RESULT = (Nodo) LVALOR;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LVALOR ::= VALOR 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearLvalor(VALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LVALOR ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.lvalor); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INCLUIR ::= LIMPORTAR 
            {
              Nodo RESULT =null;
		int LIMPORTARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LIMPORTARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LIMPORTAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = LIMPORTAR; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INCLUIR",11, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INCLUIR ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.limportar); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INCLUIR",11, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LIMPORTAR ::= LIMPORTAR IMPORTAR 
            {
              Nodo RESULT =null;
		int LIMPORTARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LIMPORTARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LIMPORTAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int IMPORTARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int IMPORTARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo IMPORTAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(IMPORTAR != null)
                            LIMPORTAR.hijos.add(IMPORTAR);
                        RESULT = (Nodo) LIMPORTAR;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",8, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LIMPORTAR ::= IMPORTAR 
            {
              Nodo RESULT =null;
		int IMPORTARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int IMPORTARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo IMPORTAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 
                        RESULT = new Nodo(Const.limportar);
                        if(IMPORTAR != null)
                            RESULT = NodoGeneral.crearLimportar(IMPORTAR);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",8, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IMPORTAR ::= importar iden extgk interroga 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String ext = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearImportar(id, ext); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTAR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IMPORTAR ::= incluirhk iden interroga 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearIncluirhk(id); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTAR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LALS ::= LALS ALS 
            {
              Nodo RESULT =null;
		int LALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int ALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int ALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo ALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(ALS != null)
                            LALS.hijos.add(ALS);
                        RESULT = (Nodo) LALS;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LALS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LALS ::= ALS 
            {
              Nodo RESULT =null;
		int ALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int ALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo ALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 
                        RESULT = new Nodo(Const.lals);
                        if(ALS != null)
                            RESULT = NodoGeneral.crearLals(ALS);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LALS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ALS ::= als iden HEREDA VISIBILIDAD allave LCUERPOALS cllave 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).value;
		int HEREDAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).left;
		int HEREDAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).right;
		Nodo HEREDA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).value;
		int VISIBILIDADleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int VISIBILIDADright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		String VISIBILIDAD = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LCUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		
                        RESULT = NodoGeneral.crearAls(id, VISIBILIDAD, HEREDA, LCUERPOALS);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ALS",3, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // HEREDA ::= hereda iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = new Nodo(Const.hereda, id); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HEREDA",5, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // HEREDA ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.hereda); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HEREDA",5, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VISIBILIDAD ::= dospuntos publico 
            {
              String RESULT =null;
		 RESULT = Const.publico; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VISIBILIDAD ::= dospuntos protegido 
            {
              String RESULT =null;
		 RESULT = Const.protegido; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VISIBILIDAD ::= dospuntos privado 
            {
              String RESULT =null;
		 RESULT = Const.privado; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VISIBILIDAD ::= 
            {
              String RESULT =null;
		 RESULT = Const.publico; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LCUERPOALS ::= LCUERPOALS CUERPOALS 
            {
              Nodo RESULT =null;
		int LCUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int CUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(CUERPOALS != null)
                            LCUERPOALS.hijos.add(CUERPOALS);
                        RESULT = (Nodo) LCUERPOALS;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPOALS",6, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LCUERPOALS ::= CUERPOALS 
            {
              Nodo RESULT =null;
		int CUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        RESULT = new Nodo(Const.lcuerpoals);
                        if(CUERPOALS != null) 
                            RESULT = NodoGeneral.crearLcuerpoals(CUERPOALS);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPOALS",6, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPOALS ::= FUN 
            {
              Nodo RESULT =null;
		int FUNleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int FUNright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo FUN = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = FUN; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPOALS ::= DEC interroga 
            {
              Nodo RESULT =null;
		int DECleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int DECright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo DEC = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = DEC; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPOALS ::= PRINCIPAL 
            {
              Nodo RESULT =null;
		int PRINCIPALleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int PRINCIPALright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo PRINCIPAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = PRINCIPAL; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUN ::= TIPOFUN iden aparentesis LPAR cparentesis VISIBILIDAD allave LCUERPO cllave 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)).value;
		int LPARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).left;
		int LPARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).right;
		Nodo LPAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).value;
		int VISIBILIDADleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int VISIBILIDADright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		String VISIBILIDAD = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearFuncion(id, tipo, VISIBILIDAD, LPAR, LCUERPO); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("FUN",1, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPOFUN ::= TIPO 
            {
              String RESULT =null;
		int TIPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int TIPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String TIPO = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = TIPO; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPOFUN",47, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPOFUN ::= vacio 
            {
              String RESULT =null;
		 RESULT = Const.vacio; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPOFUN",47, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LPAR ::= LPAR coma TIPO iden 
            {
              Nodo RESULT =null;
		int LPARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int LPARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		Nodo LPAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int TIPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int TIPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String TIPO = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        int t = Semantico.getTipo(TIPO);
                        Nodo par = new Nodo(Const.id, id, t);
                        LPAR.hijos.add(par);
                        RESULT = (Nodo) LPAR;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",16, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LPAR ::= TIPO iden 
            {
              Nodo RESULT =null;
		int TIPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int TIPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String TIPO = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearLpar(id, TIPO); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",16, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LPAR ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.lpar); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",16, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DEC ::= var TIPO iden VISIBILIDAD PREASIG 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DEC",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PREASIG ::= LVARIABLES 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PREASIG",38, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PREASIG ::= ASIG 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PREASIG",38, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PREASIG ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PREASIG",38, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LVARIABLES ::= LVARIABLES coma iden VISIBILIDAD 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVARIABLES",37, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LVARIABLES ::= coma iden VISIBILIDAD 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVARIABLES",37, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIG ::= igual ASIGNORMAL 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIG ::= LCORCHETES ASIGARR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNORMAL ::= VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNORMAL",18, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNORMAL ::= nuevo iden aparentesis cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNORMAL",18, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LCORCHETES ::= LCORCHETES acorchete VALOR ccorchete 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCORCHETES",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LCORCHETES ::= acorchete VALOR ccorchete 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCORCHETES",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGARR ::= igual LLLAVES 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGARR",20, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGARR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGARR",20, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LLLAVES ::= LLLAVES coma allave LLAVE cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLLAVES",21, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LLLAVES ::= allave LLAVE cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLLAVES",21, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LLAVE ::= LVALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAVE",22, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LLAVE ::= LLLAVES 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAVE",22, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PRINCIPAL ::= vacio inicio aparentesis cparentesis allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",15, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LCUERPO ::= LCUERPO CUERPO 
            {
              Nodo RESULT =null;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(CUERPO != null)
                            LCUERPO.hijos.add(CUERPO);
                        RESULT = (Nodo) LCUERPO;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPO",23, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LCUERPO ::= CUERPO 
            {
              Nodo RESULT =null;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 
                        RESULT = new Nodo(Const.lcuerpo);
                        if(CUERPO != null)
                            RESULT = NodoGeneral.crearCuerpo(CUERPO);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPO",23, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CUERPO ::= DEC interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CUERPO ::= ASIGNACION interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CUERPO ::= SI 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUERPO ::= SELECCION 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUERPO ::= PARA 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CUERPO ::= MIENTRAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CUERPO ::= HACER 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPO ::= LLAMADO interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUERPO ::= LLAMADOHK interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CUERPO ::= GRAFICAR interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CUERPO ::= IMPRIMIR interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CUERPO ::= retornar VALOR interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CUERPO ::= terminar interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUERPO ::= continuar interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CUERPO ::= error interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIGNACION ::= LID LCORCHETES igual VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNACION ::= LID igual VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SI ::= si aparentesis VALOR cparentesis allave LCUERPO cllave SINO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SI",25, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SINO ::= sino allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SINO",33, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SINO ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SINO",33, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SELECCION ::= seleccion aparentesis LID cparentesis allave LCASOS DEFECTO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SELECCION",26, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LCASOS ::= LCASOS CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCASOS",34, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LCASOS ::= CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCASOS",34, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASO ::= caso VALOR dospuntos LCUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CASO",35, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DEFECTO ::= defecto dospuntos LCUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DEFECTO",36, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DEFECTO ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DEFECTO",36, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARA ::= para aparentesis ASIGPARA dospuntos VALOR dospuntos VALPARA cparentesis allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PARA",27, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGPARA ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGPARA",39, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIGPARA ::= var TIPO iden igual VALOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGPARA",39, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALPARA ::= LID OP 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALPARA",40, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALPARA ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALPARA",40, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP ::= masmas 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OP",41, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP ::= menosmenos 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OP",41, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MIENTRAS ::= mientras aparentesis VALOR cparentesis allave LCUERPO cllave 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MIENTRAS",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // HACER ::= hacer allave LCUERPO cllave mientras aparentesis VALOR cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HACER",29, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // GRAFICAR ::= graphikarfuncion aparentesis LID coma LID cparentesis 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("GRAFICAR",32, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LLAMADO ::= llamar LID aparentesis LVALOR cparentesis 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearLlamar(LID, LVALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADO",30, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LLAMADOHK ::= llamarhk iden aparentesis LVALOR cparentesis 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearLlamado(id, LVALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADOHK",31, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IMPRIMIR ::= imprimir aparentesis VALOR cparentesis 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearImprimir(VALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",42, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALOR ::= VALOR mas VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mas, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALOR ::= VALOR or VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.or, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALOR ::= VALOR xor VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.xor, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALOR ::= VALOR and VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.and, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALOR ::= VALOR OPREL VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearRelacional(op, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALOR ::= VALOR menos VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.menos, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALOR ::= VALOR por VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.por, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALOR ::= VALOR dividido VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.dividido, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALOR ::= VALOR pot VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.pot, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALOR ::= not VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.not, t1, null); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALOR ::= menos VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.unario, t1, null); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALOR ::= aparentesis VALOR cparentesis 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALOR ::= numero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.numero, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALOR ::= dec 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.decimal, t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALOR ::= verdadero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.verdadero, t1, Const.tbool); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALOR ::= falso 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.falso, t1, Const.tbool); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALOR ::= car 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.caracter, t1, Const.tcaracter); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALOR ::= cad 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.cadena, t1, Const.tcadena); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALOR ::= ACCESO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALOR ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VALOR ::= LLAMADOHK 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ACCESO ::= LID LCORCHETES 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int LCORCHETESleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LCORCHETESright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LCORCHETES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        LID.hijos.add(LCORCHETES);
                        RESULT = (Nodo) LID;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESO",43, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ACCESO ::= LID 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = LID; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESO",43, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPREL ::= menor 
            {
              String RESULT =null;
		 RESULT = Const.menor; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",44, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPREL ::= mayor 
            {
              String RESULT =null;
		 RESULT = Const.mayor; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",44, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPREL ::= menorigual 
            {
              String RESULT =null;
		 RESULT = Const.menorigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",44, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPREL ::= mayorigual 
            {
              String RESULT =null;
		 RESULT = Const.mayorigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",44, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPREL ::= igualigual 
            {
              String RESULT =null;
		 RESULT = Const.igualigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",44, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPREL ::= diferente 
            {
              String RESULT =null;
		 RESULT = Const.diferente; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",44, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoGraphik$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoGraphik$do_action(
    int                        CUP$SintacticoGraphik$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGraphik$parser,
    java.util.Stack            CUP$SintacticoGraphik$stack,
    int                        CUP$SintacticoGraphik$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoGraphik$do_action_part00000000(
                               CUP$SintacticoGraphik$act_num,
                               CUP$SintacticoGraphik$parser,
                               CUP$SintacticoGraphik$stack,
                               CUP$SintacticoGraphik$top);
    }
}

}
