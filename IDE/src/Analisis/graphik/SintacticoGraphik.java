
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.graphik;

import java_cup.runtime.Symbol;
import Reportes.*;
import fabrica.*;
import ide.Const;
import semanticos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoGraphik extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symsG.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoGraphik() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoGraphik(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoGraphik(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\221\000\002\002\004\000\002\071\002\000\002\002" +
    "\005\000\002\016\005\000\002\016\003\000\002\017\003" +
    "\000\002\017\006\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\020\005\000\002\020\003\000\002\020" +
    "\002\000\002\015\003\000\002\015\002\000\002\012\004" +
    "\000\002\012\003\000\002\014\005\000\002\014\005\000" +
    "\002\004\004\000\002\004\003\000\002\005\011\000\002" +
    "\007\004\000\002\007\002\000\002\065\004\000\002\065" +
    "\004\000\002\065\004\000\002\065\002\000\002\010\004" +
    "\000\002\010\003\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\011\003\000\002\003\013\000\002" +
    "\067\003\000\002\067\003\000\002\023\006\000\002\023" +
    "\004\000\002\023\002\000\002\021\007\000\002\052\003" +
    "\000\002\052\003\000\002\052\002\000\002\051\006\000" +
    "\002\051\005\000\002\024\004\000\002\024\004\000\002" +
    "\025\003\000\002\025\006\000\002\026\006\000\002\026" +
    "\005\000\002\027\004\000\002\027\002\000\002\031\005" +
    "\000\002\031\005\000\002\030\005\000\002\030\003\000" +
    "\002\022\011\000\002\032\004\000\002\032\003\000\002" +
    "\006\004\000\002\006\004\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\006\007\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\033\006\000\002\033\005\000\002\033\010" +
    "\000\002\034\012\000\002\045\006\000\002\045\002\000" +
    "\002\035\012\000\002\046\004\000\002\046\003\000\002" +
    "\047\006\000\002\050\005\000\002\050\002\000\002\036" +
    "\015\000\002\053\003\000\002\053\007\000\002\054\004" +
    "\000\002\054\003\000\002\070\003\000\002\070\003\000" +
    "\002\037\011\000\002\040\012\000\002\043\010\000\002" +
    "\041\004\000\002\042\007\000\002\055\006\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\004\000\002\060\005\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\004\000" +
    "\002\013\003\000\002\013\006\000\002\057\005\000\002" +
    "\057\003\000\002\056\004\000\002\056\003\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\061\011\000" +
    "\002\044\004\000\002\044\004\000\002\063\006\000\002" +
    "\062\011\000\002\062\007\000\002\062\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\010\017\000\020\000\026\000\001\002\000" +
    "\010\017\012\020\ufff0\026\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\107\u0142\001" +
    "\002\000\004\020\020\001\002\000\010\017\uffee\020\uffee" +
    "\026\uffee\001\002\000\004\110\015\001\002\000\010\017" +
    "\012\020\ufff1\026\007\001\002\000\010\017\uffef\020\uffef" +
    "\026\uffef\001\002\000\004\072\016\001\002\000\010\017" +
    "\uffed\020\uffed\026\uffed\001\002\000\006\002\uffea\020\uffea" +
    "\001\002\000\004\107\023\001\002\000\006\002\uffff\020" +
    "\020\001\002\000\006\002\uffeb\020\uffeb\001\002\000\010" +
    "\021\025\073\uffe7\077\uffe7\001\002\000\006\073\030\077" +
    "\uffe3\001\002\000\004\107\026\001\002\000\006\073\uffe8" +
    "\077\uffe8\001\002\000\004\077\034\001\002\000\010\014" +
    "\033\015\032\016\031\001\002\000\014\072\uffe5\074\uffe5" +
    "\076\uffe5\077\uffe5\101\uffe5\001\002\000\014\072\uffe4\074" +
    "\uffe4\076\uffe4\077\uffe4\101\uffe4\001\002\000\014\072\uffe6" +
    "\074\uffe6\076\uffe6\077\uffe6\101\uffe6\001\002\000\022\004" +
    "\053\006\047\007\043\010\045\011\041\012\037\013\046" +
    "\107\042\001\002\000\024\004\053\006\047\007\043\010" +
    "\045\011\041\012\037\013\046\100\u0140\107\042\001\002" +
    "\000\024\004\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\100\uffe0\107\uffe0\001\002\000\004\107\ufff6" +
    "\001\002\000\024\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\100\uffdd\107\uffdd\001\002\000\004" +
    "\107\ufff7\001\002\000\004\107\ufff5\001\002\000\004\107" +
    "\ufff9\001\002\000\004\107\u0133\001\002\000\004\107\ufff8" +
    "\001\002\000\010\025\225\042\224\107\uffda\001\002\000" +
    "\004\107\ufffa\001\002\000\004\107\uffdb\001\002\000\024" +
    "\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\100\uffe1\107\uffe1\001\002\000\004\072\223\001\002" +
    "\000\016\006\047\007\043\010\045\011\041\012\037\107" +
    "\042\001\002\000\024\004\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\100\uffde\107\uffde\001\002\000" +
    "\004\107\056\001\002\000\014\072\uffe3\073\030\074\uffe3" +
    "\076\uffe3\101\uffe3\001\002\000\012\072\uffd3\074\060\076" +
    "\062\101\065\001\002\000\036\005\217\023\107\024\071" +
    "\043\101\054\102\063\070\103\067\105\073\106\105\107" +
    "\113\112\106\113\074\114\104\115\111\001\002\000\006" +
    "\072\uffd5\076\212\001\002\000\004\107\210\001\002\000" +
    "\010\072\uffc9\074\175\101\165\001\002\000\004\072\uffd6" +
    "\001\002\000\034\023\107\024\071\043\101\054\102\063" +
    "\070\103\067\105\073\106\105\107\113\112\106\113\074" +
    "\114\104\115\111\001\002\000\004\072\uffd4\001\002\000" +
    "\034\023\107\024\071\043\101\054\102\063\070\103\067" +
    "\105\073\106\105\107\113\112\106\113\074\114\104\115" +
    "\111\001\002\000\034\023\107\024\071\043\101\054\102" +
    "\063\070\103\067\105\073\106\105\107\113\112\106\113" +
    "\074\114\104\115\111\001\002\000\004\107\113\001\002" +
    "\000\024\060\uff83\061\uff83\062\uff83\072\uff83\073\uff83\076" +
    "\uff83\100\uff83\102\uff83\104\uff83\001\002\000\052\053\uff90" +
    "\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062" +
    "\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90" +
    "\072\uff90\073\uff90\076\uff90\100\uff90\102\uff90\104\uff90\001" +
    "\002\000\052\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\062\uff8c\064\uff8c\065\uff8c\066\uff8c\067" +
    "\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\076\uff8c\100\uff8c" +
    "\102\uff8c\104\uff8c\001\002\000\052\053\uff8a\054\uff8a\055" +
    "\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\064\uff8a" +
    "\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073" +
    "\uff8a\076\uff8a\100\uff8a\102\uff8a\104\uff8a\001\002\000\064" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\062\ufffd\064\ufffd\065\ufffd\066\ufffd" +
    "\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075" +
    "\ufffd\076\ufffd\100\ufffd\101\ufffd\102\ufffd\104\ufffd\001\002" +
    "\000\056\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060" +
    "\uff7e\061\uff7e\062\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e" +
    "\070\uff7e\071\uff7e\072\uff7e\073\uff7e\075\163\076\uff7e\100" +
    "\uff7e\101\065\102\uff7e\104\uff7e\001\002\000\052\053\uff88" +
    "\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062" +
    "\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071\uff88" +
    "\072\uff88\073\uff88\076\uff88\100\uff88\102\uff88\104\uff88\001" +
    "\002\000\004\103\160\001\002\000\030\023\107\024\071" +
    "\054\102\103\067\105\073\106\105\107\113\112\106\113" +
    "\074\114\104\115\111\001\002\000\052\053\150\054\137" +
    "\055\144\056\135\057\143\060\uff80\061\uff80\062\uff80\064" +
    "\146\065\136\066\141\067\147\070\142\071\140\072\uff80" +
    "\073\uff80\076\uff80\100\uff80\102\uff80\104\uff80\001\002\000" +
    "\052\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e" +
    "\061\uff8e\062\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\073\uff8e\076\uff8e\100\uff8e\102\uff8e" +
    "\104\uff8e\001\002\000\052\053\uff8f\054\uff8f\055\uff8f\056" +
    "\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\064\uff8f\065\uff8f" +
    "\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\076" +
    "\uff8f\100\uff8f\102\uff8f\104\uff8f\001\002\000\052\053\uff8b" +
    "\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b" +
    "\072\uff8b\073\uff8b\076\uff8b\100\uff8b\102\uff8b\104\uff8b\001" +
    "\002\000\004\107\131\001\002\000\052\053\uff89\054\uff89" +
    "\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\064" +
    "\uff89\065\uff89\066\uff89\067\uff89\070\uff89\071\uff89\072\uff89" +
    "\073\uff89\076\uff89\100\uff89\102\uff89\104\uff89\001\002\000" +
    "\052\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d" +
    "\061\uff8d\062\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070" +
    "\uff8d\071\uff8d\072\uff8d\073\uff8d\076\uff8d\100\uff8d\102\uff8d" +
    "\104\uff8d\001\002\000\012\060\120\061\121\062\117\102" +
    "\130\001\002\000\066\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc" +
    "\073\ufffc\074\ufffc\075\ufffc\076\ufffc\100\ufffc\101\ufffc\102" +
    "\ufffc\103\114\104\ufffc\001\002\000\040\023\107\024\071" +
    "\043\101\054\102\063\070\076\ufff2\103\067\104\ufff2\105" +
    "\073\106\105\107\113\112\106\113\074\114\104\115\111" +
    "\001\002\000\006\076\126\104\125\001\002\000\016\060" +
    "\120\061\121\062\117\076\ufff3\100\ufff3\104\ufff3\001\002" +
    "\000\034\023\107\024\071\043\101\054\102\063\070\103" +
    "\067\105\073\106\105\107\113\112\106\113\074\114\104" +
    "\115\111\001\002\000\034\023\107\024\071\043\101\054" +
    "\102\063\070\103\067\105\073\106\105\107\113\112\106" +
    "\113\074\114\104\115\111\001\002\000\034\023\107\024" +
    "\071\043\101\054\102\063\070\103\067\105\073\106\105" +
    "\107\113\112\106\113\074\114\104\115\111\001\002\000" +
    "\024\060\120\061\uff87\062\117\072\uff87\073\uff87\076\uff87" +
    "\100\uff87\102\uff87\104\uff87\001\002\000\024\060\uff85\061" +
    "\uff85\062\uff85\072\uff85\073\uff85\076\uff85\100\uff85\102\uff85" +
    "\104\uff85\001\002\000\024\060\120\061\uff86\062\uff86\072" +
    "\uff86\073\uff86\076\uff86\100\uff86\102\uff86\104\uff86\001\002" +
    "\000\064\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074" +
    "\ufffb\075\ufffb\076\ufffb\100\ufffb\101\ufffb\102\ufffb\104\ufffb" +
    "\001\002\000\034\023\107\024\071\043\101\054\102\063" +
    "\070\103\067\105\073\106\105\107\113\112\106\113\074" +
    "\114\104\115\111\001\002\000\016\060\120\061\121\062" +
    "\117\076\ufff4\100\ufff4\104\ufff4\001\002\000\056\053\uffcb" +
    "\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb" +
    "\072\uffcb\073\uffcb\074\uffcb\076\uffcb\100\uffcb\101\uffcb\102" +
    "\uffcb\104\uffcb\001\002\000\004\103\132\001\002\000\040" +
    "\023\107\024\071\043\101\054\102\063\070\076\ufff2\103" +
    "\067\104\ufff2\105\073\106\105\107\113\112\106\113\074" +
    "\114\104\115\111\001\002\000\006\076\126\104\134\001" +
    "\002\000\052\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99" +
    "\060\uff99\061\uff99\062\uff99\064\uff99\065\uff99\066\uff99\067" +
    "\uff99\070\uff99\071\uff99\072\uff99\073\uff99\076\uff99\100\uff99" +
    "\102\uff99\104\uff99\001\002\000\030\023\107\024\071\054" +
    "\102\103\067\105\073\106\105\107\113\112\106\113\074" +
    "\114\104\115\111\001\002\000\030\023\uff7a\024\uff7a\054" +
    "\uff7a\103\uff7a\105\uff7a\106\uff7a\107\uff7a\112\uff7a\113\uff7a" +
    "\114\uff7a\115\uff7a\001\002\000\030\023\107\024\071\054" +
    "\102\103\067\105\073\106\105\107\113\112\106\113\074" +
    "\114\104\115\111\001\002\000\030\023\uff79\024\uff79\054" +
    "\uff79\103\uff79\105\uff79\106\uff79\107\uff79\112\uff79\113\uff79" +
    "\114\uff79\115\uff79\001\002\000\030\023\uff7d\024\uff7d\054" +
    "\uff7d\103\uff7d\105\uff7d\106\uff7d\107\uff7d\112\uff7d\113\uff7d" +
    "\114\uff7d\115\uff7d\001\002\000\030\023\uff78\024\uff78\054" +
    "\uff78\103\uff78\105\uff78\106\uff78\107\uff78\112\uff78\113\uff78" +
    "\114\uff78\115\uff78\001\002\000\030\023\107\024\071\054" +
    "\102\103\067\105\073\106\105\107\113\112\106\113\074" +
    "\114\104\115\111\001\002\000\030\023\107\024\071\054" +
    "\102\103\067\105\073\106\105\107\113\112\106\113\074" +
    "\114\104\115\111\001\002\000\030\023\107\024\071\054" +
    "\102\103\067\105\073\106\105\107\113\112\106\113\074" +
    "\114\104\115\111\001\002\000\030\023\uff7b\024\uff7b\054" +
    "\uff7b\103\uff7b\105\uff7b\106\uff7b\107\uff7b\112\uff7b\113\uff7b" +
    "\114\uff7b\115\uff7b\001\002\000\030\023\uff7c\024\uff7c\054" +
    "\uff7c\103\uff7c\105\uff7c\106\uff7c\107\uff7c\112\uff7c\113\uff7c" +
    "\114\uff7c\115\uff7c\001\002\000\030\023\107\024\071\054" +
    "\102\103\067\105\073\106\105\107\113\112\106\113\074" +
    "\114\104\115\111\001\002\000\052\053\uff97\054\uff97\055" +
    "\144\056\135\057\143\060\uff97\061\uff97\062\uff97\064\uff97" +
    "\065\uff97\066\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073" +
    "\uff97\076\uff97\100\uff97\102\uff97\104\uff97\001\002\000\036" +
    "\053\150\054\137\055\144\056\135\057\143\060\uff81\061" +
    "\uff81\062\uff81\072\uff81\073\uff81\076\uff81\100\uff81\102\uff81" +
    "\104\uff81\001\002\000\052\053\uff95\054\uff95\055\uff95\056" +
    "\uff95\057\143\060\uff95\061\uff95\062\uff95\064\uff95\065\uff95" +
    "\066\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\076" +
    "\uff95\100\uff95\102\uff95\104\uff95\001\002\000\052\053\uff93" +
    "\054\uff93\055\uff93\056\uff93\057\143\060\uff93\061\uff93\062" +
    "\uff93\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93" +
    "\072\uff93\073\uff93\076\uff93\100\uff93\102\uff93\104\uff93\001" +
    "\002\000\052\053\uff96\054\uff96\055\144\056\135\057\143" +
    "\060\uff96\061\uff96\062\uff96\064\uff96\065\uff96\066\uff96\067" +
    "\uff96\070\uff96\071\uff96\072\uff96\073\uff96\076\uff96\100\uff96" +
    "\102\uff96\104\uff96\001\002\000\052\053\uff94\054\uff94\055" +
    "\uff94\056\uff94\057\143\060\uff94\061\uff94\062\uff94\064\uff94" +
    "\065\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94\073" +
    "\uff94\076\uff94\100\uff94\102\uff94\104\uff94\001\002\000\052" +
    "\053\uff92\054\uff92\055\144\056\135\057\143\060\uff92\061" +
    "\uff92\062\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070\uff92" +
    "\071\uff92\072\uff92\073\uff92\076\uff92\100\uff92\102\uff92\104" +
    "\uff92\001\002\000\034\023\107\024\071\043\101\054\102" +
    "\063\070\103\067\105\073\106\105\107\113\112\106\113" +
    "\074\114\104\115\111\001\002\000\012\060\120\061\121" +
    "\062\117\104\162\001\002\000\024\060\uff82\061\uff82\062" +
    "\uff82\072\uff82\073\uff82\076\uff82\100\uff82\102\uff82\104\uff82" +
    "\001\002\000\004\107\113\001\002\000\054\053\uff7f\054" +
    "\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f" +
    "\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072" +
    "\uff7f\073\uff7f\076\uff7f\100\uff7f\101\165\102\uff7f\104\uff7f" +
    "\001\002\000\034\023\107\024\071\043\101\054\102\063" +
    "\070\103\067\105\073\106\105\107\113\112\106\113\074" +
    "\114\104\115\111\001\002\000\012\060\120\061\121\062" +
    "\117\102\167\001\002\000\056\053\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc" +
    "\074\uffcc\076\uffcc\100\uffcc\101\uffcc\102\uffcc\104\uffcc\001" +
    "\002\000\064\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe" +
    "\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\064\ufffe\065" +
    "\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe" +
    "\074\ufffe\075\ufffe\076\ufffe\100\ufffe\101\ufffe\102\ufffe\104" +
    "\ufffe\001\002\000\054\053\uff9a\054\uff9a\055\uff9a\056\uff9a" +
    "\057\uff9a\060\uff9a\061\uff9a\062\uff9a\064\uff9a\065\uff9a\066" +
    "\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\075\163" +
    "\076\uff9a\100\uff9a\102\uff9a\104\uff9a\001\002\000\024\060" +
    "\uff84\061\uff84\062\uff84\072\uff84\073\uff84\076\uff84\100\uff84" +
    "\102\uff84\104\uff84\001\002\000\012\060\120\061\121\062" +
    "\117\104\174\001\002\000\052\053\uff91\054\uff91\055\uff91" +
    "\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\064\uff91\065" +
    "\uff91\066\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91" +
    "\076\uff91\100\uff91\102\uff91\104\uff91\001\002\000\004\077" +
    "\200\001\002\000\004\072\uffcf\001\002\000\004\072\uffca" +
    "\001\002\000\042\023\107\024\071\043\101\054\102\063" +
    "\070\076\ufff2\077\200\100\ufff2\103\067\105\073\106\105" +
    "\107\113\112\106\113\074\114\104\115\111\001\002\000" +
    "\006\076\126\100\207\001\002\000\006\076\204\100\205" +
    "\001\002\000\006\076\uffc5\100\uffc5\001\002\000\004\077" +
    "\200\001\002\000\010\072\uffc8\076\uffc8\100\uffc8\001\002" +
    "\000\006\076\uffc6\100\uffc6\001\002\000\010\072\uffc7\076" +
    "\uffc7\100\uffc7\001\002\000\010\072\uffe3\073\030\076\uffe3" +
    "\001\002\000\006\072\uffd1\076\uffd1\001\002\000\004\107" +
    "\213\001\002\000\010\072\uffe3\073\030\076\uffe3\001\002" +
    "\000\006\072\uffd2\076\uffd2\001\002\000\004\072\uffd0\001" +
    "\002\000\012\060\120\061\121\062\117\072\uffce\001\002" +
    "\000\004\107\220\001\002\000\004\103\221\001\002\000" +
    "\004\104\222\001\002\000\004\072\uffcd\001\002\000\024" +
    "\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\100\uffdf\107\uffdf\001\002\000\004\103\u0115\001\002" +
    "\000\004\103\226\001\002\000\004\104\227\001\002\000" +
    "\004\077\230\001\002\000\040\003\255\004\053\022\251" +
    "\023\107\024\234\027\261\031\246\034\231\035\237\036" +
    "\241\037\254\040\256\041\250\050\236\107\113\001\002" +
    "\000\004\103\u0101\001\002\000\046\003\uffc2\004\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\050" +
    "\uffc2\100\uffc2\107\uffc2\001\002\000\046\003\uffbe\004\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\027\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\050\uffbe\100\uffbe\107\uffbe\001\002\000\006\042\375\107" +
    "\113\001\002\000\042\003\255\004\053\022\251\023\107" +
    "\024\234\027\261\031\246\034\231\035\237\036\241\037" +
    "\254\040\256\041\250\050\236\100\374\107\113\001\002" +
    "\000\004\103\371\001\002\000\004\103\363\001\002\000" +
    "\004\072\362\001\002\000\004\077\353\001\002\000\046" +
    "\003\uffbd\004\uffbd\022\uffbd\023\uffbd\024\uffbd\027\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\050\uffbd\100\uffbd\107\uffbd\001\002\000" +
    "\004\072\352\001\002\000\014\051\336\052\341\074\337" +
    "\075\163\101\065\001\002\000\004\072\334\001\002\000" +
    "\004\103\314\001\002\000\004\072\313\001\002\000\004" +
    "\103\306\001\002\000\034\023\107\024\071\043\101\054" +
    "\102\063\070\103\067\105\073\106\105\107\113\112\106" +
    "\113\074\114\104\115\111\001\002\000\004\072\303\001" +
    "\002\000\046\003\uffbf\004\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\050\uffbf\100\uffbf\107\uffbf" +
    "\001\002\000\004\072\302\001\002\000\004\072\301\001" +
    "\002\000\004\072\300\001\002\000\004\072\277\001\002" +
    "\000\046\003\uffbc\004\uffbc\022\uffbc\023\uffbc\024\uffbc\027" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\050\uffbc\100\uffbc\107\uffbc\001" +
    "\002\000\004\103\263\001\002\000\046\003\uffbb\004\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\027\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\050\uffbb\100\uffbb\107\uffbb\001\002\000\034\023\107\024" +
    "\071\043\101\054\102\063\070\103\067\105\073\106\105" +
    "\107\113\112\106\113\074\114\104\115\111\001\002\000" +
    "\012\060\120\061\121\062\117\104\265\001\002\000\004" +
    "\077\266\001\002\000\040\003\255\004\053\022\251\023" +
    "\107\024\234\027\261\031\246\034\231\035\237\036\241" +
    "\037\254\040\256\041\250\050\236\107\113\001\002\000" +
    "\042\003\255\004\053\022\251\023\107\024\234\027\261" +
    "\031\246\034\231\035\237\036\241\037\254\040\256\041" +
    "\250\050\236\100\271\107\113\001\002\000\046\003\uffc3" +
    "\004\uffc3\022\uffc3\023\uffc3\024\uffc3\027\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\050\uffc3\100\uffc3\107\uffc3\001\002\000\050\003" +
    "\uffab\004\uffab\022\uffab\023\uffab\024\uffab\027\uffab\030\272" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\050\uffab\100\uffab\107\uffab\001\002" +
    "\000\004\077\274\001\002\000\046\003\uffad\004\uffad\022" +
    "\uffad\023\uffad\024\uffad\027\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\050" +
    "\uffad\100\uffad\107\uffad\001\002\000\040\003\255\004\053" +
    "\022\251\023\107\024\234\027\261\031\246\034\231\035" +
    "\237\036\241\037\254\040\256\041\250\050\236\107\113" +
    "\001\002\000\042\003\255\004\053\022\251\023\107\024" +
    "\234\027\261\031\246\034\231\035\237\036\241\037\254" +
    "\040\256\041\250\050\236\100\276\107\113\001\002\000" +
    "\046\003\uffac\004\uffac\022\uffac\023\uffac\024\uffac\027\uffac" +
    "\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\050\uffac\100\uffac\107\uffac\001\002" +
    "\000\046\003\uffba\004\uffba\022\uffba\023\uffba\024\uffba\027" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\050\uffba\100\uffba\107\uffba\001" +
    "\002\000\046\003\uffb3\004\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\027\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\050\uffb3\100\uffb3\107\uffb3" +
    "\001\002\000\046\003\uffb1\004\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\027\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\050\uffb1\100\uffb1\107" +
    "\uffb1\001\002\000\046\003\uffb2\004\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\027\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\050\uffb2\100\uffb2" +
    "\107\uffb2\001\002\000\046\003\uffc1\004\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\027\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\050\uffc1\100" +
    "\uffc1\107\uffc1\001\002\000\012\060\120\061\121\062\117" +
    "\072\305\001\002\000\046\003\uffb4\004\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\050\uffb4\100" +
    "\uffb4\107\uffb4\001\002\000\004\107\113\001\002\000\006" +
    "\075\163\076\310\001\002\000\004\107\113\001\002\000" +
    "\006\075\163\104\312\001\002\000\004\072\uff9b\001\002" +
    "\000\046\003\uffc0\004\uffc0\022\uffc0\023\uffc0\024\uffc0\027" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\050\uffc0\100\uffc0\107\uffc0\001" +
    "\002\000\004\107\113\001\002\000\004\104\316\001\002" +
    "\000\004\077\317\001\002\000\004\033\320\001\002\000" +
    "\034\023\107\024\071\043\101\054\102\063\070\103\067" +
    "\105\073\106\105\107\113\112\106\113\074\114\104\115" +
    "\111\001\002\000\010\032\324\033\320\100\uffa5\001\002" +
    "\000\010\032\uffa8\033\uffa8\100\uffa8\001\002\000\004\100" +
    "\330\001\002\000\004\073\326\001\002\000\010\032\uffa9" +
    "\033\uffa9\100\uffa9\001\002\000\040\003\255\004\053\022" +
    "\251\023\107\024\234\027\261\031\246\034\231\035\237" +
    "\036\241\037\254\040\256\041\250\050\236\107\113\001" +
    "\002\000\042\003\255\004\053\022\251\023\107\024\234" +
    "\027\261\031\246\034\231\035\237\036\241\037\254\040" +
    "\256\041\250\050\236\100\uffa6\107\113\001\002\000\046" +
    "\003\uffaa\004\uffaa\022\uffaa\023\uffaa\024\uffaa\027\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\050\uffaa\100\uffaa\107\uffaa\001\002\000" +
    "\012\060\120\061\121\062\117\073\332\001\002\000\040" +
    "\003\255\004\053\022\251\023\107\024\234\027\261\031" +
    "\246\034\231\035\237\036\241\037\254\040\256\041\250" +
    "\050\236\107\113\001\002\000\046\003\255\004\053\022" +
    "\251\023\107\024\234\027\261\031\246\032\uffa7\033\uffa7" +
    "\034\231\035\237\036\241\037\254\040\256\041\250\050" +
    "\236\100\uffa7\107\113\001\002\000\046\003\uffb8\004\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\027\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\050\uffb8\100\uffb8\107\uffb8\001\002\000\004\072\351\001" +
    "\002\000\006\072\uff9f\104\uff9f\001\002\000\036\005\345" +
    "\023\107\024\071\043\101\054\102\063\070\103\067\105" +
    "\073\106\105\107\113\112\106\113\074\114\104\115\111" +
    "\001\002\000\006\074\342\101\165\001\002\000\006\072" +
    "\uff9e\104\uff9e\001\002\000\034\023\107\024\071\043\101" +
    "\054\102\063\070\103\067\105\073\106\105\107\113\112" +
    "\106\113\074\114\104\115\111\001\002\000\016\060\120" +
    "\061\121\062\117\072\uffb0\073\uffb0\104\uffb0\001\002\000" +
    "\016\060\120\061\121\062\117\072\uffaf\073\uffaf\104\uffaf" +
    "\001\002\000\004\107\346\001\002\000\004\103\347\001" +
    "\002\000\004\104\350\001\002\000\010\072\uffae\073\uffae" +
    "\104\uffae\001\002\000\046\003\uffb5\004\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\027\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\050\uffb5\100" +
    "\uffb5\107\uffb5\001\002\000\046\003\uffb7\004\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\027\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\050\uffb7" +
    "\100\uffb7\107\uffb7\001\002\000\040\003\255\004\053\022" +
    "\251\023\107\024\234\027\261\031\246\034\231\035\237" +
    "\036\241\037\254\040\256\041\250\050\236\107\113\001" +
    "\002\000\042\003\255\004\053\022\251\023\107\024\234" +
    "\027\261\031\246\034\231\035\237\036\241\037\254\040" +
    "\256\041\250\050\236\100\355\107\113\001\002\000\004" +
    "\035\356\001\002\000\004\103\357\001\002\000\034\023" +
    "\107\024\071\043\101\054\102\063\070\103\067\105\073" +
    "\106\105\107\113\112\106\113\074\114\104\115\111\001" +
    "\002\000\012\060\120\061\121\062\117\104\361\001\002" +
    "\000\046\003\uff9c\004\uff9c\022\uff9c\023\uff9c\024\uff9c\027" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\050\uff9c\100\uff9c\107\uff9c\001" +
    "\002\000\046\003\uffb6\004\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\050\uffb6\100\uffb6\107\uffb6" +
    "\001\002\000\034\023\107\024\071\043\101\054\102\063" +
    "\070\103\067\105\073\106\105\107\113\112\106\113\074" +
    "\114\104\115\111\001\002\000\012\060\120\061\121\062" +
    "\117\104\365\001\002\000\004\077\366\001\002\000\040" +
    "\003\255\004\053\022\251\023\107\024\234\027\261\031" +
    "\246\034\231\035\237\036\241\037\254\040\256\041\250" +
    "\050\236\107\113\001\002\000\042\003\255\004\053\022" +
    "\251\023\107\024\234\027\261\031\246\034\231\035\237" +
    "\036\241\037\254\040\256\041\250\050\236\100\370\107" +
    "\113\001\002\000\046\003\uff9d\004\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\027\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\050\uff9d\100\uff9d" +
    "\107\uff9d\001\002\000\034\023\107\024\071\043\101\054" +
    "\102\063\070\103\067\105\073\106\105\107\113\112\106" +
    "\113\074\114\104\115\111\001\002\000\012\060\120\061" +
    "\121\062\117\104\373\001\002\000\004\072\uff98\001\002" +
    "\000\024\004\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\100\uffc4\107\uffc4\001\002\000\004\103\376" +
    "\001\002\000\004\104\377\001\002\000\004\072\u0100\001" +
    "\002\000\046\003\uffb9\004\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\027\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\050\uffb9\100\uffb9\107\uffb9" +
    "\001\002\000\006\004\u0103\107\113\001\002\000\004\073" +
    "\uffa3\001\002\000\016\006\047\007\043\010\045\011\041" +
    "\012\037\107\042\001\002\000\010\074\337\075\163\101" +
    "\065\001\002\000\004\073\u0106\001\002\000\034\023\107" +
    "\024\071\043\101\054\102\063\070\103\067\105\073\106" +
    "\105\107\113\112\106\113\074\114\104\115\111\001\002" +
    "\000\012\060\120\061\121\062\117\073\u0108\001\002\000" +
    "\004\107\113\001\002\000\004\104\u010d\001\002\000\004" +
    "\104\uffa0\001\002\000\014\051\336\052\341\074\337\075" +
    "\163\101\065\001\002\000\004\104\uffa1\001\002\000\004" +
    "\077\u010e\001\002\000\040\003\255\004\053\022\251\023" +
    "\107\024\234\027\261\031\246\034\231\035\237\036\241" +
    "\037\254\040\256\041\250\050\236\107\113\001\002\000" +
    "\042\003\255\004\053\022\251\023\107\024\234\027\261" +
    "\031\246\034\231\035\237\036\241\037\254\040\256\041" +
    "\250\050\236\100\u0110\107\113\001\002\000\046\003\uffa4" +
    "\004\uffa4\022\uffa4\023\uffa4\024\uffa4\027\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\050\uffa4\100\uffa4\107\uffa4\001\002\000\004\107" +
    "\u0112\001\002\000\004\074\u0113\001\002\000\034\023\107" +
    "\024\071\043\101\054\102\063\070\103\067\105\073\106" +
    "\105\107\113\112\106\113\074\114\104\115\111\001\002" +
    "\000\012\060\120\061\121\062\117\073\uffa2\001\002\000" +
    "\004\104\u0116\001\002\000\004\077\u0117\001\002\000\012" +
    "\044\u011c\045\u0119\046\u011b\047\u011d\001\002\000\010\045" +
    "\u0119\046\u011b\047\u011d\001\002\000\004\103\u012c\001\002" +
    "\000\004\044\u011c\001\002\000\004\103\u0127\001\002\000" +
    "\004\074\u0124\001\002\000\004\103\u0120\001\002\000\004" +
    "\100\u011f\001\002\000\024\004\uff77\006\uff77\007\uff77\010" +
    "\uff77\011\uff77\012\uff77\013\uff77\100\uff77\107\uff77\001\002" +
    "\000\034\023\107\024\071\043\101\054\102\063\070\103" +
    "\067\105\073\106\105\107\113\112\106\113\074\114\104" +
    "\115\111\001\002\000\012\060\120\061\121\062\117\104" +
    "\u0122\001\002\000\004\072\u0123\001\002\000\006\044\uff71" +
    "\100\uff71\001\002\000\034\023\107\024\071\043\101\054" +
    "\102\063\070\103\067\105\073\106\105\107\113\112\106" +
    "\113\074\114\104\115\111\001\002\000\012\060\120\061" +
    "\121\062\117\072\u0126\001\002\000\012\045\uff74\046\uff74" +
    "\047\uff74\100\uff74\001\002\000\034\023\107\024\071\043" +
    "\101\054\102\063\070\103\067\105\073\106\105\107\113" +
    "\112\106\113\074\114\104\115\111\001\002\000\012\060" +
    "\120\061\121\062\117\104\u0129\001\002\000\004\072\u012a" +
    "\001\002\000\006\044\uff72\100\uff72\001\002\000\004\100" +
    "\uff75\001\002\000\034\023\107\024\071\043\101\054\102" +
    "\063\070\103\067\105\073\106\105\107\113\112\106\113" +
    "\074\114\104\115\111\001\002\000\012\060\120\061\121" +
    "\062\117\104\u012e\001\002\000\004\074\u012f\001\002\000" +
    "\034\023\107\024\071\043\101\054\102\063\070\103\067" +
    "\105\073\106\105\107\113\112\106\113\074\114\104\115" +
    "\111\001\002\000\012\060\120\061\121\062\117\072\u0131" +
    "\001\002\000\006\044\uff73\100\uff73\001\002\000\004\100" +
    "\uff76\001\002\000\004\103\u0134\001\002\000\022\006\047" +
    "\007\043\010\045\011\041\012\037\076\uffd7\104\uffd7\107" +
    "\042\001\002\000\006\076\u0139\104\u0138\001\002\000\004" +
    "\107\u0137\001\002\000\006\076\uffd8\104\uffd8\001\002\000" +
    "\006\073\030\077\uffe3\001\002\000\016\006\047\007\043" +
    "\010\045\011\041\012\037\107\042\001\002\000\004\107" +
    "\u013b\001\002\000\006\076\uffd9\104\uffd9\001\002\000\004" +
    "\077\u013d\001\002\000\040\003\255\004\053\022\251\023" +
    "\107\024\234\027\261\031\246\034\231\035\237\036\241" +
    "\037\254\040\256\041\250\050\236\107\113\001\002\000" +
    "\042\003\255\004\053\022\251\023\107\024\234\027\261" +
    "\031\246\034\231\035\237\036\241\037\254\040\256\041" +
    "\250\050\236\100\u013f\107\113\001\002\000\024\004\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\100" +
    "\uffdc\107\uffdc\001\002\000\006\002\uffe9\020\uffe9\001\002" +
    "\000\024\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\100\uffe2\107\uffe2\001\002\000\004\072\u0143" +
    "\001\002\000\010\017\uffec\020\uffec\026\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\006\002\004\071\003\001\001\000\010\012" +
    "\012\014\010\015\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\020\005\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\021" +
    "\001\001\000\002\001\001\000\004\007\023\001\001\000" +
    "\004\065\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\035\010\034" +
    "\011\050\021\051\022\053\061\037\066\047\067\043\001" +
    "\001\000\020\003\035\011\u0140\021\051\022\053\061\037" +
    "\066\047\067\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\056\001\001" +
    "\000\012\024\065\026\062\051\060\052\063\001\001\000" +
    "\024\013\215\016\076\017\075\025\214\041\107\042\077" +
    "\056\074\057\071\060\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\175\001\001\000\002\001\001" +
    "\000\022\013\111\016\076\017\075\041\107\042\077\056" +
    "\074\057\071\060\102\001\001\000\002\001\001\000\022" +
    "\013\172\016\076\017\075\041\107\042\077\056\074\057" +
    "\071\060\102\001\001\000\022\013\171\016\076\017\075" +
    "\041\107\042\077\056\074\057\071\060\102\001\001\000" +
    "\006\016\170\017\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\016\076\017\075\041\107\042\077\056" +
    "\074\060\156\001\001\000\004\064\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\013\115\016\076\017\075\020" +
    "\114\041\107\042\077\056\074\057\071\060\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\123\016" +
    "\076\017\075\041\107\042\077\056\074\057\071\060\102" +
    "\001\001\000\022\013\122\016\076\017\075\041\107\042" +
    "\077\056\074\057\071\060\102\001\001\000\022\013\121" +
    "\016\076\017\075\041\107\042\077\056\074\057\071\060" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\126\016\076\017" +
    "\075\041\107\042\077\056\074\057\071\060\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\013\115\016\076\017\075\020\132\041\107\042\077" +
    "\056\074\057\071\060\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\076\017\075\041\107\042\077" +
    "\056\074\060\155\001\001\000\002\001\001\000\016\016" +
    "\076\017\075\041\107\042\077\056\074\060\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\076\017\075\041\107\042\077\056\074\060\153" +
    "\001\001\000\016\016\076\017\075\041\107\042\077\056" +
    "\074\060\152\001\001\000\016\016\076\017\075\041\107" +
    "\042\077\056\074\060\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\076\017\075\041\107\042\077" +
    "\056\074\060\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\160\016" +
    "\076\017\075\041\107\042\077\056\074\057\071\060\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\167\001\001\000\002\001\001\000\022\013\165\016\076" +
    "\017\075\041\107\042\077\056\074\057\071\060\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\013\115\016\076\017\075\020" +
    "\200\030\201\031\202\041\107\042\077\056\074\057\071" +
    "\060\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\006\231\016\243\017\075\021\251\032\234\033\246\034" +
    "\252\035\232\036\241\037\257\040\261\041\256\042\244" +
    "\043\242\055\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\170\017\075\001\001" +
    "\000\036\006\267\016\243\017\075\021\251\033\246\034" +
    "\252\035\232\036\241\037\257\040\261\041\256\042\244" +
    "\043\242\055\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\337\070\334\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\303\016\076\017\075\041\107\042" +
    "\077\056\074\057\071\060\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\263\016\076\017" +
    "\075\041\107\042\077\056\074\057\071\060\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\231\016" +
    "\243\017\075\021\251\032\266\033\246\034\252\035\232" +
    "\036\241\037\257\040\261\041\256\042\244\043\242\055" +
    "\237\001\001\000\036\006\267\016\243\017\075\021\251" +
    "\033\246\034\252\035\232\036\241\037\257\040\261\041" +
    "\256\042\244\043\242\055\237\001\001\000\002\001\001" +
    "\000\004\045\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\006\231\016\243\017\075\021\251\032\274" +
    "\033\246\034\252\035\232\036\241\037\257\040\261\041" +
    "\256\042\244\043\242\055\237\001\001\000\036\006\267" +
    "\016\243\017\075\021\251\033\246\034\252\035\232\036" +
    "\241\037\257\040\261\041\256\042\244\043\242\055\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\306\017" +
    "\075\001\001\000\002\001\001\000\006\016\310\017\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\076\017\075\056\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\046\320\047\321\001" +
    "\001\000\022\013\330\016\076\017\075\041\107\042\077" +
    "\056\074\057\071\060\102\001\001\000\006\047\324\050" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\006\231\016\243\017" +
    "\075\021\251\032\326\033\246\034\252\035\232\036\241" +
    "\037\257\040\261\041\256\042\244\043\242\055\237\001" +
    "\001\000\036\006\267\016\243\017\075\021\251\033\246" +
    "\034\252\035\232\036\241\037\257\040\261\041\256\042" +
    "\244\043\242\055\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\006\231\016\243\017\075\021\251\032" +
    "\332\033\246\034\252\035\232\036\241\037\257\040\261" +
    "\041\256\042\244\043\242\055\237\001\001\000\036\006" +
    "\267\016\243\017\075\021\251\033\246\034\252\035\232" +
    "\036\241\037\257\040\261\041\256\042\244\043\242\055" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\343\016\076\017\075\041\107\042" +
    "\077\056\074\057\071\060\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\342\016\076\017\075\041" +
    "\107\042\077\056\074\057\071\060\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\006\231\016\243\017\075\021" +
    "\251\032\353\033\246\034\252\035\232\036\241\037\257" +
    "\040\261\041\256\042\244\043\242\055\237\001\001\000" +
    "\036\006\267\016\243\017\075\021\251\033\246\034\252" +
    "\035\232\036\241\037\257\040\261\041\256\042\244\043" +
    "\242\055\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\357\016\076\017\075\041\107\042\077\056" +
    "\074\057\071\060\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\363\016\076\017" +
    "\075\041\107\042\077\056\074\057\071\060\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\231\016" +
    "\243\017\075\021\251\032\366\033\246\034\252\035\232" +
    "\036\241\037\257\040\261\041\256\042\244\043\242\055" +
    "\237\001\001\000\036\006\267\016\243\017\075\021\251" +
    "\033\246\034\252\035\232\036\241\037\257\040\261\041" +
    "\256\042\244\043\242\055\237\001\001\000\002\001\001" +
    "\000\022\013\371\016\076\017\075\041\107\042\077\056" +
    "\074\057\071\060\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\u0103" +
    "\017\075\033\u0101\053\u0104\001\001\000\002\001\001\000" +
    "\004\066\u0110\001\001\000\004\026\337\001\001\000\002" +
    "\001\001\000\022\013\u0106\016\076\017\075\041\107\042" +
    "\077\056\074\057\071\060\102\001\001\000\002\001\001" +
    "\000\012\016\u010a\017\075\033\u0109\054\u0108\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\337\070\u010b" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\006" +
    "\231\016\243\017\075\021\251\032\u010e\033\246\034\252" +
    "\035\232\036\241\037\257\040\261\041\256\042\244\043" +
    "\242\055\237\001\001\000\036\006\267\016\243\017\075" +
    "\021\251\033\246\034\252\035\232\036\241\037\257\040" +
    "\261\041\256\042\244\043\242\055\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\u0113\016\076\017\075\041\107\042\077\056\074\057\071" +
    "\060\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\044\u011d\062\u0119\063\u0117\001\001" +
    "\000\004\062\u0131\001\001\000\002\001\001\000\004\063" +
    "\u012a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\u0120\016\076\017\075\041\107\042\077\056\074\057\071" +
    "\060\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\013\u0124\016\076\017\075\041\107" +
    "\042\077\056\074\057\071\060\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\013\u0127\016\076\017\075" +
    "\041\107\042\077\056\074\057\071\060\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\u012c\016\076\017\075\041\107\042" +
    "\077\056\074\057\071\060\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\u012f\016\076\017\075\041" +
    "\107\042\077\056\074\057\071\060\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\u0134\066\u0135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\u013b\001" +
    "\001\000\004\066\u0139\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\006\231\016\243\017" +
    "\075\021\251\032\u013d\033\246\034\252\035\232\036\241" +
    "\037\257\040\261\041\256\042\244\043\242\055\237\001" +
    "\001\000\036\006\267\016\243\017\075\021\251\033\246" +
    "\034\252\035\232\036\241\037\257\040\261\041\256\042" +
    "\244\043\242\055\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoGraphik$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoGraphik$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoGraphik$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz = new Nodo(); 
    public void syntax_error(Symbol s)
    {
        ErroresGraphik.agregarError("Error sintactico", s.value.toString() + " no debe de ir en esa posicion", s.right, s.left);
    }

    public void unrecovered_syntax_error(Symbol s)
    {
        ErroresGraphik.agregarError("Error sintactico", "No se pudo recuperar de: " + s.value.toString(), s.right, s.left);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoGraphik$actions {




  private final SintacticoGraphik parser;

  /** Constructor */
  CUP$SintacticoGraphik$actions(SintacticoGraphik parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoGraphik$do_action_part00000000(
    int                        CUP$SintacticoGraphik$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGraphik$parser,
    java.util.Stack            CUP$SintacticoGraphik$stack,
    int                        CUP$SintacticoGraphik$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoGraphik$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoGraphik$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoGraphik$parser.done_parsing();
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
System.out.println("inicio");
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 INCLUIR LALS 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int INCLUIRleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int INCLUIRright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo INCLUIR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int LALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        Nodo RAIZ = new Nodo("raiz");
                        RAIZ.hijos.add(INCLUIR);
                        RAIZ.hijos.add(LALS);
                        raiz = RAIZ;
                        System.out.println("FINALIZO");
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LID ::= LID punto ID 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        LID.hijos.add(id);
                        RESULT = (Nodo) LID;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LID",12, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LID ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearLid(id); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LID",12, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ID ::= iden 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = new Nodo(Const.id, nombre); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ID",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ID ::= iden aparentesis LVALOR cparentesis 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		
                        Nodo id = new Nodo(Const.id, nombre);
                        id.hijos.add(LVALOR);
                        RESULT = (Nodo) id;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ID",13, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO ::= entero 
            {
              String RESULT =null;
		 RESULT = Const.numero; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",52, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= decimal 
            {
              String RESULT =null;
		 RESULT = Const.decimal; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",52, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= caracter 
            {
              String RESULT =null;
		 RESULT = Const.caracter; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",52, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= cadena 
            {
              String RESULT =null;
		 RESULT = Const.cadena; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",52, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= bool 
            {
              String RESULT =null;
		 RESULT = Const.bool; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",52, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= iden 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = id; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",52, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LVALOR ::= LVALOR coma VALOR 
            {
              Nodo RESULT =null;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        LVALOR.hijos.add(VALOR);
                        RESULT = (Nodo) LVALOR;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LVALOR ::= VALOR 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearLvalor(VALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LVALOR ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.lvalor); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVALOR",14, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INCLUIR ::= LIMPORTAR 
            {
              Nodo RESULT =null;
		int LIMPORTARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LIMPORTARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LIMPORTAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = LIMPORTAR; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INCLUIR",11, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INCLUIR ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.limportar); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INCLUIR",11, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LIMPORTAR ::= LIMPORTAR IMPORTAR 
            {
              Nodo RESULT =null;
		int LIMPORTARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LIMPORTARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LIMPORTAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int IMPORTARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int IMPORTARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo IMPORTAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(IMPORTAR != null)
                            LIMPORTAR.hijos.add(IMPORTAR);
                        RESULT = (Nodo) LIMPORTAR;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",8, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LIMPORTAR ::= IMPORTAR 
            {
              Nodo RESULT =null;
		int IMPORTARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int IMPORTARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo IMPORTAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 
                        RESULT = new Nodo(Const.limportar);
                        if(IMPORTAR != null)
                            RESULT = NodoGeneral.crearLimportar(IMPORTAR);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",8, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IMPORTAR ::= importar idengk interroga 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearImportar(id, ""); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTAR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IMPORTAR ::= incluirhk iden interroga 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearIncluirhk(id); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTAR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LALS ::= LALS ALS 
            {
              Nodo RESULT =null;
		int LALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int ALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int ALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo ALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(ALS != null)
                            LALS.hijos.add(ALS);
                        RESULT = (Nodo) LALS;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LALS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LALS ::= ALS 
            {
              Nodo RESULT =null;
		int ALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int ALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo ALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 
                        RESULT = new Nodo(Const.lals);
                        if(ALS != null)
                            RESULT = NodoGeneral.crearLals(ALS);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LALS",2, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ALS ::= als iden HEREDA VISIBILIDAD allave LCUERPOALS cllave 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).value;
		int HEREDAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).left;
		int HEREDAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).right;
		Nodo HEREDA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).value;
		int VISIBILIDADleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int VISIBILIDADright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		String VISIBILIDAD = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LCUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		
                        RESULT = NodoGeneral.crearAls(id, VISIBILIDAD, HEREDA, LCUERPOALS);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ALS",3, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // HEREDA ::= hereda iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = new Nodo(Const.hereda, id); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HEREDA",5, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // HEREDA ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.hereda); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HEREDA",5, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VISIBILIDAD ::= dospuntos publico 
            {
              String RESULT =null;
		 RESULT = Const.publico; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",51, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VISIBILIDAD ::= dospuntos protegido 
            {
              String RESULT =null;
		 RESULT = Const.protegido; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",51, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VISIBILIDAD ::= dospuntos privado 
            {
              String RESULT =null;
		 RESULT = Const.privado; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",51, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VISIBILIDAD ::= 
            {
              String RESULT =null;
		 RESULT = Const.publico; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",51, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LCUERPOALS ::= LCUERPOALS CUERPOALS 
            {
              Nodo RESULT =null;
		int LCUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int CUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(CUERPOALS != null)
                            LCUERPOALS.hijos.add(CUERPOALS);
                        RESULT = (Nodo) LCUERPOALS;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPOALS",6, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LCUERPOALS ::= CUERPOALS 
            {
              Nodo RESULT =null;
		int CUERPOALSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOALSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPOALS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        RESULT = new Nodo(Const.lcuerpoals);
                        if(CUERPOALS != null) 
                            RESULT = NodoGeneral.crearLcuerpoals(CUERPOALS);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPOALS",6, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPOALS ::= FUN 
            {
              Nodo RESULT =null;
		int FUNleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int FUNright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo FUN = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = FUN; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPOALS ::= DEC interroga 
            {
              Nodo RESULT =null;
		int DECleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int DECright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo DEC = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = DEC; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPOALS ::= PRINCIPAL 
            {
              Nodo RESULT =null;
		int PRINCIPALleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int PRINCIPALright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo PRINCIPAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = PRINCIPAL; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPOALS ::= DATOS 
            {
              Nodo RESULT =null;
		int DATOSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int DATOSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo DATOS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = DATOS; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUN ::= TIPOFUN iden aparentesis LPAR cparentesis VISIBILIDAD allave LCUERPO cllave 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)).value;
		int LPARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).left;
		int LPARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).right;
		Nodo LPAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).value;
		int VISIBILIDADleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int VISIBILIDADright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		String VISIBILIDAD = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearFuncion(id, tipo, VISIBILIDAD, LPAR, LCUERPO); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("FUN",1, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPOFUN ::= TIPO 
            {
              String RESULT =null;
		int TIPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int TIPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String TIPO = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = TIPO; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPOFUN",53, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPOFUN ::= vacio 
            {
              String RESULT =null;
		 RESULT = Const.vacio; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPOFUN",53, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LPAR ::= LPAR coma TIPO iden 
            {
              Nodo RESULT =null;
		int LPARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int LPARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		Nodo LPAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int TIPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int TIPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String TIPO = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        int t = Semantico.getTipo(TIPO);
                        Nodo par = new Nodo(Const.id, id, t);
                        if(t == Const.tals)
                            par.tipoAls = TIPO;
                        LPAR.hijos.add(par);
                        RESULT = (Nodo) LPAR;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",17, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LPAR ::= TIPO iden 
            {
              Nodo RESULT =null;
		int TIPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int TIPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String TIPO = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearLpar(id, TIPO); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",17, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LPAR ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.lpar); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LPAR",17, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEC ::= var TIPO iden VISIBILIDAD PREASIG 
            {
              Nodo RESULT =null;
		int TIPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int TIPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		String TIPO = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int VISIBILIDADleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int VISIBILIDADright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String VISIBILIDAD = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int PREASIGleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int PREASIGright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo PREASIG = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        RESULT = NodoGeneral.crearDec(id, TIPO, VISIBILIDAD, PREASIG);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DEC",15, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PREASIG ::= LVARIABLES 
            {
              Nodo RESULT =null;
		int LVARIABLESleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LVARIABLESright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LVARIABLES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = LVARIABLES; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PREASIG",40, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PREASIG ::= ASIG 
            {
              Nodo RESULT =null;
		int ASIGleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int ASIGright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo ASIG = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = ASIG; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PREASIG",40, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PREASIG ::= 
            {
              Nodo RESULT =null;
		 RESULT = null; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PREASIG",40, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LVARIABLES ::= LVARIABLES coma iden VISIBILIDAD 
            {
              Nodo RESULT =null;
		int LVARIABLESleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int LVARIABLESright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		Nodo LVARIABLES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int VISIBILIDADleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int VISIBILIDADright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String VISIBILIDAD = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        Nodo par = new Nodo(Const.id, id);
                        par.setVisibilidad(VISIBILIDAD);
                        LVARIABLES.hijos.add(par);
                        RESULT = (Nodo) LVARIABLES;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVARIABLES",39, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LVARIABLES ::= coma iden VISIBILIDAD 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int VISIBILIDADleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int VISIBILIDADright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String VISIBILIDAD = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        Nodo par = new Nodo(Const.id, id);
                        par.setVisibilidad(VISIBILIDAD);
                        Nodo lvar = new Nodo(Const.lvariables);
                        lvar.hijos.add(par);
                        RESULT = (Nodo) lvar;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LVARIABLES",39, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIG ::= igual ASIGNORMAL 
            {
              Nodo RESULT =null;
		int ASIGNORMALleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int ASIGNORMALright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo ASIGNORMAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = ASIGNORMAL; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG",18, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIG ::= LCORCHETES ASIGARR 
            {
              Nodo RESULT =null;
		int LCORCHETESleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCORCHETESright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCORCHETES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int ASIGARRleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int ASIGARRright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo ASIGARR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearAsigArr(LCORCHETES, ASIGARR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG",18, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNORMAL ::= VALOR 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = VALOR; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNORMAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNORMAL ::= nuevo iden aparentesis cparentesis 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		 RESULT = new Nodo(Const.nuevo, id); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNORMAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LCORCHETES ::= LCORCHETES acorchete VALOR ccorchete 
            {
              Nodo RESULT =null;
		int LCORCHETESleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int LCORCHETESright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		Nodo LCORCHETES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		
                        LCORCHETES.hijos.add(VALOR);
                        RESULT = (Nodo) LCORCHETES;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCORCHETES",20, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LCORCHETES ::= acorchete VALOR ccorchete 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		
                        RESULT = NodoGeneral.crearLcorchetes(VALOR);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCORCHETES",20, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGARR ::= igual LLAVE 
            {
              Nodo RESULT =null;
		int LLAVEleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LLAVEright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LLAVE = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = LLAVE; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGARR",21, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGARR ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.lllave); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGARR",21, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LLAVE ::= allave LLLAVES cllave 
            {
              Nodo RESULT =null;
		int LLLAVESleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LLLAVESright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LLLAVES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = LLLAVES; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAVE",23, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LLAVE ::= allave LVALOR cllave 
            {
              Nodo RESULT =null;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = LVALOR; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAVE",23, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LLLAVES ::= LLLAVES coma LLAVE 
            {
              Nodo RESULT =null;
		int LLLAVEleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LLLAVEright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LLLAVE = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int LLAVEleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LLAVEright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LLAVE = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(LLAVE != null)
                            LLLAVE.hijos.add(LLAVE);
                        RESULT = (Nodo) LLLAVE;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLLAVES",22, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LLLAVES ::= LLAVE 
            {
              Nodo RESULT =null;
		int LLAVEleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LLAVEright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LLAVE = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 
                        RESULT = new Nodo(Const.lllave);
                        if(LLAVE != null)
                            RESULT = NodoGeneral.crearLlave(LLAVE);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLLAVES",22, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PRINCIPAL ::= vacio inicio aparentesis cparentesis allave LCUERPO cllave 
            {
              Nodo RESULT =null;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		
                        RESULT = NodoGeneral.crearPrincipal(LCUERPO);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PRINCIPAL",16, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LCUERPO ::= LCUERPO CUERPO 
            {
              Nodo RESULT =null;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        if(CUERPO != null)
                            LCUERPO.hijos.add(CUERPO);
                        RESULT = (Nodo) LCUERPO;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPO",24, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LCUERPO ::= CUERPO 
            {
              Nodo RESULT =null;
		int CUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 
                        RESULT = new Nodo(Const.lcuerpo);
                        if(CUERPO != null)
                            RESULT = NodoGeneral.crearCuerpo(CUERPO);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCUERPO",24, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUERPO ::= DEC interroga 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUERPO ::= ASIGNACION interroga 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CUERPO ::= SI 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CUERPO ::= SELECCION 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPO ::= PARA 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUERPO ::= MIENTRAS 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CUERPO ::= HACER 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CUERPO ::= LLAMADO interroga 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CUERPO ::= llamar datos aparentesis cparentesis interroga 
            {
              Nodo RESULT =null;
		 Nodo nodo = new Nodo(Const.datos, Const.datos); RESULT = NodoGeneral.crearLlamar(nodo); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CUERPO ::= LLAMADOHK interroga 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUERPO ::= GRAFICAR interroga 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CUERPO ::= IMPRIMIR interroga 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CUERPO ::= LID OP interroga 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String OP = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearAumento(LID, OP); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CUERPO ::= retornar VALOR interroga 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = new Nodo(Const.retornar); RESULT.hijos.add(t1); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CUERPO ::= terminar interroga 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.terminar); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CUERPO ::= continuar interroga 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Const.continuar); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CUERPO ::= error interroga 
            {
              Nodo RESULT =null;

              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ASIGNACION ::= LID LCORCHETES igual VALOR 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LCORCHETESleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LCORCHETESright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LCORCHETES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearAsignacion(LID, VALOR, LCORCHETES); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIGNACION ::= LID igual VALOR 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearAsignacion(LID, VALOR, null); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIGNACION ::= LID igual nuevo iden aparentesis cparentesis 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		 Nodo nuevo = new Nodo(Const.nuevo, id); RESULT = NodoGeneral.crearAsignacion(LID, nuevo, null); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SI ::= si aparentesis VALOR cparentesis allave LCUERPO cllave SINO 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).value;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int SINOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int SINOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo SINO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        RESULT = NodoGeneral.crearIf(VALOR, LCUERPO, SINO);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SI",26, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SINO ::= sino allave LCUERPO cllave 
            {
              Nodo RESULT =null;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = LCUERPO; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SINO",35, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SINO ::= 
            {
              Nodo RESULT =null;
		 RESULT = null; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SINO",35, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SELECCION ::= seleccion aparentesis ACCESO cparentesis allave LCASOS DEFECTO cllave 
            {
              Nodo RESULT =null;
		int ACCESOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).left;
		int ACCESOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).right;
		Nodo ACCESO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).value;
		int LCASOSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int LCASOSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo LCASOS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int DEFECTOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int DEFECTOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo DEFECTO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		
                        RESULT = NodoGeneral.crearSeleccion(ACCESO, LCASOS, DEFECTO);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SELECCION",27, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LCASOS ::= LCASOS CASO 
            {
              Nodo RESULT =null;
		int LCASOSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCASOSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCASOS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int CASOSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CASOSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CASOS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        LCASOS.hijos.add(CASOS);
                        RESULT = (Nodo) LCASOS;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCASOS",36, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LCASOS ::= CASO 
            {
              Nodo RESULT =null;
		int CASOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int CASOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo CASO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearLcasos(CASO); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LCASOS",36, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASO ::= caso VALOR dospuntos LCUERPO 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearCaso(VALOR, LCUERPO); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CASO",37, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DEFECTO ::= defecto dospuntos LCUERPO 
            {
              Nodo RESULT =null;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearDefecto(LCUERPO); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DEFECTO",38, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DEFECTO ::= 
            {
              Nodo RESULT =null;
		 RESULT = null; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DEFECTO",38, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARA ::= para aparentesis ASIGPARA dospuntos VALOR dospuntos VALPARA cparentesis allave LCUERPO cllave 
            {
              Nodo RESULT =null;
		int ASIGPARAleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)).left;
		int ASIGPARAright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)).right;
		Nodo ASIGPARA = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-8)).value;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)).value;
		int VALleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).left;
		int VALright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).right;
		Nodo VAL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).value;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		
                        RESULT = NodoGeneral.crearPara(ASIGPARA, VALOR, VAL, LCUERPO);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PARA",28, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ASIGPARA ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int ASIGleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int ASIGright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo ASIG = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = ASIG; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGPARA",41, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ASIGPARA ::= var TIPO iden igual VALOR 
            {
              Nodo RESULT =null;
		int TIPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int TIPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		String TIPO = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        RESULT = NodoGeneral.crearDec(id, TIPO, Const.publico, VALOR);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGPARA",41, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALPARA ::= LID OP 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int OPleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String OP = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearAumento(LID, OP); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALPARA",42, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALPARA ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int ASIGleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int ASIGright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo ASIG = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = ASIG; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALPARA",42, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP ::= masmas 
            {
              String RESULT =null;
		 RESULT = Const.masmas; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OP",54, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP ::= menosmenos 
            {
              String RESULT =null;
		 RESULT = Const.menosmenos; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OP",54, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MIENTRAS ::= mientras aparentesis VALOR cparentesis allave LCUERPO cllave 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).value;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		
                        RESULT = NodoGeneral.crearMientras(VALOR, LCUERPO);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MIENTRAS",29, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // HACER ::= hacer allave LCUERPO cllave mientras aparentesis VALOR cparentesis 
            {
              Nodo RESULT =null;
		int LCUERPOleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).left;
		int LCUERPOright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).right;
		Nodo LCUERPO = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)).value;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		
                        RESULT = NodoGeneral.crearHacer(VALOR, LCUERPO);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HACER",30, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // GRAFICAR ::= graphikarfuncion aparentesis LID coma LID cparentesis 
            {
              Nodo RESULT =null;
		int LID1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int LID1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		Nodo LID1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LID2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LID2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LID2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		
                        RESULT = NodoGeneral.crearGraficar(LID1, LID2);
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("GRAFICAR",33, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LLAMADO ::= llamar LID 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearLlamar(LID); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADO",31, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LLAMADOHK ::= llamarhk iden aparentesis LVALOR cparentesis 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)).value;
		int LVALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LVALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LVALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearLlamado(id, LVALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADOHK",32, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IMPRIMIR ::= imprimir aparentesis VALOR cparentesis 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearImprimir(VALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",43, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= E mas E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.mas, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E menos E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.menos, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= E por E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.por, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= E dividido E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.dividido, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= E pot E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.pot, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= menos E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.menos, t1, null); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= aparentesis VALOR cparentesis 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= numero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.numero, t1, Const.tnumero); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= dec 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.decimal, t1, Const.tdecimal); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= verdadero 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.verdadero, t1, Const.tbool); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= falso 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.falso, t1, Const.tbool); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= car 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.caracter, t1, Const.tcaracter); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= cad 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearHoja(Const.cadena, t1, Const.tcadena); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= ACCESO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= LLAMADO 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= LLAMADOHK 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = t1; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VALOR ::= VALOR or VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.or, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VALOR ::= VALOR xor VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.xor, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VALOR ::= VALOR and VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.and, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VALOR ::= not VALOR 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearNodo(Const.not, t1, null); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VALOR ::= REL 
            {
              Nodo RESULT =null;
		int RELleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int RELright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo REL = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = REL; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VALOR ::= columna aparentesis VALOR cparentesis 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearColumna(VALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // REL ::= E OPREL E 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo t2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoOperacion.crearRelacional(op, t1, t2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("REL",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // REL ::= E 
            {
              Nodo RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = E; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("REL",45, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ACCESO ::= LID LCORCHETES 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int LCORCHETESleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LCORCHETESright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LCORCHETES = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		
                        LID.hijos.add(LCORCHETES);
                        RESULT = (Nodo) LID;
                    
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESO",44, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ACCESO ::= LID 
            {
              Nodo RESULT =null;
		int LIDleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int LIDright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo LID = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = LID; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESO",44, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPREL ::= menor 
            {
              String RESULT =null;
		 RESULT = Const.menor; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",50, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPREL ::= mayor 
            {
              String RESULT =null;
		 RESULT = Const.mayor; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",50, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPREL ::= menorigual 
            {
              String RESULT =null;
		 RESULT = Const.menorigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",50, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPREL ::= mayorigual 
            {
              String RESULT =null;
		 RESULT = Const.mayorigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",50, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPREL ::= igualigual 
            {
              String RESULT =null;
		 RESULT = Const.igualigual; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",50, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPREL ::= diferente 
            {
              String RESULT =null;
		 RESULT = Const.diferente; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPREL",50, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DATOS ::= vacio datos aparentesis cparentesis allave CUERPODATOS cllave 
            {
              Nodo RESULT =null;
		int CUERPODATOSleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int CUERPODATOSright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo CUERPODATOS = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = CUERPODATOS; 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DATOS",47, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CUERPODATOS ::= PROCESAR DONDE 
            {
              Nodo RESULT =null;
		int PROCESARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int PROCESARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo PROCESAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int DONDEleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int DONDEright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo DONDE = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearDatos(PROCESAR, DONDE); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPODATOS",34, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CUERPODATOS ::= DONDE PROCESAR 
            {
              Nodo RESULT =null;
		int DONDEleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int DONDEright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo DONDE = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		int PROCESARleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).left;
		int PROCESARright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()).right;
		Nodo PROCESAR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.peek()).value;
		 RESULT = NodoGeneral.crearDatos(PROCESAR, DONDE); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPODATOS",34, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PROCESAR ::= procesar igual VALOR interroga 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearProcesar(VALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PROCESAR",49, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DONDE ::= donde aparentesis VALOR cparentesis igual VALOR interroga 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)).value;
		int VALOR2left = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).left;
		int VALOR2right = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).right;
		Nodo VALOR2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-1)).value;
		 RESULT = NodoGeneral.crearDonde(VALOR, VALOR2); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DONDE",48, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DONDE ::= dondecada aparentesis VALOR cparentesis interroga 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		 RESULT = NodoGeneral.crearDondeCada(VALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DONDE",48, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DONDE ::= dondetodo aparentesis VALOR cparentesis interroga 
            {
              Nodo RESULT =null;
		int VALORleft = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).left;
		int VALORright = ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).right;
		Nodo VALOR = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-2)).value;
		 RESULT = NodoGeneral.crearDondeTodo(VALOR); 
              CUP$SintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DONDE",48, ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.elementAt(CUP$SintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$SintacticoGraphik$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoGraphik$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoGraphik$do_action(
    int                        CUP$SintacticoGraphik$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGraphik$parser,
    java.util.Stack            CUP$SintacticoGraphik$stack,
    int                        CUP$SintacticoGraphik$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoGraphik$do_action_part00000000(
                               CUP$SintacticoGraphik$act_num,
                               CUP$SintacticoGraphik$parser,
                               CUP$SintacticoGraphik$stack,
                               CUP$SintacticoGraphik$top);
    }
}

}
