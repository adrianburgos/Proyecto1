/* The following code was generated by JFlex 1.6.1 */

//codigo de usuario
//paquetes e importaciones
package Analisis.graphik;
import java_cup.runtime.*;
import Reportes.*;

//opciones y declaraciones

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analisis/graphik/LexicoGraphik.jflex</tt>
 */
public class LexicoGraphik implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    58, 58, 58, 58, 58, 58, 58, 58, 58, 15,  4,  6,  7,  5, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    15, 45, 13, 16, 58, 58, 44, 12, 56, 57, 41, 39, 51, 40,  2, 17, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 50, 58, 46, 47, 48, 49, 
    58, 19, 32, 27, 26, 23, 38,  9, 36, 29,  3, 11, 31, 30, 21, 24, 
    33,  3, 20, 35, 25, 22, 18,  3,  3,  3,  3, 54, 14, 55, 42, 37, 
    58, 19, 32, 27, 26, 23, 38,  9, 36, 29,  3, 11, 31, 30, 21, 24, 
    33,  3, 20, 35, 25, 22, 18,  3,  3,  3,  3, 52, 43, 53, 58, 58, 
    58, 58, 58, 58, 58,  6, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\1\5\1\3\3\5"+
    "\1\6\10\3\1\0\5\3\1\0\3\3\1\7\1\10"+
    "\1\11\1\12\2\5\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\0\2\3\2\0\1\30\2\0\1\31\1\0\14\3"+
    "\2\0\2\3\1\0\6\3\1\0\1\32\1\3\2\32"+
    "\3\3\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\0\2\3\1\45\1\30\1\31"+
    "\2\0\1\46\2\3\2\47\12\3\1\0\3\3\3\0"+
    "\1\3\1\0\2\3\1\0\5\3\1\0\2\3\2\0"+
    "\5\3\3\50\1\3\4\0\1\51\1\0\7\3\1\0"+
    "\5\3\2\52\2\3\4\0\4\3\1\0\2\3\1\53"+
    "\1\54\2\3\1\0\2\3\1\0\1\55\1\3\1\55"+
    "\2\3\1\0\2\3\1\0\1\51\2\56\2\3\1\57"+
    "\1\3\1\0\1\3\2\60\1\0\2\3\1\61\2\3"+
    "\1\0\2\3\4\0\1\3\1\0\1\3\1\0\2\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\62\1\3\2\63\1\0\3\3\1\64\1\0\1\3"+
    "\1\0\5\3\1\65\1\0\2\3\1\0\1\66\3\0"+
    "\1\3\1\66\2\3\1\0\1\3\1\67\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\70"+
    "\2\0\3\3\1\0\1\3\2\71\1\72\3\3\1\0"+
    "\1\3\1\73\3\0\1\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\3\2\74\2\75\2\0\1\3"+
    "\1\0\2\3\1\76\2\77\2\3\1\100\1\0\1\3"+
    "\1\0\1\101\1\102\1\3\1\101\1\102\3\103\2\104"+
    "\1\0\1\3\2\105\1\0\1\3\1\0\1\3\1\106"+
    "\1\107\1\110\2\111\1\0\1\3\2\112\2\113\1\0"+
    "\1\3\3\114\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\2\0\1\3\1\0\1\3\2\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\261\0\u0127\0\261"+
    "\0\u0162\0\u019d\0\u01d8\0\u0213\0\261\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\261\0\261\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6"+
    "\0\u0811\0\261\0\261\0\261\0\261\0\261\0\261\0\261"+
    "\0\261\0\261\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u01d8"+
    "\0\261\0\u0973\0\u09ae\0\261\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a"+
    "\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72"+
    "\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022"+
    "\0\u105d\0\u1098\0\u10d3\0\u110e\0\261\0\261\0\261\0\261"+
    "\0\261\0\261\0\261\0\261\0\261\0\u084c\0\u1149\0\u1184"+
    "\0\u11bf\0\261\0\u01d8\0\u11fa\0\u1235\0\u1270\0\u08c2\0\u12ab"+
    "\0\u12e6\0\u0887\0\u08c2\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d"+
    "\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\261\0\u0887\0\u08c2\0\u1ba8\0\u11fa\0\u1be3\0\u1c1e\0\u1c59"+
    "\0\u09ae\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6"+
    "\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\261"+
    "\0\u08c2\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130"+
    "\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u08c2\0\u08c2"+
    "\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\261\0\u242f"+
    "\0\u08c2\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\261"+
    "\0\261\0\u08c2\0\u25cc\0\u2607\0\u08c2\0\u2642\0\u267d\0\u26b8"+
    "\0\u0887\0\u08c2\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a"+
    "\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2"+
    "\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca"+
    "\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\u08c2\0\u2ddd\0\261\0\u08c2\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9"+
    "\0\u08c2\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066"+
    "\0\u30a1\0\u08c2\0\u30dc\0\u3117\0\u3152\0\u318d\0\261\0\u31c8"+
    "\0\u3203\0\u323e\0\u3279\0\u08c2\0\u32b4\0\u32ef\0\u332a\0\u3365"+
    "\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d"+
    "\0\u3578\0\u35b3\0\u08c2\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da"+
    "\0\u3715\0\u3750\0\261\0\u08c2\0\u08c2\0\u378b\0\u37c6\0\u3801"+
    "\0\u383c\0\u3877\0\u08c2\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e"+
    "\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76"+
    "\0\u3bb1\0\261\0\u08c2\0\261\0\u08c2\0\u3bec\0\u3c27\0\u3c62"+
    "\0\u3c9d\0\u3cd8\0\u3d13\0\u08c2\0\261\0\u08c2\0\u3d4e\0\u3d89"+
    "\0\u08c2\0\u3dc4\0\u3dff\0\u3e3a\0\261\0\261\0\u3e75\0\u08c2"+
    "\0\u08c2\0\261\0\u0887\0\u08c2\0\u0887\0\u08c2\0\u3eb0\0\u3eeb"+
    "\0\261\0\u08c2\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u08c2\0\u08c2"+
    "\0\u08c2\0\261\0\u08c2\0\u4012\0\u404d\0\261\0\u08c2\0\261"+
    "\0\u08c2\0\u4088\0\u40c3\0\261\0\u0887\0\u08c2\0\u40fe\0\u4139"+
    "\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311"+
    "\0\u434c\0\u4387\0\u43c2\0\261\0\u08c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\7\1\10\1\6"+
    "\1\0\1\11\1\0\1\5\1\12\1\13\1\10\1\6"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\5\1\22"+
    "\1\5\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\5\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\10\1\0\7\10\1\0\1\10\1\0"+
    "\21\10\1\0\5\10\1\0\30\10\1\0\1\3\1\63"+
    "\163\0\1\64\1\65\1\64\1\65\5\0\1\65\1\64"+
    "\1\65\6\64\12\65\1\64\5\65\1\64\4\65\24\64"+
    "\4\0\1\6\66\0\1\64\1\65\1\64\1\65\5\0"+
    "\1\65\1\64\1\65\6\64\2\65\1\66\7\65\1\64"+
    "\5\65\1\64\4\65\24\64\4\67\5\0\62\67\15\70"+
    "\1\71\1\72\54\70\4\73\1\74\14\73\1\75\51\73"+
    "\1\64\1\65\1\64\1\65\5\0\1\65\1\64\1\65"+
    "\6\64\1\65\1\76\3\65\1\77\4\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\65"+
    "\1\64\1\65\6\64\12\65\1\64\2\65\1\100\2\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\65"+
    "\1\64\1\65\6\64\5\65\1\101\4\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\65"+
    "\1\64\1\65\6\64\4\65\1\102\5\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\65"+
    "\1\64\1\65\6\64\3\65\1\103\6\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\65"+
    "\1\64\1\65\6\64\5\65\1\104\4\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\65"+
    "\1\64\1\65\6\64\1\65\1\105\3\65\1\106\1\107"+
    "\3\65\1\64\5\65\1\64\4\65\25\64\1\65\1\64"+
    "\1\65\5\0\1\65\1\64\1\65\6\64\1\65\1\110"+
    "\4\65\1\111\3\65\1\64\5\65\1\64\4\65\24\64"+
    "\25\0\1\112\10\0\1\113\34\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\65\1\64\1\65\6\64\3\65\1\114"+
    "\6\65\1\64\1\65\1\115\3\65\1\64\4\65\25\64"+
    "\1\65\1\64\1\65\5\0\1\65\1\64\1\65\6\64"+
    "\12\65\1\116\1\117\4\65\1\64\4\65\25\64\1\65"+
    "\1\64\1\65\5\0\1\65\1\64\1\65\6\64\12\65"+
    "\1\64\2\65\1\120\2\65\1\64\4\65\25\64\1\65"+
    "\1\64\1\65\5\0\1\65\1\64\1\65\6\64\6\65"+
    "\1\121\3\65\1\64\5\65\1\64\4\65\25\64\1\65"+
    "\1\64\1\65\5\0\1\65\1\64\1\65\6\64\1\65"+
    "\1\122\1\123\1\65\1\124\5\65\1\64\5\65\1\64"+
    "\4\65\24\64\27\0\1\125\4\0\2\126\35\0\1\64"+
    "\1\65\1\64\1\65\5\0\1\65\1\64\1\65\6\64"+
    "\5\65\1\127\4\65\1\130\1\131\4\65\1\64\4\65"+
    "\25\64\1\65\1\64\1\65\5\0\1\65\1\64\1\65"+
    "\6\64\1\65\1\132\3\65\1\133\4\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\65"+
    "\1\64\1\65\6\64\1\65\1\134\10\65\1\64\5\65"+
    "\1\64\4\65\24\64\47\0\1\135\73\0\1\136\75\0"+
    "\1\137\72\0\1\140\1\141\75\0\1\142\72\0\1\143"+
    "\72\0\1\144\72\0\1\145\14\0\1\146\102\0\1\147"+
    "\61\0\1\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\12\65\1\64\5\65\1\64\4\65\25\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\1\65\1\151\10\65\1\64\5\65\1\64\4\65\24\64"+
    "\14\0\1\152\56\0\15\70\1\153\1\72\54\70\4\73"+
    "\1\74\66\73\4\75\1\154\11\75\1\155\1\75\1\73"+
    "\1\156\51\75\1\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\2\65\1\157\6\65\1\160\1\64"+
    "\5\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\2\65\1\161\7\65\1\64"+
    "\5\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\12\65\1\64\5\65\1\162"+
    "\1\163\3\65\25\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\7\65\1\164\2\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\5\65\1\165\4\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\7\65\1\166\2\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\2\65\1\167\7\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\7\65\1\170\2\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\11\65\1\171\1\64\5\65\1\64"+
    "\3\65\1\172\25\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\3\65\1\173\6\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\2\65\1\174\5\65\1\175\1\65"+
    "\1\64\5\65\1\176\1\177\3\65\25\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\3\65\1\200"+
    "\6\65\1\64\2\65\1\201\2\65\1\64\4\65\24\64"+
    "\33\0\1\202\2\203\76\0\1\204\31\0\1\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\11\65"+
    "\1\205\1\206\1\207\4\65\1\64\4\65\25\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\12\65"+
    "\1\64\4\65\1\210\1\64\4\65\24\64\11\0\1\147"+
    "\15\0\1\211\43\0\1\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\5\65\1\212\4\65\1\64"+
    "\5\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\1\65\1\213\10\65\1\64"+
    "\5\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\6\65\1\214\3\65\1\64"+
    "\5\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\2\65\1\215\7\65\1\64"+
    "\5\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\6\65\1\216\3\65\1\217"+
    "\1\220\4\65\1\64\4\65\25\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\12\65\1\64\3\65"+
    "\1\221\1\65\1\64\4\65\24\64\37\0\1\222\60\0"+
    "\1\223\45\0\1\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\12\65\1\64\2\65\1\224\2\65"+
    "\1\64\4\65\24\64\11\0\1\147\13\0\1\223\45\0"+
    "\1\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\3\65\1\225\6\65\1\64\5\65\1\64\4\65"+
    "\25\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\11\65\1\226\1\64\5\65\1\64\4\65\25\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\2\65\1\227\7\65\1\64\5\65\1\64\4\65\25\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\12\65\1\64\2\65\1\230\2\65\1\64\4\65\24\64"+
    "\12\0\2\231\57\0\1\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\232\1\233\6\64\12\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\12\65\1\64\4\65\1\234\1\64\4\65"+
    "\24\64\16\235\1\236\1\235\1\0\1\237\51\235\4\75"+
    "\1\154\11\75\1\155\2\75\1\240\51\75\4\73\1\74"+
    "\13\73\1\241\52\73\1\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\12\65\1\242\1\243\4\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\10\65\1\244\1\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\6\65\1\245\3\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\1\246\11\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\5\65\1\247\4\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\12\65\1\64\1\65\1\250\3\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\6\65\1\251\3\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\12\65\1\252\1\253\4\65\1\64\4\65"+
    "\25\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\5\65\1\254\4\65\1\64\5\65\1\64\4\65"+
    "\25\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\10\65\1\255\1\65\1\64\5\65\1\64\4\65"+
    "\25\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\1\65\1\256\10\65\1\64\5\65\1\64\4\65"+
    "\25\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\5\65\1\257\4\65\1\64\5\65\1\64\4\65"+
    "\24\64\11\0\1\147\16\0\1\260\42\0\1\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\6\65"+
    "\1\261\3\65\1\64\5\65\1\64\4\65\25\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\7\65"+
    "\1\262\2\65\1\64\5\65\1\64\4\65\25\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\4\65"+
    "\1\263\5\65\1\64\5\65\1\64\4\65\24\64\37\0"+
    "\1\264\66\0\1\265\63\0\1\266\3\0\1\267\42\0"+
    "\1\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\12\65\1\64\2\65\1\270\2\65\1\64\4\65"+
    "\24\64\11\0\1\147\21\0\1\265\37\0\1\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\11\65"+
    "\1\271\1\64\5\65\1\64\4\65\25\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\2\65\1\272"+
    "\3\65\1\273\3\65\1\64\5\65\1\64\4\65\24\64"+
    "\25\0\1\274\45\0\1\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\3\65\1\275\6\65\1\64"+
    "\5\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\12\65\1\64\1\65\1\276"+
    "\3\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\12\65\1\64\2\65\1\277"+
    "\2\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\1\65\1\300\10\65\1\64"+
    "\5\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\7\65\1\301\1\65\1\302"+
    "\1\64\5\65\1\64\4\65\24\64\11\0\1\147\10\0"+
    "\1\303\50\0\1\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\1\304\11\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\12\65\1\64\2\65\1\305\2\65\1\64"+
    "\4\65\24\64\27\0\1\306\73\0\1\307\42\0\1\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\5\65\1\310\4\65\1\64\5\65\1\64\4\65\25\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\6\65\1\311\3\65\1\64\5\65\1\64\4\65\25\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\5\65\1\312\4\65\1\64\5\65\1\64\4\65\25\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\5\65\1\313\4\65\1\64\5\65\1\64\4\65\25\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\12\65\1\64\5\65\1\314\1\315\3\65\25\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\12\65"+
    "\1\64\5\65\1\64\1\65\1\316\2\65\24\64\16\235"+
    "\1\236\2\235\1\317\51\235\20\0\1\320\52\0\4\75"+
    "\1\154\11\75\1\155\1\75\1\241\1\156\51\75\11\0"+
    "\1\147\16\0\1\321\42\0\1\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\6\65\1\322\3\65"+
    "\1\64\5\65\1\64\4\65\25\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\1\65\1\323\10\65"+
    "\1\64\5\65\1\64\4\65\25\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\2\65\1\324\7\65"+
    "\1\64\5\65\1\64\4\65\25\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\6\65\1\325\3\65"+
    "\1\64\5\65\1\64\4\65\25\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\2\65\1\326\7\65"+
    "\1\64\5\65\1\64\4\65\25\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\12\65\1\327\1\330"+
    "\4\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\12\65\1\64\5\65\1\331"+
    "\1\332\3\65\24\64\11\0\1\147\24\0\1\333\34\0"+
    "\1\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\12\65\1\64\1\65\1\334\3\65\1\64\4\65"+
    "\25\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\11\65\1\335\1\64\5\65\1\64\4\65\25\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\5\65\1\336\4\65\1\64\5\65\1\64\4\65\25\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\11\65\1\337\1\64\5\65\1\64\4\65\25\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\3\65"+
    "\1\340\6\65\1\64\5\65\1\64\4\65\25\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\12\65"+
    "\1\341\1\342\4\65\1\64\4\65\25\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\12\65\1\64"+
    "\1\65\1\343\3\65\1\64\4\65\24\64\26\0\1\344"+
    "\100\0\2\345\71\0\2\346\61\0\1\347\46\0\1\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\4\65\1\350\5\65\1\64\5\65\1\64\4\65\25\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\12\65\1\351\1\352\4\65\1\64\4\65\25\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\12\65"+
    "\1\353\1\354\4\65\1\64\4\65\25\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\2\65\1\355"+
    "\7\65\1\64\5\65\1\64\4\65\24\64\31\0\1\356"+
    "\41\0\1\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\7\65\1\357\2\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\1\65\1\360\10\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\5\65\1\361\4\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\5\65\1\362\4\65\1\64\5\65\1\64"+
    "\4\65\24\64\23\0\1\363\47\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\1\65\1\364"+
    "\10\65\1\64\5\65\1\64\4\65\25\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\12\65\1\365"+
    "\1\366\4\65\1\64\4\65\24\64\33\0\1\367\37\0"+
    "\1\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\11\65\1\370\1\64\5\65\1\64\4\65\25\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\2\65\1\371\7\65\1\64\5\65\1\64\4\65\25\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\10\65\1\372\1\65\1\64\5\65\1\64\4\65\24\64"+
    "\11\0\1\147\16\0\1\373\42\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\6\65\1\374"+
    "\3\65\1\64\5\65\1\64\4\65\25\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\12\65\1\375"+
    "\1\376\4\65\1\64\4\65\24\64\16\235\1\236\1\235"+
    "\1\320\1\237\51\235\1\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\10\65\1\377\1\65\1\64"+
    "\5\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\3\65\1\u0100\6\65\1\64"+
    "\5\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\6\65\1\u0101\3\65\1\64"+
    "\5\65\1\64\4\65\24\64\11\0\1\147\13\0\1\u0102"+
    "\45\0\1\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\3\65\1\u0103\6\65\1\64\5\65\1\64"+
    "\4\65\24\64\23\0\1\u0104\47\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\1\65\1\u0105"+
    "\10\65\1\64\5\65\1\64\4\65\25\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\7\65\1\u0106"+
    "\2\65\1\64\5\65\1\64\4\65\25\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\7\65\1\u0107"+
    "\1\65\1\u0108\1\64\5\65\1\64\4\65\25\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\7\65"+
    "\1\u0109\2\65\1\64\5\65\1\64\4\65\25\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\1\65"+
    "\1\u010a\10\65\1\64\5\65\1\64\4\65\24\64\11\0"+
    "\1\147\13\0\1\u010b\45\0\1\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\3\65\1\u010c\6\65"+
    "\1\64\5\65\1\64\4\65\25\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\3\65\1\u010d\6\65"+
    "\1\64\5\65\1\64\4\65\24\64\34\0\2\u010e\65\0"+
    "\1\u010f\100\0\1\u0110\65\0\1\u0111\41\0\1\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\12\65"+
    "\1\u0112\1\u0113\4\65\1\64\4\65\24\64\11\0\1\147"+
    "\16\0\1\u010f\42\0\1\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\6\65\1\u0114\3\65\1\64"+
    "\5\65\1\64\4\65\24\64\11\0\1\147\24\0\1\u0110"+
    "\34\0\1\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\12\65\1\64\1\65\1\u0115\3\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\7\65\1\u0116\2\65\1\64\5\65\1\64"+
    "\4\65\24\64\24\0\1\u0117\46\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\2\65\1\u0118"+
    "\7\65\1\64\5\65\1\64\4\65\25\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\2\65\1\u0119"+
    "\7\65\1\64\5\65\1\64\4\65\25\64\1\65\1\64"+
    "\1\65\5\0\1\u011a\1\64\1\65\6\64\12\65\1\64"+
    "\5\65\1\64\4\65\25\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\12\65\1\64\5\65\1\u011b"+
    "\1\u011c\3\65\24\64\32\0\1\u011d\40\0\1\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\10\65"+
    "\1\u011e\1\65\1\64\5\65\1\64\4\65\24\64\11\0"+
    "\1\147\21\0\1\u011f\37\0\1\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\11\65\1\u0120\1\64"+
    "\5\65\1\64\4\65\24\64\33\0\1\u0121\37\0\1\64"+
    "\1\65\1\64\1\65\5\0\1\150\1\64\1\65\6\64"+
    "\11\65\1\u0122\1\64\5\65\1\64\4\65\25\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\1\65"+
    "\1\u0123\10\65\1\64\5\65\1\64\4\65\24\64\11\0"+
    "\1\147\2\u0124\57\0\1\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\u0125\1\u0126\6\64\12\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\5\65\1\u0127\4\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\1\65\1\u0128\10\65\1\64\5\65\1\64"+
    "\4\65\24\64\23\0\1\u0129\47\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\1\65\1\u012a"+
    "\10\65\1\64\5\65\1\64\4\65\24\64\37\0\1\u012b"+
    "\33\0\1\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\12\65\1\64\2\65\1\u012c\2\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\6\65\1\u012d\3\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\6\65\1\u012e\3\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\1\65\1\u012f\10\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\5\65\1\u0130\4\65\1\64\5\65\1\64"+
    "\4\65\24\64\26\0\1\u0131\44\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\4\65\1\u0132"+
    "\5\65\1\64\5\65\1\64\4\65\25\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\1\65\1\u0133"+
    "\10\65\1\64\5\65\1\64\4\65\24\64\24\0\1\u0134"+
    "\102\0\2\u0135\60\0\1\u0136\60\0\1\147\12\0\1\u0134"+
    "\46\0\1\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\2\65\1\u0137\7\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\12\65\1\u0138\1\u0139\4\65\1\64\4\65"+
    "\25\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\1\65\1\u013a\10\65\1\64\5\65\1\64\4\65"+
    "\24\64\23\0\1\u013b\47\0\1\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\1\65\1\u013c\10\65"+
    "\1\64\5\65\1\64\4\65\25\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\12\65\1\64\5\65"+
    "\1\64\1\65\1\u013d\2\65\25\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\232\1\233\6\64\12\65\1\u013e\1\u013f"+
    "\4\65\1\64\4\65\24\64\11\0\1\147\11\0\1\u0140"+
    "\47\0\1\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\1\65\1\u0141\10\65\1\64\5\65\1\64"+
    "\4\65\24\64\30\0\1\u0142\42\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\6\65\1\u0143"+
    "\3\65\1\64\5\65\1\64\4\65\24\64\30\0\1\u0144"+
    "\42\0\1\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\6\65\1\u0145\3\65\1\64\5\65\1\64"+
    "\4\65\24\64\34\0\2\u0146\35\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\12\65\1\u0147"+
    "\1\u0148\4\65\1\64\4\65\24\64\23\0\1\u0149\60\0"+
    "\1\147\11\0\1\u0149\47\0\1\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\1\65\1\u014a\10\65"+
    "\1\64\5\65\1\64\4\65\25\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\2\65\1\u014b\7\65"+
    "\1\64\5\65\1\64\4\65\25\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\2\65\1\u014c\7\65"+
    "\1\64\5\65\1\64\4\65\24\64\24\0\1\u014d\46\0"+
    "\1\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\2\65\1\u014e\7\65\1\64\5\65\1\64\4\65"+
    "\25\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\10\65\1\u014f\1\65\1\64\5\65\1\64\4\65"+
    "\25\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\10\65\1\u0150\1\65\1\64\5\65\1\64\4\65"+
    "\25\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\2\65\1\u0151\7\65\1\64\5\65\1\64\4\65"+
    "\24\64\23\0\1\u0152\47\0\1\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\1\65\1\u0153\10\65"+
    "\1\64\5\65\1\64\4\65\24\64\45\0\1\u0154\51\0"+
    "\1\u0155\72\0\1\u0156\46\0\1\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\12\65\1\64\5\65"+
    "\1\64\2\65\1\u0157\1\65\24\64\11\0\1\147\12\0"+
    "\1\u0155\46\0\1\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\2\65\1\u0158\7\65\1\64\5\65"+
    "\1\64\4\65\25\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\2\65\1\u0159\7\65\1\64\5\65"+
    "\1\64\4\65\24\64\42\0\2\u015a\27\0\1\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\12\65"+
    "\1\64\5\65\1\u015b\1\u015c\3\65\25\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\u015d\1\u015e\6\64\12\65\1\64"+
    "\5\65\1\64\4\65\24\64\11\0\1\147\20\0\1\u015f"+
    "\40\0\1\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\10\65\1\u0160\1\65\1\64\5\65\1\64"+
    "\4\65\24\64\24\0\1\u0161\46\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\2\65\1\u0162"+
    "\7\65\1\64\5\65\1\64\4\65\24\64\30\0\1\u0163"+
    "\53\0\1\147\16\0\1\u0163\42\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\6\65\1\u0164"+
    "\3\65\1\64\5\65\1\64\4\65\24\64\24\0\1\u0165"+
    "\46\0\1\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\2\65\1\u0166\7\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\6\65\1\u0167\3\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\6\65\1\u0168\3\65\1\64\5\65\1\64"+
    "\4\65\25\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\1\65\1\u0169\10\65\1\64\5\65\1\64"+
    "\4\65\24\64\24\0\1\u016a\46\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\2\65\1\u016b"+
    "\7\65\1\64\5\65\1\64\4\65\24\64\44\0\1\u016c"+
    "\26\0\1\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\12\65\1\64\5\65\1\64\1\65\1\u016d"+
    "\2\65\24\64\30\0\1\u016e\42\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\6\65\1\u016f"+
    "\3\65\1\64\5\65\1\64\4\65\24\64\25\0\1\u0170"+
    "\45\0\1\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\3\65\1\u0171\6\65\1\64\5\65\1\64"+
    "\4\65\24\64\45\0\1\u0172\25\0\1\64\1\65\1\64"+
    "\1\65\5\0\1\150\1\64\1\65\6\64\12\65\1\64"+
    "\5\65\1\64\2\65\1\u0173\1\65\24\64\12\0\2\u0174"+
    "\57\0\1\64\1\65\1\64\1\65\5\0\1\150\1\u0175"+
    "\1\u0176\6\64\12\65\1\64\5\65\1\64\4\65\24\64"+
    "\46\0\1\u0177\24\0\1\64\1\65\1\64\1\65\5\0"+
    "\1\150\1\64\1\65\6\64\12\65\1\64\5\65\1\64"+
    "\3\65\1\u0178\24\64\26\0\1\u0179\44\0\1\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\4\65"+
    "\1\u017a\5\65\1\64\5\65\1\64\4\65\24\64\25\0"+
    "\1\u017b\45\0\1\64\1\65\1\64\1\65\5\0\1\150"+
    "\1\64\1\65\6\64\3\65\1\u017c\6\65\1\64\5\65"+
    "\1\64\4\65\24\64\33\0\1\u017d\37\0\1\64\1\65"+
    "\1\64\1\65\5\0\1\150\1\64\1\65\6\64\11\65"+
    "\1\u017e\1\64\5\65\1\64\4\65\24\64\34\0\2\u017f"+
    "\35\0\1\64\1\65\1\64\1\65\5\0\1\150\1\64"+
    "\1\65\6\64\12\65\1\u0180\1\u0181\4\65\1\64\4\65"+
    "\24\64\30\0\1\u0182\53\0\1\147\16\0\1\u0182\42\0"+
    "\1\64\1\65\1\64\1\65\5\0\1\150\1\64\1\65"+
    "\6\64\6\65\1\u0183\3\65\1\64\5\65\1\64\4\65"+
    "\24\64\25\0\1\u0184\45\0\1\64\1\65\1\64\1\65"+
    "\5\0\1\150\1\64\1\65\6\64\3\65\1\u0185\6\65"+
    "\1\64\5\65\1\64\4\65\24\64";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17405];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\1\1\1\11\1\1\1\11\4\1"+
    "\1\11\10\1\1\0\5\1\1\0\5\1\2\11\6\1"+
    "\11\11\2\0\2\1\2\0\1\11\2\0\1\11\1\0"+
    "\14\1\2\0\2\1\1\0\6\1\1\0\7\1\11\11"+
    "\1\1\1\0\2\1\1\11\2\1\2\0\17\1\1\0"+
    "\3\1\3\0\1\1\1\0\2\1\1\0\5\1\1\0"+
    "\2\1\2\0\5\1\1\11\3\1\4\0\1\1\1\0"+
    "\7\1\1\0\5\1\1\11\3\1\4\0\4\1\1\0"+
    "\6\1\1\0\2\1\1\0\1\11\4\1\1\0\2\1"+
    "\1\0\2\11\5\1\1\0\3\1\1\0\5\1\1\0"+
    "\2\1\4\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\1\0\3\1\1\11"+
    "\1\1\1\0\4\1\1\0\1\1\1\0\6\1\1\0"+
    "\2\1\1\0\1\11\3\0\4\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\2\1\2\0"+
    "\3\1\1\0\1\1\1\11\5\1\1\0\2\1\3\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\2\0\1\1\1\0"+
    "\3\1\1\11\4\1\1\0\1\1\1\0\2\11\3\1"+
    "\1\11\4\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\4\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\1\11\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Codigo de usuario en sitaxis java por ejemplo una variable global
    StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoGraphik(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(symsG.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(symsG.numero, yycolumn, yyline, Integer.valueOf(yytext()) + "");
            }
          case 78: break;
          case 2: 
            { return new Symbol(symsG.punto, yycolumn, yyline, yytext().toLowerCase());
            }
          case 79: break;
          case 3: 
            { return new Symbol(symsG.iden, yycolumn, yyline, yytext().toLowerCase());
            }
          case 80: break;
          case 4: 
            { /* ignore */
            }
          case 81: break;
          case 5: 
            { ErroresGraphik.agregarError("Error Lexico", "El caracter [" + yytext() + "] no es valido", yyline, yycolumn);
            }
          case 82: break;
          case 6: 
            { return new Symbol(symsG.dividido, yycolumn, yyline, yytext().toLowerCase());
            }
          case 83: break;
          case 7: 
            { return new Symbol(symsG.mas, yycolumn, yyline, yytext().toLowerCase());
            }
          case 84: break;
          case 8: 
            { return new Symbol(symsG.menos, yycolumn, yyline, yytext().toLowerCase());
            }
          case 85: break;
          case 9: 
            { return new Symbol(symsG.por, yycolumn, yyline, yytext().toLowerCase());
            }
          case 86: break;
          case 10: 
            { return new Symbol(symsG.pot, yycolumn, yyline, yytext().toLowerCase());
            }
          case 87: break;
          case 11: 
            { return new Symbol(symsG.not, yycolumn, yyline, yytext().toLowerCase());
            }
          case 88: break;
          case 12: 
            { return new Symbol(symsG.menor, yycolumn, yyline, yytext().toLowerCase());
            }
          case 89: break;
          case 13: 
            { return new Symbol(symsG.igual, yycolumn, yyline, yytext().toLowerCase());
            }
          case 90: break;
          case 14: 
            { return new Symbol(symsG.mayor, yycolumn, yyline, yytext().toLowerCase());
            }
          case 91: break;
          case 15: 
            { return new Symbol(symsG.interroga, yycolumn, yyline, yytext().toLowerCase());
            }
          case 92: break;
          case 16: 
            { return new Symbol(symsG.dospuntos, yycolumn, yyline, yytext().toLowerCase());
            }
          case 93: break;
          case 17: 
            { return new Symbol(symsG.coma, yycolumn, yyline, yytext().toLowerCase());
            }
          case 94: break;
          case 18: 
            { return new Symbol(symsG.allave, yycolumn, yyline, yytext().toLowerCase());
            }
          case 95: break;
          case 19: 
            { return new Symbol(symsG.cllave, yycolumn, yyline, yytext().toLowerCase());
            }
          case 96: break;
          case 20: 
            { return new Symbol(symsG.acorchete, yycolumn, yyline, yytext().toLowerCase());
            }
          case 97: break;
          case 21: 
            { return new Symbol(symsG.ccorchete, yycolumn, yyline, yytext().toLowerCase());
            }
          case 98: break;
          case 22: 
            { return new Symbol(symsG.aparentesis, yycolumn, yyline, yytext().toLowerCase());
            }
          case 99: break;
          case 23: 
            { return new Symbol(symsG.cparentesis, yycolumn, yyline, yytext().toLowerCase());
            }
          case 100: break;
          case 24: 
            { return new Symbol(symsG.cad, yycolumn, yyline, yytext().replace("\"", ""));
            }
          case 101: break;
          case 25: 
            { System.out.println("Comentario liena");
            }
          case 102: break;
          case 26: 
            { return new Symbol(symsG.si, yycolumn, yyline, yytext().toLowerCase());
            }
          case 103: break;
          case 27: 
            { return new Symbol(symsG.masmas, yycolumn, yyline, yytext().toLowerCase());
            }
          case 104: break;
          case 28: 
            { return new Symbol(symsG.menosmenos, yycolumn, yyline, yytext().toLowerCase());
            }
          case 105: break;
          case 29: 
            { return new Symbol(symsG.or, yycolumn, yyline, yytext().toLowerCase());
            }
          case 106: break;
          case 30: 
            { return new Symbol(symsG.xor, yycolumn, yyline, yytext().toLowerCase());
            }
          case 107: break;
          case 31: 
            { return new Symbol(symsG.and, yycolumn, yyline, yytext().toLowerCase());
            }
          case 108: break;
          case 32: 
            { return new Symbol(symsG.diferente, yycolumn, yyline, yytext().toLowerCase());
            }
          case 109: break;
          case 33: 
            { return new Symbol(symsG.menorigual, yycolumn, yyline, yytext().toLowerCase());
            }
          case 110: break;
          case 34: 
            { return new Symbol(symsG.igualigual, yycolumn, yyline, yytext().toLowerCase());
            }
          case 111: break;
          case 35: 
            { return new Symbol(symsG.mayorigual, yycolumn, yyline, yytext().toLowerCase());
            }
          case 112: break;
          case 36: 
            { return new Symbol(symsG.dec, yycolumn, yyline, Double.valueOf(yytext()) + "");
            }
          case 113: break;
          case 37: 
            { return new Symbol(symsG.car, yycolumn, yyline, yytext().replace("'", ""));
            }
          case 114: break;
          case 38: 
            { return new Symbol(symsG.var, yycolumn, yyline, yytext().toLowerCase());
            }
          case 115: break;
          case 39: 
            { return new Symbol(symsG.als, yycolumn, yyline, yytext().toLowerCase());
            }
          case 116: break;
          case 40: 
            { return new Symbol(symsG.idengk, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 41: 
            { System.out.println("Comentario bloque");
            }
          case 118: break;
          case 42: 
            { return new Symbol(symsG.caso, yycolumn, yyline, yytext().toLowerCase());
            }
          case 119: break;
          case 43: 
            { return new Symbol(symsG.bool, yycolumn, yyline, yytext().toLowerCase());
            }
          case 120: break;
          case 44: 
            { return new Symbol(symsG.para, yycolumn, yyline, yytext().toLowerCase());
            }
          case 121: break;
          case 45: 
            { return new Symbol(symsG.sino, yycolumn, yyline, yytext().toLowerCase());
            }
          case 122: break;
          case 46: 
            { return new Symbol(symsG.vacio, yycolumn, yyline, yytext().toLowerCase());
            }
          case 123: break;
          case 47: 
            { return new Symbol(symsG.nuevo, yycolumn, yyline, yytext().toLowerCase());
            }
          case 124: break;
          case 48: 
            { return new Symbol(symsG.datos, yycolumn, yyline, yytext().toLowerCase());
            }
          case 125: break;
          case 49: 
            { return new Symbol(symsG.donde, yycolumn, yyline, yytext().toLowerCase());
            }
          case 126: break;
          case 50: 
            { return new Symbol(symsG.hacer, yycolumn, yyline, yytext().toLowerCase());
            }
          case 127: break;
          case 51: 
            { return new Symbol(symsG.falso, yycolumn, yyline, yytext().toLowerCase());
            }
          case 128: break;
          case 52: 
            { return new Symbol(symsG.entero, yycolumn, yyline, yytext().toLowerCase());
            }
          case 129: break;
          case 53: 
            { return new Symbol(symsG.cadena, yycolumn, yyline, yytext().toLowerCase());
            }
          case 130: break;
          case 54: 
            { return new Symbol(symsG.inicio, yycolumn, yyline, yytext().toLowerCase());
            }
          case 131: break;
          case 55: 
            { return new Symbol(symsG.llamar, yycolumn, yyline, yytext().toLowerCase());
            }
          case 132: break;
          case 56: 
            { return new Symbol(symsG.hereda, yycolumn, yyline, yytext().toLowerCase());
            }
          case 133: break;
          case 57: 
            { return new Symbol(symsG.decimal, yycolumn, yyline, yytext().toLowerCase());
            }
          case 134: break;
          case 58: 
            { return new Symbol(symsG.defecto, yycolumn, yyline, yytext().toLowerCase());
            }
          case 135: break;
          case 59: 
            { return new Symbol(symsG.columna, yycolumn, yyline, yytext().toLowerCase());
            }
          case 136: break;
          case 60: 
            { return new Symbol(symsG.privado, yycolumn, yyline, yytext().toLowerCase());
            }
          case 137: break;
          case 61: 
            { return new Symbol(symsG.publico, yycolumn, yyline, yytext().toLowerCase());
            }
          case 138: break;
          case 62: 
            { return new Symbol(symsG.retornar, yycolumn, yyline, yytext().toLowerCase());
            }
          case 139: break;
          case 63: 
            { return new Symbol(symsG.terminar, yycolumn, yyline, yytext().toLowerCase());
            }
          case 140: break;
          case 64: 
            { return new Symbol(symsG.caracter, yycolumn, yyline, yytext().toLowerCase());
            }
          case 141: break;
          case 65: 
            { return new Symbol(symsG.imprimir, yycolumn, yyline, yytext().toLowerCase());
            }
          case 142: break;
          case 66: 
            { return new Symbol(symsG.importar, yycolumn, yyline, yytext().toLowerCase());
            }
          case 143: break;
          case 67: 
            { return new Symbol(symsG.mientras, yycolumn, yyline, yytext().toLowerCase());
            }
          case 144: break;
          case 68: 
            { return new Symbol(symsG.llamarhk, yycolumn, yyline, yytext().toLowerCase());
            }
          case 145: break;
          case 69: 
            { return new Symbol(symsG.procesar, yycolumn, yyline, yytext().toLowerCase());
            }
          case 146: break;
          case 70: 
            { return new Symbol(symsG.verdadero, yycolumn, yyline, yytext().toLowerCase());
            }
          case 147: break;
          case 71: 
            { return new Symbol(symsG.dondetodo, yycolumn, yyline, yytext().toLowerCase());
            }
          case 148: break;
          case 72: 
            { return new Symbol(symsG.dondecada, yycolumn, yyline, yytext().toLowerCase());
            }
          case 149: break;
          case 73: 
            { return new Symbol(symsG.continuar, yycolumn, yyline, yytext().toLowerCase());
            }
          case 150: break;
          case 74: 
            { return new Symbol(symsG.protegido, yycolumn, yyline, yytext().toLowerCase());
            }
          case 151: break;
          case 75: 
            { return new Symbol(symsG.seleccion, yycolumn, yyline, yytext().toLowerCase());
            }
          case 152: break;
          case 76: 
            { return new Symbol(symsG.incluirhk, yycolumn, yyline, yytext().toLowerCase());
            }
          case 153: break;
          case 77: 
            { return new Symbol(symsG.graphikarfuncion, yycolumn, yyline, yytext().toLowerCase());
            }
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
