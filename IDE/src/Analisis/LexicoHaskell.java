/* The following code was generated by JFlex 1.6.1 */

//codigo de usuario
//paquetes e importaciones
package Analisis;
import java_cup.runtime.*;

//opciones y declaraciones

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analisis/LexicoHaskell.jflex</tt>
 */
public class LexicoHaskell implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 29,  9, 10,  9,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  3,  0,  0,  0,  0, 
     0, 11,  0,  4, 16, 15, 25, 22, 23, 18, 28,  0, 12, 17,  6,  5, 
    20, 26, 14,  7,  8, 13, 21,  0, 19, 27,  0,  0,  0,  0,  0, 24, 
     0, 11,  0,  4, 16, 15, 25, 22, 23, 18, 28,  0, 12, 17,  6,  5, 
    20, 26, 14,  7,  8, 13, 21,  0, 19, 27,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\2\0\1\3\26\0\1\4\37\0"+
    "\1\5\2\0\1\6\1\7\3\0\1\10\6\0\1\11"+
    "\1\12\1\13\2\0\1\14\2\0\1\15\1\16\1\17"+
    "\5\0\1\20\1\0\1\21\3\0\1\22\1\23\6\0"+
    "\1\24\1\25\5\0\1\26\5\0\1\27\12\0\1\30"+
    "\3\0\1\31\1\32\1\33\1\34\2\0\1\35\1\36"+
    "\1\37\2\0\1\40\2\0\1\41\1\0\1\42\1\43"+
    "\2\0\1\44\20\0\1\45\1\0\1\46\3\0\1\47"+
    "\5\0\1\50\1\0\1\51\1\0\1\52\6\0\1\53"+
    "\1\54\1\55\1\56\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\36\0\74\0\170\0\36"+
    "\0\226\0\264\0\322\0\360\0\u010e\0\u012c\0\u014a\0\u0168"+
    "\0\u0186\0\u01a4\0\u01c2\0\u01e0\0\u01fe\0\u021c\0\u023a\0\u0258"+
    "\0\u0276\0\u0294\0\u02b2\0\u02d0\0\u02ee\0\u030c\0\36\0\u032a"+
    "\0\u0348\0\u0366\0\u0384\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\u041a"+
    "\0\u0438\0\u0456\0\u0474\0\u0492\0\u04b0\0\u04ce\0\u04ec\0\u050a"+
    "\0\u0528\0\u0546\0\u0564\0\u0582\0\u05a0\0\u05be\0\u05dc\0\u05fa"+
    "\0\u0618\0\u0636\0\u0654\0\u0672\0\u0690\0\u06ae\0\36\0\u06cc"+
    "\0\u06ea\0\36\0\36\0\u0708\0\u0726\0\u0744\0\36\0\u0762"+
    "\0\u0780\0\u079e\0\u07bc\0\u07da\0\u07f8\0\36\0\u0816\0\36"+
    "\0\u0834\0\u0852\0\36\0\u0870\0\u088e\0\36\0\u08ac\0\36"+
    "\0\u08ca\0\u08e8\0\u0906\0\u0924\0\u0942\0\36\0\u0960\0\36"+
    "\0\u097e\0\u099c\0\u09ba\0\36\0\36\0\u09d8\0\u09f6\0\u0a14"+
    "\0\u0a32\0\u0a50\0\u0a6e\0\36\0\36\0\u0a8c\0\u0aaa\0\u0ac8"+
    "\0\u0ae6\0\u0b04\0\36\0\u0b22\0\u0b40\0\u0b5e\0\u0b7c\0\u0b9a"+
    "\0\36\0\u0bb8\0\u0bd6\0\u0bf4\0\u0c12\0\u0c30\0\u0c4e\0\u0c6c"+
    "\0\u0c8a\0\u0ca8\0\u0cc6\0\36\0\u0ce4\0\u0d02\0\u0d20\0\u0d3e"+
    "\0\36\0\u0d5c\0\u0d7a\0\u0d98\0\u0db6\0\36\0\36\0\36"+
    "\0\u0dd4\0\u0df2\0\36\0\u0e10\0\u0e2e\0\36\0\u0e4c\0\36"+
    "\0\36\0\u0e6a\0\u0e88\0\36\0\u0ea6\0\u0ec4\0\u0ee2\0\u0f00"+
    "\0\u0f1e\0\u0f3c\0\u0f5a\0\u0f78\0\u0f96\0\u0fb4\0\u0fd2\0\u0ff0"+
    "\0\u100e\0\u102c\0\u104a\0\u1068\0\36\0\u1086\0\36\0\u10a4"+
    "\0\u10c2\0\u10e0\0\36\0\u10fe\0\u111c\0\u113a\0\u1158\0\u1176"+
    "\0\36\0\u1194\0\36\0\u11b2\0\36\0\u11d0\0\u11ee\0\u120c"+
    "\0\u122a\0\u1248\0\u1266\0\36\0\36\0\36\0\36\0\36"+
    "\0\36";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\2\1\4\4\2\1\5\1\0\22\2"+
    "\1\5\37\0\1\6\1\7\1\10\37\0\1\11\31\0"+
    "\1\12\42\0\1\13\30\0\1\12\1\0\1\10\41\0"+
    "\1\14\36\0\1\15\25\0\11\16\2\0\23\16\4\0"+
    "\1\17\1\20\1\0\1\21\3\0\1\22\1\23\1\0"+
    "\1\24\1\0\1\25\1\26\1\27\1\0\1\30\3\0"+
    "\1\31\11\0\1\32\1\33\5\0\1\34\1\35\7\0"+
    "\1\36\27\0\1\37\34\0\1\40\14\0\1\41\7\0"+
    "\1\42\1\0\1\43\1\44\4\0\1\45\7\0\1\46"+
    "\30\0\1\47\35\0\1\50\23\0\1\51\11\0\1\52"+
    "\2\0\1\53\20\0\1\54\5\0\1\55\3\0\1\56"+
    "\2\0\1\57\34\0\1\60\4\0\1\61\14\0\1\62"+
    "\5\0\1\63\2\0\1\64\23\0\1\65\3\0\1\66"+
    "\6\0\1\67\2\0\1\70\20\0\1\71\51\0\1\72"+
    "\30\0\1\73\35\0\1\74\34\0\1\75\26\0\1\76"+
    "\14\0\1\77\32\0\1\100\24\0\1\101\50\0\1\102"+
    "\21\0\1\103\45\0\1\104\34\0\1\105\30\0\1\106"+
    "\1\0\1\107\52\0\1\110\24\0\1\111\25\0\1\112"+
    "\2\0\1\113\53\0\1\114\3\0\1\115\24\0\1\116"+
    "\24\0\1\117\13\0\1\120\7\0\1\121\10\0\1\122"+
    "\35\0\1\123\53\0\1\124\26\0\1\125\30\0\1\126"+
    "\5\0\1\127\35\0\1\130\24\0\1\131\43\0\1\132"+
    "\51\0\1\133\14\0\1\134\5\0\1\135\52\0\1\136"+
    "\22\0\1\137\32\0\1\140\26\0\1\141\44\0\1\142"+
    "\40\0\1\143\23\0\1\144\41\0\1\145\43\0\1\146"+
    "\32\0\1\147\40\0\1\150\45\0\1\151\26\0\1\152"+
    "\31\0\1\153\26\0\1\154\35\0\1\155\53\0\1\156"+
    "\32\0\1\157\37\0\1\160\21\0\1\161\35\0\1\162"+
    "\46\0\1\163\32\0\1\164\26\0\1\165\51\0\1\166"+
    "\24\0\1\167\45\0\1\170\36\0\1\171\24\0\1\172"+
    "\32\0\1\173\46\0\1\174\45\0\1\175\27\0\1\176"+
    "\22\0\1\177\56\0\1\200\27\0\1\201\26\0\1\202"+
    "\43\0\1\203\35\0\1\204\37\0\1\205\33\0\1\206"+
    "\32\0\1\207\40\0\1\210\26\0\1\211\6\0\1\212"+
    "\33\0\1\213\40\0\1\214\33\0\1\215\37\0\1\216"+
    "\24\0\1\217\46\0\1\220\45\0\1\221\22\0\1\222"+
    "\40\0\1\223\24\0\1\224\56\0\1\225\25\0\1\226"+
    "\24\0\1\227\56\0\1\230\15\0\1\231\50\0\1\232"+
    "\32\0\1\233\25\0\1\234\50\0\1\235\35\0\1\236"+
    "\35\0\1\237\21\0\1\240\33\0\1\241\50\0\1\242"+
    "\31\0\1\243\32\0\1\244\44\0\1\245\26\0\1\246"+
    "\45\0\1\247\23\0\1\250\55\0\1\251\35\0\1\252"+
    "\35\0\1\253\17\0\1\254\35\0\1\255\35\0\1\256"+
    "\43\0\1\257\36\0\1\260\26\0\1\261\44\0\1\262"+
    "\23\0\1\263\40\0\1\264\42\0\1\265\35\0\1\266"+
    "\35\0\1\267\33\0\1\270\41\0\1\271\25\0\1\272"+
    "\45\0\1\273\25\0\1\274\45\0\1\275\31\0\1\276"+
    "\35\0\1\277\35\0\1\300\56\0\1\301\23\0\1\302"+
    "\35\0\1\303\27\0\1\304\35\0\1\305\35\0\1\306"+
    "\40\0\1\307\25\0\1\310\35\0\1\311\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4740];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\2\0\1\11\26\0\1\11"+
    "\37\0\1\11\2\0\2\11\3\0\1\11\6\0\1\11"+
    "\1\1\1\11\2\0\1\11\2\0\1\11\1\1\1\11"+
    "\5\0\1\11\1\0\1\11\3\0\2\11\6\0\2\11"+
    "\5\0\1\11\5\0\1\11\12\0\1\11\3\0\1\1"+
    "\1\11\2\1\2\0\3\11\2\0\1\11\2\0\1\11"+
    "\1\0\2\11\2\0\1\11\20\0\1\11\1\0\1\11"+
    "\3\0\1\11\5\0\1\11\1\0\1\11\1\0\1\11"+
    "\6\0\6\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Codigo de usuario en sitaxis java por ejemplo una variable global
    public static String x;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoHaskell(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(SimbolosHaskell.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { ErroresHaskell.agregarError("Error Lexico", "El caracter [" + yytext() + "] no es valido", yyline, yycolumn);
            }
          case 49: break;
          case 2: 
            { /*Espacios en blanco, son ignorados*/
            }
          case 50: break;
          case 3: 
            { return new Symbol(SimbolosHaskell.numero, yycolumn, yyline, yytext());
            }
          case 51: break;
          case 4: 
            { return new Symbol(SimbolosHaskell.or, yycolumn, yyline, yytext());
            }
          case 52: break;
          case 5: 
            { return new Symbol(SimbolosHaskell.sum, yycolumn, yyline, yytext());
            }
          case 53: break;
          case 6: 
            { return new Symbol(SimbolosHaskell.and, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 7: 
            { return new Symbol(SimbolosHaskell.asc, yycolumn, yyline, yytext());
            }
          case 55: break;
          case 8: 
            { return new Symbol(SimbolosHaskell.let, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 9: 
            { return new Symbol(SimbolosHaskell.mod, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 10: 
            { return new Symbol(SimbolosHaskell.mas, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 11: 
            { return new Symbol(SimbolosHaskell.max, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 12: 
            { return new Symbol(SimbolosHaskell.min, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 13: 
            { return new Symbol(SimbolosHaskell.pot, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 14: 
            { return new Symbol(SimbolosHaskell.por, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 15: 
            { return new Symbol(SimbolosHaskell.par, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 16: 
            { return new Symbol(SimbolosHaskell._if, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 17: 
            { return new Symbol(SimbolosHaskell.coma, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 18: 
            { return new Symbol(SimbolosHaskell.succ, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 19: 
            { return new Symbol(SimbolosHaskell.sqrt, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 20: 
            { return new Symbol(SimbolosHaskell.decc, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 21: 
            { return new Symbol(SimbolosHaskell.desc, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 22: 
            { return new Symbol(SimbolosHaskell.impr, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 23: 
            { return new Symbol(SimbolosHaskell._end, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 24: 
            { return new Symbol(SimbolosHaskell.dolar, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 25: 
            { return new Symbol(SimbolosHaskell.mayor, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 26: 
            { return new Symbol(SimbolosHaskell.menos, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 27: 
            { return new Symbol(SimbolosHaskell.menor, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 28: 
            { return new Symbol(SimbolosHaskell.igual, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 29: 
            { return new Symbol(SimbolosHaskell._case, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 30: 
            { return new Symbol(SimbolosHaskell._then, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 31: 
            { return new Symbol(SimbolosHaskell._else, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 32: 
            { return new Symbol(SimbolosHaskell.cllave, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 33: 
            { return new Symbol(SimbolosHaskell.allave, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 34: 
            { return new Symbol(SimbolosHaskell.length, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 35: 
            { return new Symbol(SimbolosHaskell.revers, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 36: 
            { return new Symbol(SimbolosHaskell.masmas, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 37: 
            { return new Symbol(SimbolosHaskell.product, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 38: 
            { return new Symbol(SimbolosHaskell.calcular, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 39: 
            { return new Symbol(SimbolosHaskell.dividido, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 40: 
            { return new Symbol(SimbolosHaskell.ccorchete, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 41: 
            { return new Symbol(SimbolosHaskell.acorchete, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 42: 
            { return new Symbol(SimbolosHaskell.diferente, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 43: 
            { return new Symbol(SimbolosHaskell.mayorigual, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 44: 
            { return new Symbol(SimbolosHaskell.menorigual, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 45: 
            { return new Symbol(SimbolosHaskell.igualigual, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 46: 
            { return new Symbol(SimbolosHaskell.porcentaje, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 47: 
            { return new Symbol(SimbolosHaskell.cparentesis, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 48: 
            { return new Symbol(SimbolosHaskell.aparentesis, yycolumn, yyline, yytext());
            }
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
