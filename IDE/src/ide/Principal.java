/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ide;

import Analisis.graphik.*;
import Analisis.terminal.*;
import Analisis.haskell.*;
import Reportes.Arbol;
import Reportes.ErroresGraphik;
import Reportes.ErroresHaskell;
import static Reportes.ErroresHaskell.getHTML;
import com.csvreader.CsvReader;
import com.sun.glass.events.KeyEvent;
import fabrica.*;
import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import javax.swing.text.Highlighter;
import javax.swing.text.Style;
import semanticos.EjecutarArbol;
import semanticos.Objeto;
import semanticos.Pila;
import semanticos.Semantico;
import semanticos.haskell.Haskell;
import semanticos.terminal.EjecutarTerm;
import semanticos.terminal.PilaHaskell;

/**
 *
 * @author Adrian
 */
public class Principal extends javax.swing.JFrame {

    public static String consola = "";
    public static LinkedList<Fila> datos = new LinkedList<>();
    public static LinkedList<Fila> procesar = new LinkedList<>();
    public static int fila = 0;
    public static int colFiltro = 0;
    public static int tipoDonde = 3;//donde todo por defecto
    public static String filtro = "";
    public static String ruta = "";
//    public static JPanel panel = new JPanel();
    public Principal() {
        initComponents();
        PilaHaskell.crearAmbito();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        taConsola = new javax.swing.JTextArea();
        tfEntradaConsola = new javax.swing.JTextField();
        bEjecutar = new javax.swing.JButton();
        bCargar = new javax.swing.JButton();
        bCsv = new javax.swing.JButton();
        bNuevo = new javax.swing.JButton();
        bAbrir = new javax.swing.JButton();
        bGuardar = new javax.swing.JButton();
        bGuardarComo = new javax.swing.JButton();
        bEliminar = new javax.swing.JButton();
        tpArchivos = new javax.swing.JTabbedPane();
        bNuevo1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        taConsola.setBackground(new java.awt.Color(0, 0, 0));
        taConsola.setColumns(20);
        taConsola.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        taConsola.setForeground(new java.awt.Color(255, 153, 0));
        taConsola.setRows(5);
        jScrollPane1.setViewportView(taConsola);

        tfEntradaConsola.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfEntradaConsola.setName(""); // NOI18N
        tfEntradaConsola.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfEntradaConsolaKeyPressed(evt);
            }
        });

        bEjecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/play.png"))); // NOI18N
        bEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEjecutarActionPerformed(evt);
            }
        });

        bCargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cargar.png"))); // NOI18N
        bCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCargarActionPerformed(evt);
            }
        });

        bCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/csv.png"))); // NOI18N
        bCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCsvActionPerformed(evt);
            }
        });

        bNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/nuevoGK.png"))); // NOI18N
        bNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNuevoActionPerformed(evt);
            }
        });

        bAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/abrir.png"))); // NOI18N
        bAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAbrirActionPerformed(evt);
            }
        });

        bGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/guardar.png"))); // NOI18N
        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarActionPerformed(evt);
            }
        });

        bGuardarComo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/guardar_como.png"))); // NOI18N
        bGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarComoActionPerformed(evt);
            }
        });

        bEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar.png"))); // NOI18N
        bEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarActionPerformed(evt);
            }
        });

        tpArchivos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tpArchivosStateChanged(evt);
            }
        });

        bNuevo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/nuevoHK.png"))); // NOI18N
        bNuevo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNuevo1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tpArchivos)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfEntradaConsola, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(bEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bCsv, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bNuevo1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bGuardarComo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bCsv, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bGuardarComo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bNuevo1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tpArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfEntradaConsola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1534, 941));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tfEntradaConsolaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfEntradaConsolaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            taConsola.append(">" + tfEntradaConsola.getText() + "\n");
            String texto = tfEntradaConsola.getText();
            LexicoHaskellTerminal lhaskell = new LexicoHaskellTerminal(new BufferedReader(new StringReader(texto)));
            SintacticoHaskellTerminal shaskell = new SintacticoHaskellTerminal(lhaskell);
            Nodo raiz = new Nodo();
            try {
                shaskell.parse();
                raiz = shaskell.raiz;
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
            tfEntradaConsola.setText("");
            if(raiz != null)
            {
                Arbol.getGrafo(raiz);
                Arbol.dibujar();
                if(ErroresHaskell.contErrores > 0)
                {
                    ErroresHaskell.generarErrores();
                    JOptionPane.showMessageDialog(this,"Errores Lexicos o Sintacticos");
                }
                else
                {
                    EjecutarTerm.ejecutar(raiz);
                    if(EjecutarTerm.porcentaje.lvalores != null && EjecutarTerm.porcentaje.lvalores.size() > 0)
                    {
                        String text = "[";
                        for(Objeto obj : EjecutarTerm.porcentaje.lvalores)
                        {
                            if(obj.lvalores == null || obj.lvalores.size() == 0)
                                //solo posee una dimension
                                text += obj.valor;
                            else {
                                //tiene 2 dimensiones
                                text += "[";
                                for(Objeto val : obj.lvalores)
                                    text += val.valor + ", ";
                                text = text.substring(0, text.length() - 2);
                                text += "]";
                            }
                            text += ", ";
                        }
                        if(text.length() > 3)
                            text = text.substring(0, text.length() - 2);
                        text += "]";
                        taConsola.append(">" + text + "\n");
                    }
                    else
                        taConsola.append(">" + EjecutarTerm.porcentaje.valor + "[" + Semantico.getTipo(EjecutarTerm.porcentaje.tipo) + "]\n");
                    System.out.println(PilaHaskell.recorrerPila());
                }
                if(ErroresHaskell.contErrores > 0)
                {
                    ErroresHaskell.generarErrores();
                    JOptionPane.showMessageDialog(this,"Errores semanticos");
                }
            }
            else
                System.out.println("La raiz de haskel terminal es nula");
        }
    }//GEN-LAST:event_tfEntradaConsolaKeyPressed

    private void bCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCargarActionPerformed
        if(tpArchivos.getTitleAt(tpArchivos.getSelectedIndex()).endsWith(".hk"))
        {
            JScrollPane sp = (JScrollPane) tpArchivos.getSelectedComponent().getComponentAt(0,0);
            JTextArea ta = (JTextArea) sp.getViewport().getView();
            String texto = ta.getText();
            LexicoHaskell lhaskell = new LexicoHaskell(new BufferedReader(new StringReader(texto)));
            SintacticoHaskell shaskell = new SintacticoHaskell(lhaskell);
            Nodo raiz = new Nodo();
            try {
                shaskell.parse();
                raiz = shaskell.raiz;
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
            if(ErroresHaskell.contErrores > 0)
                ErroresHaskell.generarErrores();
            else
            if(raiz != null)
            {
                Haskell.arbol.hijos.addAll(raiz.hijos);
                Arbol.getGrafo(Haskell.arbol);
                Arbol.dibujar();
                String x = "Se cargo a memoria: \n";
                for(Nodo n : raiz.hijos)
                    x += "\t-" + n.valor + "-\n";
                taConsola.setText(taConsola.getText() + x + "\n");
                //Semantico.ejecutarValor(raiz);
                if(ErroresHaskell.contErrores > 0)
                    ErroresHaskell.generarErrores();
            }
            else
                System.out.println("La raiz de haskel terminal es nula");
        }
    }//GEN-LAST:event_bCargarActionPerformed

    private void bEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEjecutarActionPerformed
        if(tpArchivos.getTitleAt(tpArchivos.getSelectedIndex()).endsWith(".gk"))
        {
            JScrollPane sp = (JScrollPane) tpArchivos.getSelectedComponent().getComponentAt(0,0);
            JTextArea ta = (JTextArea) sp.getViewport().getView();
            String texto = ta.getText();
            LexicoGraphik lgraphik = new LexicoGraphik(new BufferedReader(new StringReader(texto)));
            SintacticoGraphik sgraphik = new SintacticoGraphik(lgraphik);
            Nodo raiz = new Nodo();
            try {
                sgraphik.parse();
                raiz = sgraphik.raiz;
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
            if(raiz != null)
            {
                consola = "";
                if(ErroresGraphik.contErrores > 0)
                {
                    ErroresGraphik.generarErrores();
                    JOptionPane.showMessageDialog(this,"Errores Lexicos o Sintacticos");
                }
                else
                    EjecutarArbol.ejecutar(raiz);
                if(ErroresGraphik.contErrores > 0)
                {
                    ErroresGraphik.generarErrores();
                    JOptionPane.showMessageDialog(this,"Errores semanticos");
                }
                taConsola.setText("");
                taConsola.setText(consola);
                //taConsola.setText(taConsola.getText() + Pila.recorrerPila());
                System.out.println(Pila.recorrerPila());
            }
            else
                System.out.println("La raiz de graphik terminal es nula");
            colores();
        }
    }//GEN-LAST:event_bEjecutarActionPerformed

    private void bCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCsvActionPerformed
        try {
            datos.clear();
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File("C:\\Users\\AdrianFernando\\Desktop"));
            FileFilter filtro = new FileNameExtensionFilter("Archivos","csv");
            fileChooser.setFileFilter(filtro);
            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
            {
                CsvReader archivo = new CsvReader(fileChooser.getSelectedFile().getAbsolutePath());
                archivo.readHeaders();

                while (archivo.readRecord())
                {
                    Fila fila = new Fila();
                    for(String val : archivo.getValues())
                    {
                        val = val.replace("\"", "");
                        val = val.replace("{", "");
                        val = val.replace("}", "");
                        Objeto obj = new Objeto();
                        obj.valor = val;
                        try {
                            Integer.valueOf(val);
                            obj.tipo = Const.tnumero;
                        } catch (Exception e1) {
                            try {
                                Double.valueOf(val);
                                obj.tipo = Const.tdecimal;
                            } catch (Exception e2) {
                                obj.tipo = Const.tcadena;
                            }
                        }
                        fila.datos.add(obj);
                    }
                    System.out.println(archivo.get(0) + " - " + archivo.get(1));
                    datos.add(fila);
                }
            }
         
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
        
    }//GEN-LAST:event_bCsvActionPerformed

    private void bNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNuevoActionPerformed
        JTextArea ta = new JTextArea();
        ta.setFont(new Font("Tahoma", 0, 18));
        JScrollPane sp = new JScrollPane(ta);
        tpArchivos.addTab("Nuevo.gk", sp);
        tpArchivos.setSelectedIndex(tpArchivos.getTabCount() - 1);
    }//GEN-LAST:event_bNuevoActionPerformed

    private void bNuevo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNuevo1ActionPerformed
        JTextArea ta = new JTextArea();
        ta.setFont(new Font("Tahoma", 0, 18));
        JScrollPane sp = new JScrollPane(ta);
        tpArchivos.addTab("Nuevo.gh", sp);
        tpArchivos.setSelectedIndex(tpArchivos.getTabCount() - 1);
    }//GEN-LAST:event_bNuevo1ActionPerformed

    private void bAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAbrirActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("C:\\Users\\AdrianFernando\\Desktop"));
        FileFilter filtro = new FileNameExtensionFilter("Archivos","hk","gk");
        fileChooser.setFileFilter(filtro);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            ruta = fileChooser.getSelectedFile().getParent();
            
            JTextArea ta = new JTextArea();
            ta.setFont(new Font("Tahoma", 0, 18));
            JScrollPane sp = new JScrollPane(ta);
            tpArchivos.addTab(fileChooser.getSelectedFile().getName(), sp);
            tpArchivos.setSelectedIndex(tpArchivos.getTabCount() - 1);
            File file = new File(fileChooser.getSelectedFile().getAbsolutePath());
            BufferedReader br = null;
            try{
                br =new BufferedReader(new FileReader(fileChooser.getSelectedFile().getAbsolutePath()));
                String linea = br.readLine();
                while (null!=linea) {
                   ta.append(linea + "\n");
                   linea = br.readLine();
                }
                br.close();
            }
            catch (Exception e)
            {
                System.err.println("Error! "+e.getMessage());
            }
        }
    }//GEN-LAST:event_bAbrirActionPerformed

    private void tpArchivosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tpArchivosStateChanged
        
    }//GEN-LAST:event_tpArchivosStateChanged

    private void bEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarActionPerformed
        if (tpArchivos.getSelectedIndex() >= 0) {
            tpArchivos.remove(tpArchivos.getSelectedIndex());
        }
    }//GEN-LAST:event_bEliminarActionPerformed

    private void bGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarActionPerformed
        String archivo = ruta + "\\" + tpArchivos.getTitleAt(tpArchivos.getSelectedIndex());
        try
        {
            JScrollPane sp = (JScrollPane) tpArchivos.getSelectedComponent().getComponentAt(0,0);
            JTextArea texto = (JTextArea) sp.getViewport().getView();
            FileWriter fw = new FileWriter(archivo);
            PrintWriter pw = new PrintWriter(fw);
            pw.print(texto.getText());
            fw.close();
            taConsola.append("Se ha guardado: " + archivo + "\n");
        } catch (Exception e) {
            e.printStackTrace(); 
        }
    }//GEN-LAST:event_bGuardarActionPerformed

    private void bGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarComoActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("C:\\Users\\AdrianFernando\\Desktop"));
        FileFilter filtro = new FileNameExtensionFilter("Archivos","hk","gk");
        fileChooser.setFileFilter(filtro);
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            String archivo = fileChooser.getSelectedFile().getPath();
            try
            {
                JScrollPane sp = (JScrollPane) tpArchivos.getSelectedComponent().getComponentAt(0,0);
                JTextArea texto = (JTextArea) sp.getViewport().getView();
                FileWriter fw = new FileWriter(fileChooser.getSelectedFile().getPath());
                PrintWriter pw = new PrintWriter(fw);
                pw.print(texto.getText());
                fw.close();
                ruta = fileChooser.getSelectedFile().getParent();
                taConsola.append("Se ha guardado como: " + archivo + "\n");
            } catch (Exception e) {
                e.printStackTrace(); 
            }
        }
    }//GEN-LAST:event_bGuardarComoActionPerformed

    
    private void colores()
    {
        JScrollPane sp = (JScrollPane) tpArchivos.getSelectedComponent().getComponentAt(0,0);
        JTextArea texto = (JTextArea) sp.getViewport().getView();
        try {
            pintarPalabra(texto,"[#][/](.|\n)*[/][#]",Color.GRAY);//comentario multi linea
            pintarPalabra(texto,"[#](.)*[\n]",Color.GRAY);//comentario una linea
            pintarPalabra(texto,"([\"](.)*[\"])|(['](.)*['])",Color.green);
            pintarPalabra(texto,"(?i)(entero|decimal|cadena|vacio|caracter|bool"
                    + "|publico|privado|protegido|var|mientras|hacer|para|selecciona"
                    + "|retornar|llamar|llamarHK|als|hereda|nuevo|inicio|importar|incluir"
                    + "|sino|caso|defecto|columna|continuar|terminar|graphikar_funcion|datos"
                    + "|procesar|donde|dondecada|dondetodo|imprimir|falso|verdadero)",new Color(51, 153, 255));//palabras reservadas
            pintarPalabra(texto,"\\w",Color.ORANGE);//identificador
            
            
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    private void pintarPalabra(JTextArea ta, String texto, Color color) throws BadLocationException {
        if (texto.length() >= 1) {
            DefaultHighlightPainter highlightPainter = new DefaultHighlightPainter(color);
            Highlighter h = ta.getHighlighter();
            //h.removeAllHighlights();
            String cadena = ta.getText();
            String caracteres = texto;
            Pattern p = Pattern.compile(caracteres);
            Matcher m = p.matcher(cadena);
            while (m.find()) {
                h.addHighlight(m.start(), m.end(), highlightPainter);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAbrir;
    private javax.swing.JButton bCargar;
    private javax.swing.JButton bCsv;
    private javax.swing.JButton bEjecutar;
    private javax.swing.JButton bEliminar;
    private javax.swing.JButton bGuardar;
    private javax.swing.JButton bGuardarComo;
    private javax.swing.JButton bNuevo;
    private javax.swing.JButton bNuevo1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea taConsola;
    private javax.swing.JTextField tfEntradaConsola;
    private javax.swing.JTabbedPane tpArchivos;
    // End of variables declaration//GEN-END:variables
}
