/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ide;

import Analisis.graphik.*;
import Analisis.terminal.*;
import Analisis.haskell.*;
import Reportes.Arbol;
import Reportes.ErroresGraphik;
import Reportes.ErroresHaskell;
import com.sun.glass.events.KeyEvent;
import fabrica.*;
import java.io.BufferedReader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import semanticos.EjecutarArbol;
import semanticos.Objeto;
import semanticos.Pila;
import semanticos.Semantico;
import semanticos.haskell.Haskell;
import semanticos.terminal.EjecutarTerm;
import semanticos.terminal.PilaHaskell;

/**
 *
 * @author Adrian
 */
public class Principal extends javax.swing.JFrame {

    public static String consola = "";
    
    public Principal() {
        initComponents();
        PilaHaskell.crearAmbito();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        taConsola = new javax.swing.JTextArea();
        tfEntradaConsola = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        taEntrada = new javax.swing.JTextArea();
        bEjecutar = new javax.swing.JButton();
        bCargar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        taConsola.setBackground(new java.awt.Color(0, 0, 0));
        taConsola.setColumns(20);
        taConsola.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        taConsola.setForeground(new java.awt.Color(255, 153, 0));
        taConsola.setRows(5);
        jScrollPane1.setViewportView(taConsola);

        tfEntradaConsola.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfEntradaConsola.setName(""); // NOI18N
        tfEntradaConsola.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfEntradaConsolaKeyPressed(evt);
            }
        });

        taEntrada.setColumns(20);
        taEntrada.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        taEntrada.setRows(5);
        taEntrada.setText("funcionPrueba =\n\t$succ $calcular 5$$\n\tend\n\nIncrementaSegunN n,Val = \n\tif n<=$Calcular 1$ then\n\t\t$Succ $calcular val$$\n\telse\n\t\t$Succ $IncrementaSegunN {$Calcular n-1 $,Val}$$\n\tend\nend\n\nConjuntoFuncPolinomial i,x = CASE i\n\t\t1: $Polinomial1 {x}$;\n\t\t2: $Polinomial2 {x}$;\n\t\t3: $Polinomial3 {x}$;\n\t\t4: $Polinomial4 {x}$;\n\tend\nend\nPolinomial1 x = $Calcular 3 * x'pot'5 - x 'pot'2 + 7 * x -1$ \n\t\t\t\tend\nPolinomial2 x = $Calcular 5 * x'pot'2 - x + 8 * x 'pot'(-1) -1$ \n\t\t\t\tend\nPolinomial3 x = $Calcular x'pot'4 + x 'pot'2 + (9*3) * x +80$ \n\t\t\t\tend\nPolinomial4 x = $Calcular x'pot'3 + x 'pot'2 - 4 * x -4 $ \n\t\t\t\tend\nObtenerModa LIST = $Max LIST$ \n\t\t\t\t   end\nObtenerPromedio LIST = \t$Calcular $sum LIST$ / $length LIST$ $\n\t\t\t\t\t    end\nFactorial n = \n    If n==$Calcular 0$ Then\n        $Calcular 1$\n    Else    \n        $Calcular n * $Factorial{$Calcular n-1$}$$\n  \tEnd\nEnd\nFibonacci n =\n    If n==$Calcular 0$ || n==$Calcular 1$ Then\n        $Calcular 1$\n    Else\n        $Calcular $Fibonacci{$Calcular n-1$}$ + $Fibonacci {$Calcular n-2$}$$\n    End\nEnd\nOperacion a,b, condicion =\n\tCASE condicion\n\t\t1: $Calcular a+b$;\n\t\t2: $Calcular a-b$;\n\t\t3: $Calcular a*b$;\n\t\t4: If b != $calcular 0$ Then\n\t\t\t\t$Calcular a/b$\n\t\t   else\n\t\t   \t\t$calcular 0$\t\n\t\t   End;\n\t\t5: If b != $calcular 0$ Then\n\t\t\t\t$Calcular a'mod'b$\n\t\t\telse\n\t\t\t\t$calcular 0$\n\t\t\tEnd;\n\t\t6: $Calcular a'sqrt'b$;\n\t\t7: $Calcular a'pot'b$;\n\tEnd\nEnd \nSaludo n, nombre =\n\t$Let hola = ['h','o','l','a',' ']$\n\t$Let adios = ['a','d','i','o','s',' ']$\n\tCase n\n\t\t'a': hola ++ nombre;\n\t\t'b': adios ++ nombre;\n\t\t'c': hola++['u','s','e','r',' ']++nombre ++ [' '] ++ adios;\n\tEnd\nEnd\nOperarLista lista, op = \n\tCASE op\n\t\t1: $sum lista$;\n\t\t2: $product lista$;\n\t\t3: $Length lista$;\n\t\t4: $min lista$;\n\t\t5: $max lista$;\n\t\t6: $succ $lista !! $calcular 1$$$;\n\t\t7: $decc $lista !! $calcular 1$$$;\n\tEnd\nEnd\nOperarCadena cadena, op =\n\tif op == $calcular 1$ then\n\t\t$revers cadena$\n\telse\n\t\tif op == $calcular 2$ then\n\t\t\t$impr cadena$\n\t\telse\n\t\t\tif op == $calcular 3$ then\n\t\t\t\t$par cadena$\n\t\t\telse\n\t\t\t\tif op == $calcular 4$ then\n\t\t\t\t\t$asc cadena$\n\t\t\t\telse\n\t\t\t\t\tif op == $calcular 5$ then\n\t\t\t\t\t\t$desc cadena$\n\t\t\t\t\telse\n\t\t\t\t\t\t$let vacio = cadena$\n\t\t\t\t\tEnd\n\t\t\t\tEnd\n\t\t\tEnd\n\t\tEnd\n\tEnd\nEnd");
        jScrollPane2.setViewportView(taEntrada);

        bEjecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/play.png"))); // NOI18N
        bEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEjecutarActionPerformed(evt);
            }
        });

        bCargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cargar.png"))); // NOI18N
        bCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCargarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1492, Short.MAX_VALUE)
                    .addComponent(tfEntradaConsola)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfEntradaConsola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1534, 903));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tfEntradaConsolaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfEntradaConsolaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            taConsola.append(">" + tfEntradaConsola.getText() + "\n");
            String texto = tfEntradaConsola.getText();
            LexicoHaskellTerminal lhaskell = new LexicoHaskellTerminal(new BufferedReader(new StringReader(texto)));
            SintacticoHaskellTerminal shaskell = new SintacticoHaskellTerminal(lhaskell);
            Nodo raiz = new Nodo();
            try {
                shaskell.parse();
                raiz = shaskell.raiz;
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
            tfEntradaConsola.setText("");
            if(raiz != null)
            {
                Arbol.getGrafo(raiz);
                Arbol.dibujar();
                if(ErroresHaskell.contErrores > 0)
                {
                    ErroresHaskell.generarErrores();
                    JOptionPane.showMessageDialog(this,"Errores Lexicos o Sintacticos");
                }
                else
                {
                    EjecutarTerm.ejecutar(raiz);
                    if(EjecutarTerm.porcentaje.lvalores != null && EjecutarTerm.porcentaje.lvalores.size() > 0)
                    {
                        String text = "[";
                        for(Objeto obj : EjecutarTerm.porcentaje.lvalores)
                        {
                            if(obj.lvalores == null || obj.lvalores.size() == 0)
                                //solo posee una dimension
                                text += obj.valor;
                            else {
                                //tiene 2 dimensiones
                                text += "[";
                                for(Objeto val : obj.lvalores)
                                    text += val.valor + ", ";
                                text = text.substring(0, text.length() - 2);
                                text += "]";
                            }
                            text += ", ";
                        }
                        if(text.length() > 3)
                            text = text.substring(0, text.length() - 2);
                        text += "]";
                        taConsola.append(">" + text + "\n");
                    }
                    else
                        taConsola.append(">" + EjecutarTerm.porcentaje.valor + "[" + Semantico.getTipo(EjecutarTerm.porcentaje.tipo) + "]\n");
                    System.out.println(PilaHaskell.recorrerPila());
                }
                if(ErroresHaskell.contErrores > 0)
                {
                    ErroresHaskell.generarErrores();
                    JOptionPane.showMessageDialog(this,"Errores semanticos");
                }
            }
            else
                System.out.println("La raiz de haskel terminal es nula");
        }
    }//GEN-LAST:event_tfEntradaConsolaKeyPressed

    private void bCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCargarActionPerformed
        String texto = taEntrada.getText();
        LexicoHaskell lhaskell = new LexicoHaskell(new BufferedReader(new StringReader(texto)));
        SintacticoHaskell shaskell = new SintacticoHaskell(lhaskell);
        Nodo raiz = new Nodo();
        try {
            shaskell.parse();
            raiz = shaskell.raiz;
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        if(ErroresHaskell.contErrores > 0)
            ErroresHaskell.generarErrores();
        if(raiz != null)
        {
            Haskell.arbol.hijos.addAll(raiz.hijos);
            Arbol.getGrafo(Haskell.arbol);
            Arbol.dibujar();
            String x = "Se cargo a memoria: \n";
            for(Nodo n : raiz.hijos)
                x += "\t-" + n.valor + "-\n";
            taConsola.setText(taConsola.getText() + x + "\n");
            //Semantico.ejecutarValor(raiz);
        }
        else
            System.out.println("La raiz de haskel terminal es nula");
    }//GEN-LAST:event_bCargarActionPerformed

    private void bEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEjecutarActionPerformed
        String texto = taEntrada.getText();
        LexicoGraphik lgraphik = new LexicoGraphik(new BufferedReader(new StringReader(texto)));
        SintacticoGraphik sgraphik = new SintacticoGraphik(lgraphik);
        Nodo raiz = new Nodo();
        try {
            sgraphik.parse();
            raiz = sgraphik.raiz;
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        if(raiz != null)
        {
            consola = "";
            Arbol.getGrafo(raiz);
            Arbol.dibujar();
            if(ErroresGraphik.contErrores > 0)
            {
                ErroresGraphik.generarErrores();
                JOptionPane.showMessageDialog(this,"Errores Lexicos o Sintacticos");
            }
            else
                try {
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            EjecutarArbol.ejecutar(raiz);
            if(ErroresGraphik.contErrores > 0)
            {
                ErroresGraphik.generarErrores();
                JOptionPane.showMessageDialog(this,"Errores semanticos");
            }
            taConsola.setText("");
            taConsola.setText(consola);
            //taConsola.setText(taConsola.getText() + Pila.recorrerPila());
            System.out.println(Pila.recorrerPila());
        }
        else
            System.out.println("La raiz de graphik terminal es nula");
    }//GEN-LAST:event_bEjecutarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCargar;
    private javax.swing.JButton bEjecutar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea taConsola;
    private javax.swing.JTextArea taEntrada;
    private javax.swing.JTextField tfEntradaConsola;
    // End of variables declaration//GEN-END:variables
}
